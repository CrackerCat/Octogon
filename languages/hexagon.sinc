#
# This file was generated automatically
#

define token encoding (32)
     Rs_20_16=(16,20)
     Rd_4_0=(0,4)
     s16_27_21=(21,27) signed
     s16_13_5=(5,13) signed
     bits_31_28=(28,31)
     Rt_12_8=(8,12)
     bits_31_21=(21,31)
     s10_21_21=(21,21) signed
     s10_13_5=(5,13) signed
     bits_31_22=(22,31)
     bits_31_24=(24,31)
     bits_13_13=(13,13)
     Rx_20_16=(16,20)
     u16_23_22=(22,23)
     u16_13_0=(0,13)
     bits_21_21=(21,21)
     s16_23_22=(22,23) signed
     s16_20_16=(16,20) signed
     bits_22_21=(21,22)
     Rdd_4_0=(0,4)
     s8_12_5=(5,12) signed
     S8_22_16=(16,22) signed
     S8_13_13=(13,13) signed
     bits_31_23=(23,31)
     U6_20_16=(16,20)
     U6_13_13=(13,13)
     Pu_22_21=(21,22)
     Pu_24_23=(23,24)
     bits_31_25=(25,31)
     Pu_6_5=(5,6)
     bits_7_7=(7,7)
     Pu_9_8=(8,9)
     bits_11_10=(10,11)
     s12_19_16=(16,19) signed
     s12_12_5=(5,12) signed
     bits_20_20=(20,20)
     Pd_1_0=(0,1)
     bits_4_2=(2,4)
     u9_13_5=(5,13)
     Pt_9_8=(8,9)
     Ps_17_16=(16,17)
     bits_31_20=(20,31)
     bits_4_4=(4,4)
     r7_12_8=(8,12) signed
     r7_4_3=(3,4) signed
     U10_20_16=(16,20)
     U10_7_5=(5,7)
     U10_1_0=(0,1)
     u6_12_7=(7,12)
     bits_31_16=(16,31)
     Pu_7_6=(6,7)
     Cd_4_0=(0,4)
     Rss_20_16=(16,20)
     Cdd_4_0=(0,4)
     Css_20_16=(16,20)
     Cs_20_16=(16,20)
     bits_12_11=(11,12)
     r22_24_16=(16,24) signed
     r22_13_1=(1,13) signed
     bits_0_0=(0,0)
     r15_23_22=(22,23) signed
     r15_20_16=(16,20) signed
     r15_13_13=(13,13) signed
     r15_7_1=(1,7) signed
     bits_11_11=(11,11)
     Rs_19_16=(16,19)
     r9_21_20=(20,21) signed
     r9_7_1=(1,7) signed
     bits_9_8=(8,9)
     U5_12_8=(8,12)
     Rt_11_8=(8,11)
     bits_13_12=(12,13)
     r13_21_21=(21,21) signed
     r13_13_13=(13,13) signed
     r13_11_1=(1,11) signed
     bits_12_12=(12,12)
     Rd_19_16=(16,19)
     U6_13_8=(8,13)
     Rd_11_8=(8,11)
     u2_13_13=(13,13)
     u2_7_7=(7,7)
     u16_26_25=(25,26)
     u16_20_16=(16,20)
     u16_13_5=(5,13)
     bits_31_27=(27,31)
     bits_24_21=(21,24)
     s11_26_25=(25,26) signed
     s11_13_5=(5,13) signed
     Mu_13_13=(13,13)
     s4_8_5=(5,8) signed
     bits_9_9=(9,9)
     Re_20_16=(16,20)
     U6_11_8=(8,11)
     U6_6_5=(5,6)
     Rt_20_16=(16,20)
     Pv_6_5=(5,6)
     Pt_12_11=(11,12)
     u6_10_5=(5,10)
     Pt_10_9=(9,10)
     bits_13_11=(11,13)
     u6_20_16=(16,20)
     u6_8_8=(8,8)
     Ryy_4_0=(0,4)
     bits_13_10=(10,13)
     Pv_9_8=(8,9)
     Rt_4_0=(0,4)
     bits_6_5=(5,6)
     U5_4_0=(0,4)
     Ns_18_16=(16,18)
;

attach variables [ Rs_20_16 Rd_4_0 Rt_12_8 Rx_20_16 Re_20_16 Rt_20_16 Rt_4_0 ]
    [R0  R1  R2  R3  R4  R5  R6  R7 
     R8  R9  R10 R11 R12 R13 R14 R15
     R16 R17 R18 R19 R20 R21 R22 R23
     R24 R25 R26 R27 R28 R29 R30 R31]
;

attach variables [ Rdd_4_0 Rss_20_16 Ryy_4_0 ]
    [R1_0   _      R3_2   _      R5_4   _      R7_6   _     
     R9_8   _      R11_10 _      R13_12 _      R15_14 _     
     R17_16 _      R19_18 _      R21_20 _      R23_22 _     
     R25_24 _      R27_26 _      R29_28 _      R31_30 _     ]
;

attach variables [ Pu_22_21 Pu_24_23 Pu_6_5 Pu_9_8 Pd_1_0 Pt_9_8 Ps_17_16 Pu_7_6 Pv_6_5 Pt_12_11 Pt_10_9 Pv_9_8 ]
    [P0 P1 P2 P3]
;

attach variables [ Cd_4_0 Cs_20_16 ]
    [C0  C1  C2  C3  C4  C5  C6  C7 
     C8  C9  C10 C11 C12 C13 C14 C15
     C16 C17 C18 C19 C20 C21 C22 C23
     C24 C25 C26 C27 C28 C29 C30 C31]
;

attach variables [ Cdd_4_0 Css_20_16 ]
    [C1_0   _      C3_2   _      C5_4   _      C7_6   _     
     C9_8   _      C11_10 _      C13_12 _      C15_14 _     
     C17_16 _      C19_18 _      C21_20 _      C23_22 _     
     C25_24 _      C27_26 _      C29_28 _      C31_30 _     ]
;

attach variables [ Rs_19_16 Rt_11_8 Rd_19_16 Rd_11_8 ]
    [R0  R1  R2  R3  R4  R5  R6  R7 
     R16 R17 R18 R19 R20 R21 R22 R23]
;

attach variables [ Mu_13_13 ]
    [$(M0) $(M1)]
;

attach values [ Ns_18_16 ]
    [ 0 1 2 3 4 5 6 7 ]
;

define pcodeop newSuffix;
define pcodeop nextPacket;
define pcodeop constExtend;
define pcodeop circAdd;
define pcodeop bitsRev;
define pcodeop frameUnscramble;

# 
# Rd=add(Rs,#s16)
# 1011iiiiiiisssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rd = Rs + imm_s;
# 
:Q6_R_add_R_S_6 Rd_4_0, Rs_20_16, s16
        is bits_31_28=0b1011 & s16_27_21 & Rs_20_16 & s16_13_5 & Rd_4_0
            [s16 = (s16_27_21 << 0) | (s16_13_5 << 7);] {
    Rd_4_0 = (Rs_20_16 + s16);
}

# 
# Rd=add(Rs,Rt)
# 11110011000sssssPP-ttttt---ddddd
# 
# Rd = Rs + Rt;
# 
:Q6_R_add_R_R Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110011000 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = (Rs_20_16 + Rt_12_8);
}

# 
# Rd=add(Rs,Rt):sat
# 11110110010sssssPP-ttttt---ddddd
# 
# Rd = sat(32, Rs + Rt);
# 
:Q6_R_add_R_R_sat Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110110010 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = (Rs_20_16 + Rt_12_8);
}

# 
# Rd=and(Rs,#s10)
# 0111011000isssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rd = Rs & imm_s;
# 
:Q6_R_and_R_S_0 Rd_4_0, Rs_20_16, s10
        is bits_31_22=0b0111011000 & s10_21_21 & Rs_20_16 & s10_13_5 & Rd_4_0
            [s10 = (s10_21_21 << 0) | (s10_13_5 << 1);] {
    Rd_4_0 = (Rs_20_16 & s10);
}

# 
# Rd=or(Rs,#s10)
# 0111011010isssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rd = Rs | imm_s;
# 
:Q6_R_or_R_S_0 Rd_4_0, Rs_20_16, s10
        is bits_31_22=0b0111011010 & s10_21_21 & Rs_20_16 & s10_13_5 & Rd_4_0
            [s10 = (s10_21_21 << 0) | (s10_13_5 << 1);] {
    Rd_4_0 = (Rs_20_16 | s10);
}

# 
# Rd=and(Rs,Rt)
# 11110001000sssssPP-ttttt---ddddd
# 
# Rd = Rs & Rt;
# 
:Q6_R_and_R_R Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110001000 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = (Rs_20_16 & Rt_12_8);
}

# 
# Rd=or(Rs,Rt)
# 11110001001sssssPP-ttttt---ddddd
# 
# Rd = Rs | Rt;
# 
:Q6_R_or_R_R Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110001001 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = (Rs_20_16 | Rt_12_8);
}

# 
# Rd=xor(Rs,Rt)
# 11110001011sssssPP-ttttt---ddddd
# 
# Rd = Rs ^ Rt;
# 
:Q6_R_xor_R_R Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110001011 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = (Rs_20_16 ^ Rt_12_8);
}

# 
# Rd=and(Rt,~Rs)
# 11110001100sssssPP-ttttt---ddddd
# 
# Rd = (Rt & ~Rs);
# 
:Q6_R_and_R_neg_R Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110001100 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = (Rt_12_8 & (~Rs_20_16));
}

# 
# Rd=or(Rt,~Rs)
# 11110001101sssssPP-ttttt---ddddd
# 
# Rd = (Rt | ~Rs);
# 
:Q6_R_or_R_neg_R Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110001101 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = (Rt_12_8 | (~Rs_20_16));
}

# 
# nop
# 01111111--------PP--------------
# 
# 
# 
:Q6_nop 
        is bits_31_24=0b01111111 {
}

# 
# Rd=sub(#s10,Rs)
# 0111011001isssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rd = imm_s - Rs;
# 
:Q6_R_sub_S_0_R Rd_4_0, s10, Rs_20_16
        is bits_31_22=0b0111011001 & s10_21_21 & Rs_20_16 & s10_13_5 & Rd_4_0
            [s10 = (s10_21_21 << 0) | (s10_13_5 << 1);] {
    Rd_4_0 = (s10 - Rs_20_16);
}

# 
# Rd=sub(Rt,Rs)
# 11110011001sssssPP-ttttt---ddddd
# 
# Rd = Rt - Rs;
# 
:Q6_R_sub_R_R Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110011001 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = (Rt_12_8 - Rs_20_16);
}

# 
# Rd=sub(Rt,Rs):sat
# 11110110110sssssPP-ttttt---ddddd
# 
# Rd = sat(32, Rt - Rs);
# 
:Q6_R_sub_R_R_sat Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110110110 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = (Rt_12_8 - Rs_20_16);
}

# 
# Rd=sxtb(Rs)
# 01110000101sssssPP0--------ddddd
# 
# Rd = sxt(8, 32, Rs);
# 
:Q6_R_sxtb_R Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000101 & Rs_20_16 & bits_13_13=0b0 & Rd_4_0 {
    Rd_4_0 = sext(Rs_20_16:1);
}

# 
# Rd=sxth(Rs)
# 01110000111sssssPP0--------ddddd
# 
# Rd = sxt(16, 32, Rs);
# 
:Q6_R_sxth_R Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000111 & Rs_20_16 & bits_13_13=0b0 & Rd_4_0 {
    Rd_4_0 = sext(Rs_20_16:2);
}

# 
# Rx.L=#u16
# 01110001ii1xxxxxPPiiiiiiiiiiiiii
# 
# Rx.h[0] = imm_u;
# 
:Q6_Rl_U_6 Rx_20_16, u16
        is bits_31_24=0b01110001 & u16_23_22 & bits_21_21=0b1 & Rx_20_16 & u16_13_0
            [u16 = (u16_23_22 << 0) | (u16_13_0 << 2);] {
    local Rx_20_16_h:4 = &Rx_20_16;
    *[register]:2 (Rx_20_16_h + 2 * 0) = u16:2;
}

# 
# Rx.H=#u16
# 01110010ii1xxxxxPPiiiiiiiiiiiiii
# 
# Rx.h[1] = imm_u;
# 
:Q6_Rh_U_6 Rx_20_16, u16
        is bits_31_24=0b01110010 & u16_23_22 & bits_21_21=0b1 & Rx_20_16 & u16_13_0
            [u16 = (u16_23_22 << 0) | (u16_13_0 << 2);] {
    local Rx_20_16_h:4 = &Rx_20_16;
    *[register]:2 (Rx_20_16_h + 2 * 1) = u16:2;
}

# 
# Rd=#s16
# 01111000ii-iiiiiPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rd = imm_s;
# 
:Q6_R_S_6 Rd_4_0, s16
        is bits_31_24=0b01111000 & s16_23_22 & s16_20_16 & s16_13_5 & Rd_4_0
            [s16 = (s16_23_22 << 0) | (s16_20_16 << 2) | (s16_13_5 << 7);] {
    Rd_4_0 = s16;
}

# 
# Rd=Rs
# 01110000011sssssPP0--------ddddd
# 
# Rd = Rs;
# 
:Q6_R_R Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000011 & Rs_20_16 & bits_13_13=0b0 & Rd_4_0 {
    Rd_4_0 = Rs_20_16;
}

# 
# Rd=vaddh(Rs,Rt)
# 11110110000sssssPP-ttttt---ddddd
# 
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = (Rs.h[i] + Rt.h[i]);
# }
# 
:Q6_R_vaddh_R_R Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110110000 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local Rs_20_16_h:4 = &Rs_20_16;
    local Rt_12_8_h:4 = &Rt_12_8;
    *[register]:2 (Rd_4_0_h + 2 * i) = (*[register]:2 (Rs_20_16_h + 2 * i) + *[register]:2 (Rt_12_8_h + 2 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=vaddh(Rs,Rt):sat
# 11110110001sssssPP-ttttt---ddddd
# 
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = sat(16, Rs.h[i] + Rt.h[i]);
# }
# 
:Q6_R_vaddh_R_R_sat Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110110001 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local Rs_20_16_h:4 = &Rs_20_16;
    local Rt_12_8_h:4 = &Rt_12_8;
    *[register]:2 (Rd_4_0_h + 2 * i) = (*[register]:2 (Rs_20_16_h + 2 * i) + *[register]:2 (Rt_12_8_h + 2 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=vadduh(Rs,Rt):sat
# 11110110011sssssPP-ttttt---ddddd
# 
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = usat(16, Rs.uh[i] + Rt.uh[i]);
# }
# 
:Q6_R_vadduh_R_R_sat Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110110011 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local Rs_20_16_uh:4 = &Rs_20_16;
    local Rt_12_8_uh:4 = &Rt_12_8;
    *[register]:2 (Rd_4_0_h + 2 * i) = (*[register]:2 (Rs_20_16_uh + 2 * i) + *[register]:2 (Rt_12_8_uh + 2 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=vavgh(Rs,Rt)
# 11110111-00sssssPP-ttttt---ddddd
# 
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = ((Rs.h[i] + Rt.h[i]) >> 1);
# }
# 
:Q6_R_vavgh_R_R Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11110111 & bits_22_21=0b00 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local Rs_20_16_h:4 = &Rs_20_16;
    local Rt_12_8_h:4 = &Rt_12_8;
    *[register]:2 (Rd_4_0_h + 2 * i) = ((*[register]:2 (Rs_20_16_h + 2 * i) + *[register]:2 (Rt_12_8_h + 2 * i)) >> 1);
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=vavgh(Rs,Rt):rnd
# 11110111-01sssssPP-ttttt---ddddd
# 
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = ((Rs.h[i] + Rt.h[i] + 1) >> 1);
# }
# 
:Q6_R_vavgh_R_R_rnd Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11110111 & bits_22_21=0b01 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local Rs_20_16_h:4 = &Rs_20_16;
    local Rt_12_8_h:4 = &Rt_12_8;
    *[register]:2 (Rd_4_0_h + 2 * i) = (((*[register]:2 (Rs_20_16_h + 2 * i) + *[register]:2 (Rt_12_8_h + 2 * i)) + 1) >> 1);
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=vnavgh(Rt,Rs)
# 11110111-11sssssPP-ttttt---ddddd
# 
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = ((Rt.h[i] - Rs.h[i]) >> 1);
# }
# 
:Q6_R_vnavgh_R_R Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_24=0b11110111 & bits_22_21=0b11 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local Rt_12_8_h:4 = &Rt_12_8;
    local Rs_20_16_h:4 = &Rs_20_16;
    *[register]:2 (Rd_4_0_h + 2 * i) = ((*[register]:2 (Rt_12_8_h + 2 * i) - *[register]:2 (Rs_20_16_h + 2 * i)) >> 1);
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=vsubh(Rt,Rs)
# 11110110100sssssPP-ttttt---ddddd
# 
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = (Rt.h[i] - Rs.h[i]);
# }
# 
:Q6_R_vsubh_R_R Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110110100 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local Rt_12_8_h:4 = &Rt_12_8;
    local Rs_20_16_h:4 = &Rs_20_16;
    *[register]:2 (Rd_4_0_h + 2 * i) = (*[register]:2 (Rt_12_8_h + 2 * i) - *[register]:2 (Rs_20_16_h + 2 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=vsubh(Rt,Rs):sat
# 11110110101sssssPP-ttttt---ddddd
# 
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = sat(16, Rt.h[i] - Rs.h[i]);
# }
# 
:Q6_R_vsubh_R_R_sat Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110110101 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local Rt_12_8_h:4 = &Rt_12_8;
    local Rs_20_16_h:4 = &Rs_20_16;
    *[register]:2 (Rd_4_0_h + 2 * i) = (*[register]:2 (Rt_12_8_h + 2 * i) - *[register]:2 (Rs_20_16_h + 2 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=vsubuh(Rt,Rs):sat
# 11110110111sssssPP-ttttt---ddddd
# 
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = usat(16, Rt.uh[i] - Rs.uh[i]);
# }
# 
:Q6_R_vsubuh_R_R_sat Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110110111 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local Rt_12_8_uh:4 = &Rt_12_8;
    local Rs_20_16_uh:4 = &Rs_20_16;
    *[register]:2 (Rd_4_0_h + 2 * i) = (*[register]:2 (Rt_12_8_uh + 2 * i) - *[register]:2 (Rs_20_16_uh + 2 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=zxth(Rs)
# 01110000110sssssPP0--------ddddd
# 
# Rd = zxt(16, 32, Rs);
# 
:Q6_R_zxth_R Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000110 & Rs_20_16 & bits_13_13=0b0 & Rd_4_0 {
    Rd_4_0 = zext(Rs_20_16:2);
}

# 
# Rdd=combine(Rs,#s8)
# 01110011-00sssssPP1iiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rdd.w[0] = imm_s;
# Rdd.w[1] = Rs;
# 
:Q6_RR_combine_R_S Rdd_4_0, Rs_20_16, s8
        is bits_31_24=0b01110011 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b1 & s8_12_5 & Rdd_4_0
            [s8 = (s8_12_5 << 0);] {
    local Rdd_4_0_w:4 = &Rdd_4_0;
    *[register]:4 (Rdd_4_0_w + 4 * 0) = s8;
    *[register]:4 (Rdd_4_0_w + 4 * 1) = Rs_20_16;
}

# 
# Rdd=combine(#s8,Rs)
# 01110011-01sssssPP1iiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rdd.w[0] = Rs;
# Rdd.w[1] = imm_s;
# 
:Q6_RR_combine_S_R Rdd_4_0, s8, Rs_20_16
        is bits_31_24=0b01110011 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b1 & s8_12_5 & Rdd_4_0
            [s8 = (s8_12_5 << 0);] {
    local Rdd_4_0_w:4 = &Rdd_4_0;
    *[register]:4 (Rdd_4_0_w + 4 * 0) = Rs_20_16;
    *[register]:4 (Rdd_4_0_w + 4 * 1) = s8;
}

# 
# Rdd=combine(#s8,#S8)
# 011111000IIIIIIIPPIiiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rdd.w[0] = imm_S;
# Rdd.w[1] = imm_s;
# 
:Q6_RR_combine_S_S Rdd_4_0, s8, S8
        is bits_31_23=0b011111000 & S8_22_16 & S8_13_13 & s8_12_5 & Rdd_4_0
            [S8 = (S8_22_16 << 0) | (S8_13_13 << 7); s8 = (s8_12_5 << 0);] {
    local Rdd_4_0_w:4 = &Rdd_4_0;
    *[register]:4 (Rdd_4_0_w + 4 * 0) = S8;
    *[register]:4 (Rdd_4_0_w + 4 * 1) = s8;
}

# 
# Rdd=combine(#s8,#U6)
# 011111001--IIIIIPPIiiiiiiiiddddd
# 
# apply_extension(imm_U);
# Rdd.w[0] = imm_U;
# Rdd.w[1] = imm_s;
# 
:Q6_RR_combine_S_U Rdd_4_0, s8, U6
        is bits_31_23=0b011111001 & U6_20_16 & U6_13_13 & s8_12_5 & Rdd_4_0
            [U6 = (U6_20_16 << 0) | (U6_13_13 << 5); s8 = (s8_12_5 << 0);] {
    local Rdd_4_0_w:4 = &Rdd_4_0;
    *[register]:4 (Rdd_4_0_w + 4 * 0) = U6;
    *[register]:4 (Rdd_4_0_w + 4 * 1) = s8;
}

# 
# Rd=combine(Rt.H,Rs.H)
# 11110011100sssssPP-ttttt---ddddd
# 
# Rd = (Rt.uh[1] << 16) | Rs.uh[1];
# 
:Q6_R_combine_Rh_Rh Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110011100 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local Rt_12_8_uh:4 = &Rt_12_8;
    local Rs_20_16_uh:4 = &Rs_20_16;
    Rd_4_0 = zext(((*[register]:2 (Rt_12_8_uh + 2 * 1) << 16) | *[register]:2 (Rs_20_16_uh + 2 * 1)));
}

# 
# Rd=combine(Rt.H,Rs.L)
# 11110011101sssssPP-ttttt---ddddd
# 
# Rd = (Rt.uh[1] << 16) | Rs.uh[0];
# 
:Q6_R_combine_Rh_Rl Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110011101 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local Rt_12_8_uh:4 = &Rt_12_8;
    local Rs_20_16_uh:4 = &Rs_20_16;
    Rd_4_0 = zext(((*[register]:2 (Rt_12_8_uh + 2 * 1) << 16) | *[register]:2 (Rs_20_16_uh + 2 * 0)));
}

# 
# Rd=combine(Rt.L,Rs.H)
# 11110011110sssssPP-ttttt---ddddd
# 
# Rd = (Rt.uh[0] << 16) | Rs.uh[1];
# 
:Q6_R_combine_Rl_Rh Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110011110 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local Rt_12_8_uh:4 = &Rt_12_8;
    local Rs_20_16_uh:4 = &Rs_20_16;
    Rd_4_0 = zext(((*[register]:2 (Rt_12_8_uh + 2 * 0) << 16) | *[register]:2 (Rs_20_16_uh + 2 * 1)));
}

# 
# Rd=combine(Rt.L,Rs.L)
# 11110011111sssssPP-ttttt---ddddd
# 
# Rd = (Rt.uh[0] << 16) | Rs.uh[0];
# 
:Q6_R_combine_Rl_Rl Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_21=0b11110011111 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    local Rt_12_8_uh:4 = &Rt_12_8;
    local Rs_20_16_uh:4 = &Rs_20_16;
    Rd_4_0 = zext(((*[register]:2 (Rt_12_8_uh + 2 * 0) << 16) | *[register]:2 (Rs_20_16_uh + 2 * 0)));
}

# 
# Rdd=combine(Rs,Rt)
# 111101010--sssssPP-ttttt---ddddd
# 
# Rdd.w[0] = Rt;
# Rdd.w[1] = Rs;
# 
:Q6_RR_combine_R_R Rdd_4_0, Rs_20_16, Rt_12_8
        is bits_31_23=0b111101010 & Rs_20_16 & Rt_12_8 & Rdd_4_0 {
    local Rdd_4_0_w:4 = &Rdd_4_0;
    *[register]:4 (Rdd_4_0_w + 4 * 0) = Rt_12_8;
    *[register]:4 (Rdd_4_0_w + 4 * 1) = Rs_20_16;
}

# 
# Rd=mux(Pu,Rs,#s8)
# 011100110uusssssPP0iiiiiiiiddddd
# 
# PREDUSE_TIMING;
# apply_extension(imm_s);
# (Pu[0]) ? (Rd = Rs) : (Rd = imm_s);
# 
:Q6_R_mux_P_R_S Rd_4_0, Pu_22_21, Rs_20_16, s8
        is bits_31_23=0b011100110 & Pu_22_21 & Rs_20_16 & bits_13_13=0b0 & s8_12_5 & Rd_4_0
            [s8 = (s8_12_5 << 0);] {
    if (Pu_22_21[0, 1]) goto <if_Pu_22_21_0_1>;
    Rd_4_0 = s8;
    goto <endif_Pu_22_21_0_1>;
    <if_Pu_22_21_0_1>
    Rd_4_0 = Rs_20_16;
    <endif_Pu_22_21_0_1>
}

# 
# Rd=mux(Pu,#s8,Rs)
# 011100111uusssssPP0iiiiiiiiddddd
# 
# PREDUSE_TIMING;
# apply_extension(imm_s);
# (Pu[0]) ? (Rd = imm_s) : (Rd = Rs);
# 
:Q6_R_mux_P_S_R Rd_4_0, Pu_22_21, s8, Rs_20_16
        is bits_31_23=0b011100111 & Pu_22_21 & Rs_20_16 & bits_13_13=0b0 & s8_12_5 & Rd_4_0
            [s8 = (s8_12_5 << 0);] {
    if (Pu_22_21[0, 1]) goto <if_Pu_22_21_0_1>;
    Rd_4_0 = Rs_20_16;
    goto <endif_Pu_22_21_0_1>;
    <if_Pu_22_21_0_1>
    Rd_4_0 = s8;
    <endif_Pu_22_21_0_1>
}

# 
# Rd=mux(Pu,#s8,#S8)
# 0111101uuIIIIIIIPPIiiiiiiiiddddd
# 
# PREDUSE_TIMING;
# apply_extension(imm_s);
# (Pu[0]) ? (Rd = imm_s) : (Rd = imm_S);
# 
:Q6_R_mux_P_S_S Rd_4_0, Pu_24_23, s8, S8
        is bits_31_25=0b0111101 & Pu_24_23 & S8_22_16 & S8_13_13 & s8_12_5 & Rd_4_0
            [S8 = (S8_22_16 << 0) | (S8_13_13 << 7); s8 = (s8_12_5 << 0);] {
    if (Pu_24_23[0, 1]) goto <if_Pu_24_23_0_1>;
    Rd_4_0 = S8;
    goto <endif_Pu_24_23_0_1>;
    <if_Pu_24_23_0_1>
    Rd_4_0 = s8;
    <endif_Pu_24_23_0_1>
}

# 
# Rd=mux(Pu,Rs,Rt)
# 11110100---sssssPP-ttttt-uuddddd
# 
# PREDUSE_TIMING;
# (Pu[0]) ? (Rd = Rs) : (Rd = Rt);
# 
:Q6_R_mux_P_R_R Rd_4_0, Pu_6_5, Rs_20_16, Rt_12_8
        is bits_31_24=0b11110100 & Rs_20_16 & Rt_12_8 & Pu_6_5 & Rd_4_0 {
    if (Pu_6_5[0, 1]) goto <if_Pu_6_5_0_1>;
    Rd_4_0 = Rt_12_8;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = Rs_20_16;
    <endif_Pu_6_5_0_1>
}

# 
# Rd=aslh(Rs)
# 01110000000sssssPP0--------ddddd
# 
# Rd = Rs << 16;
# 
:Q6_R_aslh_R Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000000 & Rs_20_16 & bits_13_13=0b0 & Rd_4_0 {
    Rd_4_0 = (Rs_20_16 << 16);
}

# 
# Rd=asrh(Rs)
# 01110000001sssssPP0--------ddddd
# 
# Rd = Rs >> 16;
# 
:Q6_R_asrh_R Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000001 & Rs_20_16 & bits_13_13=0b0 & Rd_4_0 {
    Rd_4_0 = (Rs_20_16 >> 16);
}

# 
# Rdd=packhl(Rs,Rt)
# 111101011--sssssPP-ttttt---ddddd
# 
# Rdd.h[0] = Rt.h[0];
# Rdd.h[1] = Rs.h[0];
# Rdd.h[2] = Rt.h[1];
# Rdd.h[3] = Rs.h[1];
# 
:Q6_RR_packhl_R_R Rdd_4_0, Rs_20_16, Rt_12_8
        is bits_31_23=0b111101011 & Rs_20_16 & Rt_12_8 & Rdd_4_0 {
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local Rt_12_8_h:4 = &Rt_12_8;
    local Rs_20_16_h:4 = &Rs_20_16;
    *[register]:2 (Rdd_4_0_h + 2 * 0) = *[register]:2 (Rt_12_8_h + 2 * 0);
    *[register]:2 (Rdd_4_0_h + 2 * 1) = *[register]:2 (Rs_20_16_h + 2 * 0);
    *[register]:2 (Rdd_4_0_h + 2 * 2) = *[register]:2 (Rt_12_8_h + 2 * 1);
    *[register]:2 (Rdd_4_0_h + 2 * 3) = *[register]:2 (Rs_20_16_h + 2 * 1);
}

# 
# if (Pu) Rd=add(Rs,#s8)
# 011101000uusssssPP0iiiiiiiiddddd
# 
# if (Pu[0]) {
#     apply_extension(imm_s);
#     Rd = Rs + imm_s;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_add_R_S Pu_22_21, Rd_4_0, Rs_20_16, s8
        is bits_31_23=0b011101000 & Pu_22_21 & Rs_20_16 & bits_13_13=0b0 & s8_12_5 & Rd_4_0
            [s8 = (s8_12_5 << 0);] {
    if (Pu_22_21[0, 1]) goto <if_Pu_22_21_0_1>;
    goto <endif_Pu_22_21_0_1>;
    <if_Pu_22_21_0_1>
    Rd_4_0 = (Rs_20_16 + s8);
    <endif_Pu_22_21_0_1>
}

# 
# if (Pu.new) Rd=add(Rs,#s8)
# 011101000uusssssPP1iiiiiiiiddddd
# 
# if (Pu.new[0]) {
#     apply_extension(imm_s);
#     Rd = Rs + imm_s;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_add_R_S Pu_22_21, Rd_4_0, Rs_20_16, s8
        is bits_31_23=0b011101000 & Pu_22_21 & Rs_20_16 & bits_13_13=0b1 & s8_12_5 & Rd_4_0
            [s8 = (s8_12_5 << 0);] {
    local new_new:1 = newSuffix(Pu_22_21);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 + s8);
    <endif_new_new_0_1>
}

# 
# if (!Pu) Rd=add(Rs,#s8)
# 011101001uusssssPP0iiiiiiiiddddd
# 
# if (!Pu[0]) {
#     apply_extension(imm_s);
#     Rd = Rs + imm_s;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_add_R_S Pu_22_21, Rd_4_0, Rs_20_16, s8
        is bits_31_23=0b011101001 & Pu_22_21 & Rs_20_16 & bits_13_13=0b0 & s8_12_5 & Rd_4_0
            [s8 = (s8_12_5 << 0);] {
    if ((!Pu_22_21[0, 1])) goto <if_Pu_22_21_0_1>;
    goto <endif_Pu_22_21_0_1>;
    <if_Pu_22_21_0_1>
    Rd_4_0 = (Rs_20_16 + s8);
    <endif_Pu_22_21_0_1>
}

# 
# if (!Pu.new) Rd=add(Rs,#s8)
# 011101001uusssssPP1iiiiiiiiddddd
# 
# if (!Pu.new[0]) {
#     apply_extension(imm_s);
#     Rd = Rs + imm_s;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_add_R_S Pu_22_21, Rd_4_0, Rs_20_16, s8
        is bits_31_23=0b011101001 & Pu_22_21 & Rs_20_16 & bits_13_13=0b1 & s8_12_5 & Rd_4_0
            [s8 = (s8_12_5 << 0);] {
    local new_new:1 = newSuffix(Pu_22_21);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 + s8);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=add(Rs,Rt)
# 111110110-0sssssPP0ttttt0uuddddd
# 
# if (Pu[0]) {
#     Rd = Rs + Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_add_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_23=0b111110110 & bits_21_21=0b0 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    if (Pu_6_5[0, 1]) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rs_20_16 + Rt_12_8);
    <endif_Pu_6_5_0_1>
}

# 
# if (!Pu) Rd=add(Rs,Rt)
# 111110110-0sssssPP0ttttt1uuddddd
# 
# if (!Pu[0]) {
#     Rd = Rs + Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_add_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_23=0b111110110 & bits_21_21=0b0 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    if ((!Pu_6_5[0, 1])) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rs_20_16 + Rt_12_8);
    <endif_Pu_6_5_0_1>
}

# 
# if (Pu.new) Rd=add(Rs,Rt)
# 111110110-0sssssPP1ttttt0uuddddd
# 
# if (Pu.new[0]) {
#     Rd = Rs + Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_add_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_23=0b111110110 & bits_21_21=0b0 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 + Rt_12_8);
    <endif_new_new_0_1>
}

# 
# if (!Pu.new) Rd=add(Rs,Rt)
# 111110110-0sssssPP1ttttt1uuddddd
# 
# if (!Pu.new[0]) {
#     Rd = Rs + Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_add_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_23=0b111110110 & bits_21_21=0b0 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 + Rt_12_8);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=aslh(Rs)
# 01110000000sssssPP1-00uu---ddddd
# 
# if (Pu[0]) {
#     Rd = Rs << 16;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_aslh_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000000 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b00 & Pu_9_8 & Rd_4_0 {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = (Rs_20_16 << 16);
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu.new) Rd=aslh(Rs)
# 01110000000sssssPP1-01uu---ddddd
# 
# if (Pu.new[0]) {
#     Rd = Rs << 16;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_aslh_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000000 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b01 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 << 16);
    <endif_new_new_0_1>
}

# 
# if (!Pu) Rd=aslh(Rs)
# 01110000000sssssPP1-10uu---ddddd
# 
# if (!Pu[0]) {
#     Rd = Rs << 16;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_aslh_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000000 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b10 & Pu_9_8 & Rd_4_0 {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = (Rs_20_16 << 16);
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu.new) Rd=aslh(Rs)
# 01110000000sssssPP1-11uu---ddddd
# 
# if (!Pu.new[0]) {
#     Rd = Rs << 16;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_aslh_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000000 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b11 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 << 16);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=asrh(Rs)
# 01110000001sssssPP1-00uu---ddddd
# 
# if (Pu[0]) {
#     Rd = Rs >> 16;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_asrh_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000001 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b00 & Pu_9_8 & Rd_4_0 {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = (Rs_20_16 >> 16);
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu.new) Rd=asrh(Rs)
# 01110000001sssssPP1-01uu---ddddd
# 
# if (Pu.new[0]) {
#     Rd = Rs >> 16;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_asrh_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000001 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b01 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 >> 16);
    <endif_new_new_0_1>
}

# 
# if (!Pu) Rd=asrh(Rs)
# 01110000001sssssPP1-10uu---ddddd
# 
# if (!Pu[0]) {
#     Rd = Rs >> 16;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_asrh_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000001 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b10 & Pu_9_8 & Rd_4_0 {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = (Rs_20_16 >> 16);
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu.new) Rd=asrh(Rs)
# 01110000001sssssPP1-11uu---ddddd
# 
# if (!Pu.new[0]) {
#     Rd = Rs >> 16;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_asrh_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000001 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b11 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 >> 16);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rdd=combine(Rs,Rt)
# 11111101---sssssPP0ttttt0uuddddd
# 
# if (Pu[0]) {
#     Rdd.w[0] = Rt;
#     Rdd.w[1] = Rs;
# } else {
#     NOP;
# }
# 
:Q6_if_P_RR_combine_R_R Pu_6_5, Rdd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111101 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rdd_4_0 {
    if (Pu_6_5[0, 1]) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    *[register]:4 (Rdd_4_0_w + 4 * 0) = Rt_12_8;
    *[register]:4 (Rdd_4_0_w + 4 * 1) = Rs_20_16;
    <endif_Pu_6_5_0_1>
}

# 
# if (!Pu) Rdd=combine(Rs,Rt)
# 11111101---sssssPP0ttttt1uuddddd
# 
# if (!Pu[0]) {
#     Rdd.w[0] = Rt;
#     Rdd.w[1] = Rs;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_RR_combine_R_R Pu_6_5, Rdd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111101 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rdd_4_0 {
    if ((!Pu_6_5[0, 1])) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    *[register]:4 (Rdd_4_0_w + 4 * 0) = Rt_12_8;
    *[register]:4 (Rdd_4_0_w + 4 * 1) = Rs_20_16;
    <endif_Pu_6_5_0_1>
}

# 
# if (Pu.new) Rdd=combine(Rs,Rt)
# 11111101---sssssPP1ttttt0uuddddd
# 
# if (Pu.new[0]) {
#     Rdd.w[0] = Rt;
#     Rdd.w[1] = Rs;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_RR_combine_R_R Pu_6_5, Rdd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111101 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rdd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    *[register]:4 (Rdd_4_0_w + 4 * 0) = Rt_12_8;
    *[register]:4 (Rdd_4_0_w + 4 * 1) = Rs_20_16;
    <endif_new_new_0_1>
}

# 
# if (!Pu.new) Rdd=combine(Rs,Rt)
# 11111101---sssssPP1ttttt1uuddddd
# 
# if (!Pu.new[0]) {
#     Rdd.w[0] = Rt;
#     Rdd.w[1] = Rs;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_RR_combine_R_R Pu_6_5, Rdd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111101 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rdd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    *[register]:4 (Rdd_4_0_w + 4 * 0) = Rt_12_8;
    *[register]:4 (Rdd_4_0_w + 4 * 1) = Rs_20_16;
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=and(Rs,Rt)
# 11111001-00sssssPP0ttttt0uuddddd
# 
# if (Pu[0]) {
#     Rd = Rs & Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_and_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    if (Pu_6_5[0, 1]) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rs_20_16 & Rt_12_8);
    <endif_Pu_6_5_0_1>
}

# 
# if (!Pu) Rd=and(Rs,Rt)
# 11111001-00sssssPP0ttttt1uuddddd
# 
# if (!Pu[0]) {
#     Rd = Rs & Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_and_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    if ((!Pu_6_5[0, 1])) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rs_20_16 & Rt_12_8);
    <endif_Pu_6_5_0_1>
}

# 
# if (Pu.new) Rd=and(Rs,Rt)
# 11111001-00sssssPP1ttttt0uuddddd
# 
# if (Pu.new[0]) {
#     Rd = Rs & Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_and_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 & Rt_12_8);
    <endif_new_new_0_1>
}

# 
# if (!Pu.new) Rd=and(Rs,Rt)
# 11111001-00sssssPP1ttttt1uuddddd
# 
# if (!Pu.new[0]) {
#     Rd = Rs & Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_and_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 & Rt_12_8);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=or(Rs,Rt)
# 11111001-01sssssPP0ttttt0uuddddd
# 
# if (Pu[0]) {
#     Rd = Rs | Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_or_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    if (Pu_6_5[0, 1]) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rs_20_16 | Rt_12_8);
    <endif_Pu_6_5_0_1>
}

# 
# if (!Pu) Rd=or(Rs,Rt)
# 11111001-01sssssPP0ttttt1uuddddd
# 
# if (!Pu[0]) {
#     Rd = Rs | Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_or_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    if ((!Pu_6_5[0, 1])) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rs_20_16 | Rt_12_8);
    <endif_Pu_6_5_0_1>
}

# 
# if (Pu.new) Rd=or(Rs,Rt)
# 11111001-01sssssPP1ttttt0uuddddd
# 
# if (Pu.new[0]) {
#     Rd = Rs | Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_or_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 | Rt_12_8);
    <endif_new_new_0_1>
}

# 
# if (!Pu.new) Rd=or(Rs,Rt)
# 11111001-01sssssPP1ttttt1uuddddd
# 
# if (!Pu.new[0]) {
#     Rd = Rs | Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_or_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 | Rt_12_8);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=xor(Rs,Rt)
# 11111001-11sssssPP0ttttt0uuddddd
# 
# if (Pu[0]) {
#     Rd = Rs ^ Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_xor_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b11 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    if (Pu_6_5[0, 1]) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rs_20_16 ^ Rt_12_8);
    <endif_Pu_6_5_0_1>
}

# 
# if (!Pu) Rd=xor(Rs,Rt)
# 11111001-11sssssPP0ttttt1uuddddd
# 
# if (!Pu[0]) {
#     Rd = Rs ^ Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_xor_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b11 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    if ((!Pu_6_5[0, 1])) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rs_20_16 ^ Rt_12_8);
    <endif_Pu_6_5_0_1>
}

# 
# if (Pu.new) Rd=xor(Rs,Rt)
# 11111001-11sssssPP1ttttt0uuddddd
# 
# if (Pu.new[0]) {
#     Rd = Rs ^ Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_xor_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b11 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 ^ Rt_12_8);
    <endif_new_new_0_1>
}

# 
# if (!Pu.new) Rd=xor(Rs,Rt)
# 11111001-11sssssPP1ttttt1uuddddd
# 
# if (!Pu.new[0]) {
#     Rd = Rs ^ Rt;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_xor_R_R Pu_6_5, Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11111001 & bits_22_21=0b11 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rs_20_16 ^ Rt_12_8);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=sub(Rt,Rs)
# 111110110-1sssssPP0ttttt0uuddddd
# 
# if (Pu[0]) {
#     Rd = Rt - Rs;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_sub_R_R Pu_6_5, Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_23=0b111110110 & bits_21_21=0b1 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    if (Pu_6_5[0, 1]) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rt_12_8 - Rs_20_16);
    <endif_Pu_6_5_0_1>
}

# 
# if (!Pu) Rd=sub(Rt,Rs)
# 111110110-1sssssPP0ttttt1uuddddd
# 
# if (!Pu[0]) {
#     Rd = Rt - Rs;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_sub_R_R Pu_6_5, Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_23=0b111110110 & bits_21_21=0b1 & Rs_20_16 & bits_13_13=0b0 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    if ((!Pu_6_5[0, 1])) goto <if_Pu_6_5_0_1>;
    goto <endif_Pu_6_5_0_1>;
    <if_Pu_6_5_0_1>
    Rd_4_0 = (Rt_12_8 - Rs_20_16);
    <endif_Pu_6_5_0_1>
}

# 
# if (Pu.new) Rd=sub(Rt,Rs)
# 111110110-1sssssPP1ttttt0uuddddd
# 
# if (Pu.new[0]) {
#     Rd = Rt - Rs;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_sub_R_R Pu_6_5, Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_23=0b111110110 & bits_21_21=0b1 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b0 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rt_12_8 - Rs_20_16);
    <endif_new_new_0_1>
}

# 
# if (!Pu.new) Rd=sub(Rt,Rs)
# 111110110-1sssssPP1ttttt1uuddddd
# 
# if (!Pu.new[0]) {
#     Rd = Rt - Rs;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_sub_R_R Pu_6_5, Rd_4_0, Rt_12_8, Rs_20_16
        is bits_31_23=0b111110110 & bits_21_21=0b1 & Rs_20_16 & bits_13_13=0b1 & Rt_12_8 & bits_7_7=0b1 & Pu_6_5 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_6_5);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = (Rt_12_8 - Rs_20_16);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=sxtb(Rs)
# 01110000101sssssPP1-00uu---ddddd
# 
# if (Pu[0]) {
#     Rd = sxt(8, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_sxtb_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000101 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b00 & Pu_9_8 & Rd_4_0 {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = sext(Rs_20_16:1);
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu.new) Rd=sxtb(Rs)
# 01110000101sssssPP1-01uu---ddddd
# 
# if (Pu.new[0]) {
#     Rd = sxt(8, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_sxtb_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000101 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b01 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = sext(Rs_20_16:1);
    <endif_new_new_0_1>
}

# 
# if (!Pu) Rd=sxtb(Rs)
# 01110000101sssssPP1-10uu---ddddd
# 
# if (!Pu[0]) {
#     Rd = sxt(8, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_sxtb_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000101 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b10 & Pu_9_8 & Rd_4_0 {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = sext(Rs_20_16:1);
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu.new) Rd=sxtb(Rs)
# 01110000101sssssPP1-11uu---ddddd
# 
# if (!Pu.new[0]) {
#     Rd = sxt(8, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_sxtb_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000101 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b11 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = sext(Rs_20_16:1);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=sxth(Rs)
# 01110000111sssssPP1-00uu---ddddd
# 
# if (Pu[0]) {
#     Rd = sxt(16, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_sxth_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000111 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b00 & Pu_9_8 & Rd_4_0 {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = sext(Rs_20_16:2);
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu.new) Rd=sxth(Rs)
# 01110000111sssssPP1-01uu---ddddd
# 
# if (Pu.new[0]) {
#     Rd = sxt(16, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_sxth_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000111 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b01 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = sext(Rs_20_16:2);
    <endif_new_new_0_1>
}

# 
# if (!Pu) Rd=sxth(Rs)
# 01110000111sssssPP1-10uu---ddddd
# 
# if (!Pu[0]) {
#     Rd = sxt(16, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_sxth_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000111 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b10 & Pu_9_8 & Rd_4_0 {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = sext(Rs_20_16:2);
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu.new) Rd=sxth(Rs)
# 01110000111sssssPP1-11uu---ddddd
# 
# if (!Pu.new[0]) {
#     Rd = sxt(16, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_sxth_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000111 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b11 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = sext(Rs_20_16:2);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=#s12
# 011111100uu0iiiiPP0iiiiiiiiddddd
# 
# apply_extension(imm_s);
# if (Pu[0]) {
#     Rd = imm_s;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_S_2 Pu_22_21, Rd_4_0, s12
        is bits_31_23=0b011111100 & Pu_22_21 & bits_20_20=0b0 & s12_19_16 & bits_13_13=0b0 & s12_12_5 & Rd_4_0
            [s12 = (s12_19_16 << 0) | (s12_12_5 << 4);] {
    if (Pu_22_21[0, 1]) goto <if_Pu_22_21_0_1>;
    goto <endif_Pu_22_21_0_1>;
    <if_Pu_22_21_0_1>
    Rd_4_0 = s12;
    <endif_Pu_22_21_0_1>
}

# 
# if (Pu.new) Rd=#s12
# 011111100uu0iiiiPP1iiiiiiiiddddd
# 
# apply_extension(imm_s);
# if (Pu.new[0]) {
#     Rd = imm_s;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_S_2 Pu_22_21, Rd_4_0, s12
        is bits_31_23=0b011111100 & Pu_22_21 & bits_20_20=0b0 & s12_19_16 & bits_13_13=0b1 & s12_12_5 & Rd_4_0
            [s12 = (s12_19_16 << 0) | (s12_12_5 << 4);] {
    local new_new:1 = newSuffix(Pu_22_21);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = s12;
    <endif_new_new_0_1>
}

# 
# if (!Pu) Rd=#s12
# 011111101uu0iiiiPP0iiiiiiiiddddd
# 
# apply_extension(imm_s);
# if (!Pu[0]) {
#     Rd = imm_s;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_S_2 Pu_22_21, Rd_4_0, s12
        is bits_31_23=0b011111101 & Pu_22_21 & bits_20_20=0b0 & s12_19_16 & bits_13_13=0b0 & s12_12_5 & Rd_4_0
            [s12 = (s12_19_16 << 0) | (s12_12_5 << 4);] {
    if ((!Pu_22_21[0, 1])) goto <if_Pu_22_21_0_1>;
    goto <endif_Pu_22_21_0_1>;
    <if_Pu_22_21_0_1>
    Rd_4_0 = s12;
    <endif_Pu_22_21_0_1>
}

# 
# if (!Pu.new) Rd=#s12
# 011111101uu0iiiiPP1iiiiiiiiddddd
# 
# apply_extension(imm_s);
# if (!Pu.new[0]) {
#     Rd = imm_s;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_S_2 Pu_22_21, Rd_4_0, s12
        is bits_31_23=0b011111101 & Pu_22_21 & bits_20_20=0b0 & s12_19_16 & bits_13_13=0b1 & s12_12_5 & Rd_4_0
            [s12 = (s12_19_16 << 0) | (s12_12_5 << 4);] {
    local new_new:1 = newSuffix(Pu_22_21);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = s12;
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=zxtb(Rs)
# 01110000100sssssPP1-00uu---ddddd
# 
# if (Pu[0]) {
#     Rd = zxt(8, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_zxtb_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000100 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b00 & Pu_9_8 & Rd_4_0 {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = zext(Rs_20_16:1);
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu.new) Rd=zxtb(Rs)
# 01110000100sssssPP1-01uu---ddddd
# 
# if (Pu.new[0]) {
#     Rd = zxt(8, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_zxtb_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000100 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b01 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = zext(Rs_20_16:1);
    <endif_new_new_0_1>
}

# 
# if (!Pu) Rd=zxtb(Rs)
# 01110000100sssssPP1-10uu---ddddd
# 
# if (!Pu[0]) {
#     Rd = zxt(8, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_zxtb_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000100 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b10 & Pu_9_8 & Rd_4_0 {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = zext(Rs_20_16:1);
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu.new) Rd=zxtb(Rs)
# 01110000100sssssPP1-11uu---ddddd
# 
# if (!Pu.new[0]) {
#     Rd = zxt(8, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_zxtb_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000100 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b11 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = zext(Rs_20_16:1);
    <endif_new_new_0_1>
}

# 
# if (Pu) Rd=zxth(Rs)
# 01110000110sssssPP1-00uu---ddddd
# 
# if (Pu[0]) {
#     Rd = zxt(16, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_zxth_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000110 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b00 & Pu_9_8 & Rd_4_0 {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = zext(Rs_20_16:2);
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu.new) Rd=zxth(Rs)
# 01110000110sssssPP1-01uu---ddddd
# 
# if (Pu.new[0]) {
#     Rd = zxt(16, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_zxth_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000110 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b01 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = zext(Rs_20_16:2);
    <endif_new_new_0_1>
}

# 
# if (!Pu) Rd=zxth(Rs)
# 01110000110sssssPP1-10uu---ddddd
# 
# if (!Pu[0]) {
#     Rd = zxt(16, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_zxth_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000110 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b10 & Pu_9_8 & Rd_4_0 {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    Rd_4_0 = zext(Rs_20_16:2);
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu.new) Rd=zxth(Rs)
# 01110000110sssssPP1-11uu---ddddd
# 
# if (!Pu.new[0]) {
#     Rd = zxt(16, 32, Rs);
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_zxth_R Pu_9_8, Rd_4_0, Rs_20_16
        is bits_31_21=0b01110000110 & Rs_20_16 & bits_13_13=0b1 & bits_11_10=0b11 & Pu_9_8 & Rd_4_0 {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = zext(Rs_20_16:2);
    <endif_new_new_0_1>
}

# 
# Pd=cmp.eq(Rs,#s10)
# 0111010100isssssPPiiiiiiiii000dd
# 
# apply_extension(imm_s);
# Pd = Rs == imm_s ? 0xff : 0x00;
# 
:Q6_P_cmp_eq_R_S_0 Pd_1_0, Rs_20_16, s10
        is bits_31_22=0b0111010100 & s10_21_21 & Rs_20_16 & s10_13_5 & bits_4_2=0b000 & Pd_1_0
            [s10 = (s10_21_21 << 0) | (s10_13_5 << 1);] {
    local res_Rs_20_16_s10:4;
    if ((Rs_20_16 == s10)) goto <if_Rs_20_16_s10>;
    res_Rs_20_16_s10 = 0x00;
    goto <endif_Rs_20_16_s10>;
    <if_Rs_20_16_s10>
    res_Rs_20_16_s10 = 0xff;
    <endif_Rs_20_16_s10>
    Pd_1_0 = res_Rs_20_16_s10:1;
}

# 
# Pd=!cmp.eq(Rs,#s10)
# 0111010100isssssPPiiiiiiiii100dd
# 
# apply_extension(imm_s);
# Pd = Rs != imm_s ? 0xff : 0x00;
# 
:Q6_P_notcmp_eq_R_S_0 Pd_1_0, Rs_20_16, s10
        is bits_31_22=0b0111010100 & s10_21_21 & Rs_20_16 & s10_13_5 & bits_4_2=0b100 & Pd_1_0
            [s10 = (s10_21_21 << 0) | (s10_13_5 << 1);] {
    local res_Rs_20_16_s10:4;
    if ((Rs_20_16 != s10)) goto <if_Rs_20_16_s10>;
    res_Rs_20_16_s10 = 0x00;
    goto <endif_Rs_20_16_s10>;
    <if_Rs_20_16_s10>
    res_Rs_20_16_s10 = 0xff;
    <endif_Rs_20_16_s10>
    Pd_1_0 = res_Rs_20_16_s10:1;
}

# 
# Pd=cmp.gt(Rs,#s10)
# 0111010101isssssPPiiiiiiiii000dd
# 
# apply_extension(imm_s);
# Pd = Rs > imm_s ? 0xff : 0x00;
# 
:Q6_P_cmp_gt_R_S_0 Pd_1_0, Rs_20_16, s10
        is bits_31_22=0b0111010101 & s10_21_21 & Rs_20_16 & s10_13_5 & bits_4_2=0b000 & Pd_1_0
            [s10 = (s10_21_21 << 0) | (s10_13_5 << 1);] {
    local res_Rs_20_16_s_s10:4;
    if ((Rs_20_16 s> s10)) goto <if_Rs_20_16_s_s10>;
    res_Rs_20_16_s_s10 = 0x00;
    goto <endif_Rs_20_16_s_s10>;
    <if_Rs_20_16_s_s10>
    res_Rs_20_16_s_s10 = 0xff;
    <endif_Rs_20_16_s_s10>
    Pd_1_0 = res_Rs_20_16_s_s10:1;
}

# 
# Pd=!cmp.gt(Rs,#s10)
# 0111010101isssssPPiiiiiiiii100dd
# 
# apply_extension(imm_s);
# Pd = Rs <= imm_s ? 0xff : 0x00;
# 
:Q6_P_notcmp_gt_R_S_0 Pd_1_0, Rs_20_16, s10
        is bits_31_22=0b0111010101 & s10_21_21 & Rs_20_16 & s10_13_5 & bits_4_2=0b100 & Pd_1_0
            [s10 = (s10_21_21 << 0) | (s10_13_5 << 1);] {
    local res_Rs_20_16_s_s10:4;
    if ((Rs_20_16 s<= s10)) goto <if_Rs_20_16_s_s10>;
    res_Rs_20_16_s_s10 = 0x00;
    goto <endif_Rs_20_16_s_s10>;
    <if_Rs_20_16_s_s10>
    res_Rs_20_16_s_s10 = 0xff;
    <endif_Rs_20_16_s_s10>
    Pd_1_0 = res_Rs_20_16_s_s10:1;
}

# 
# Pd=cmp.gtu(Rs,#u9)
# 01110101100sssssPPiiiiiiiii000dd
# 
# apply_extension(imm_u);
# Pd = Rs.uw[0] > imm_u ? 0xff : 0x00;
# 
:Q6_P_cmp_gtu_R_U Pd_1_0, Rs_20_16, u9
        is bits_31_21=0b01110101100 & Rs_20_16 & u9_13_5 & bits_4_2=0b000 & Pd_1_0
            [u9 = (u9_13_5 << 0);] {
    local Rs_20_16_uw:4 = &Rs_20_16;
    local res_register_4_Rs_20_16_uw_4_0_u9:4;
    if ((*[register]:4 (Rs_20_16_uw + 4 * 0) > u9)) goto <if_register_4_Rs_20_16_uw_4_0_u9>;
    res_register_4_Rs_20_16_uw_4_0_u9 = 0x00;
    goto <endif_register_4_Rs_20_16_uw_4_0_u9>;
    <if_register_4_Rs_20_16_uw_4_0_u9>
    res_register_4_Rs_20_16_uw_4_0_u9 = 0xff;
    <endif_register_4_Rs_20_16_uw_4_0_u9>
    Pd_1_0 = res_register_4_Rs_20_16_uw_4_0_u9:1;
}

# 
# Pd=!cmp.gtu(Rs,#u9)
# 01110101100sssssPPiiiiiiiii100dd
# 
# apply_extension(imm_u);
# Pd = Rs.uw[0] <= imm_u ? 0xff : 0x00;
# 
:Q6_P_notcmp_gtu_R_U Pd_1_0, Rs_20_16, u9
        is bits_31_21=0b01110101100 & Rs_20_16 & u9_13_5 & bits_4_2=0b100 & Pd_1_0
            [u9 = (u9_13_5 << 0);] {
    local Rs_20_16_uw:4 = &Rs_20_16;
    local res_register_4_Rs_20_16_uw_4_0_u9:4;
    if ((*[register]:4 (Rs_20_16_uw + 4 * 0) <= u9)) goto <if_register_4_Rs_20_16_uw_4_0_u9>;
    res_register_4_Rs_20_16_uw_4_0_u9 = 0x00;
    goto <endif_register_4_Rs_20_16_uw_4_0_u9>;
    <if_register_4_Rs_20_16_uw_4_0_u9>
    res_register_4_Rs_20_16_uw_4_0_u9 = 0xff;
    <endif_register_4_Rs_20_16_uw_4_0_u9>
    Pd_1_0 = res_register_4_Rs_20_16_uw_4_0_u9:1;
}

# 
# Pd=cmp.eq(Rs,Rt)
# 11110010-00sssssPP-ttttt---000dd
# 
# Pd = Rs == Rt ? 0xff : 0x00;
# 
:Q6_P_cmp_eq_R_R Pd_1_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11110010 & bits_22_21=0b00 & Rs_20_16 & Rt_12_8 & bits_4_2=0b000 & Pd_1_0 {
    local res_Rs_20_16_Rt_12_8:4;
    if ((Rs_20_16 == Rt_12_8)) goto <if_Rs_20_16_Rt_12_8>;
    res_Rs_20_16_Rt_12_8 = 0x00;
    goto <endif_Rs_20_16_Rt_12_8>;
    <if_Rs_20_16_Rt_12_8>
    res_Rs_20_16_Rt_12_8 = 0xff;
    <endif_Rs_20_16_Rt_12_8>
    Pd_1_0 = res_Rs_20_16_Rt_12_8:1;
}

# 
# Pd=!cmp.eq(Rs,Rt)
# 11110010-00sssssPP-ttttt---100dd
# 
# Pd = Rs != Rt ? 0xff : 0x00;
# 
:Q6_P_notcmp_eq_R_R Pd_1_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11110010 & bits_22_21=0b00 & Rs_20_16 & Rt_12_8 & bits_4_2=0b100 & Pd_1_0 {
    local res_Rs_20_16_Rt_12_8:4;
    if ((Rs_20_16 != Rt_12_8)) goto <if_Rs_20_16_Rt_12_8>;
    res_Rs_20_16_Rt_12_8 = 0x00;
    goto <endif_Rs_20_16_Rt_12_8>;
    <if_Rs_20_16_Rt_12_8>
    res_Rs_20_16_Rt_12_8 = 0xff;
    <endif_Rs_20_16_Rt_12_8>
    Pd_1_0 = res_Rs_20_16_Rt_12_8:1;
}

# 
# Pd=cmp.gt(Rs,Rt)
# 11110010-10sssssPP-ttttt---000dd
# 
# Pd = Rs > Rt ? 0xff : 0x00;
# 
:Q6_P_cmp_gt_R_R Pd_1_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11110010 & bits_22_21=0b10 & Rs_20_16 & Rt_12_8 & bits_4_2=0b000 & Pd_1_0 {
    local res_Rs_20_16_s_Rt_12_8:4;
    if ((Rs_20_16 s> Rt_12_8)) goto <if_Rs_20_16_s_Rt_12_8>;
    res_Rs_20_16_s_Rt_12_8 = 0x00;
    goto <endif_Rs_20_16_s_Rt_12_8>;
    <if_Rs_20_16_s_Rt_12_8>
    res_Rs_20_16_s_Rt_12_8 = 0xff;
    <endif_Rs_20_16_s_Rt_12_8>
    Pd_1_0 = res_Rs_20_16_s_Rt_12_8:1;
}

# 
# Pd=!cmp.gt(Rs,Rt)
# 11110010-10sssssPP-ttttt---100dd
# 
# Pd = Rs <= Rt ? 0xff : 0x00;
# 
:Q6_P_notcmp_gt_R_R Pd_1_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11110010 & bits_22_21=0b10 & Rs_20_16 & Rt_12_8 & bits_4_2=0b100 & Pd_1_0 {
    local res_Rs_20_16_s_Rt_12_8:4;
    if ((Rs_20_16 s<= Rt_12_8)) goto <if_Rs_20_16_s_Rt_12_8>;
    res_Rs_20_16_s_Rt_12_8 = 0x00;
    goto <endif_Rs_20_16_s_Rt_12_8>;
    <if_Rs_20_16_s_Rt_12_8>
    res_Rs_20_16_s_Rt_12_8 = 0xff;
    <endif_Rs_20_16_s_Rt_12_8>
    Pd_1_0 = res_Rs_20_16_s_Rt_12_8:1;
}

# 
# Pd=cmp.gtu(Rs,Rt)
# 11110010-11sssssPP-ttttt---000dd
# 
# Pd = Rs.uw[0] > Rt.uw[0] ? 0xff : 0x00;
# 
:Q6_P_cmp_gtu_R_R Pd_1_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11110010 & bits_22_21=0b11 & Rs_20_16 & Rt_12_8 & bits_4_2=0b000 & Pd_1_0 {
    local Rs_20_16_uw:4 = &Rs_20_16;
    local Rt_12_8_uw:4 = &Rt_12_8;
    local res_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0:4;
    if ((*[register]:4 (Rs_20_16_uw + 4 * 0) > *[register]:4 (Rt_12_8_uw + 4 * 0))) goto <if_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0>;
    res_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0 = 0x00;
    goto <endif_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0>;
    <if_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0>
    res_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0 = 0xff;
    <endif_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0>
    Pd_1_0 = res_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0:1;
}

# 
# Pd=!cmp.gtu(Rs,Rt)
# 11110010-11sssssPP-ttttt---100dd
# 
# Pd = Rs.uw[0] <= Rt.uw[0] ? 0xff : 0x00;
# 
:Q6_P_notcmp_gtu_R_R Pd_1_0, Rs_20_16, Rt_12_8
        is bits_31_24=0b11110010 & bits_22_21=0b11 & Rs_20_16 & Rt_12_8 & bits_4_2=0b100 & Pd_1_0 {
    local Rs_20_16_uw:4 = &Rs_20_16;
    local Rt_12_8_uw:4 = &Rt_12_8;
    local res_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0:4;
    if ((*[register]:4 (Rs_20_16_uw + 4 * 0) <= *[register]:4 (Rt_12_8_uw + 4 * 0))) goto <if_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0>;
    res_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0 = 0x00;
    goto <endif_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0>;
    <if_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0>
    res_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0 = 0xff;
    <endif_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0>
    Pd_1_0 = res_register_4_Rs_20_16_uw_4_0_register_4_Rt_12_8_uw_4_0:1;
}

# 
# Rd=cmp.eq(Rs,#s8)
# 01110011-10sssssPP1iiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rd = (Rs == imm_s);
# 
:Q6_R_cmp_eq_R_S Rd_4_0, Rs_20_16, s8
        is bits_31_24=0b01110011 & bits_22_21=0b10 & Rs_20_16 & bits_13_13=0b1 & s8_12_5 & Rd_4_0
            [s8 = (s8_12_5 << 0);] {
    Rd_4_0 = zext((Rs_20_16 == s8));
}

# 
# Rd=!cmp.eq(Rs,#s8)
# 01110011-11sssssPP1iiiiiiiiddddd
# 
# apply_extension(imm_s);
# Rd = (Rs != imm_s);
# 
:Q6_R_notcmp_eq_R_S Rd_4_0, Rs_20_16, s8
        is bits_31_24=0b01110011 & bits_22_21=0b11 & Rs_20_16 & bits_13_13=0b1 & s8_12_5 & Rd_4_0
            [s8 = (s8_12_5 << 0);] {
    Rd_4_0 = zext((Rs_20_16 != s8));
}

# 
# Rd=cmp.eq(Rs,Rt)
# 11110011010sssssPP-ttttt---ddddd
# 
# Rd = (Rs == Rt);
# 
:Q6_R_cmp_eq_R_R Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110011010 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = zext((Rs_20_16 == Rt_12_8));
}

# 
# Rd=!cmp.eq(Rs,Rt)
# 11110011011sssssPP-ttttt---ddddd
# 
# Rd = (Rs != Rt);
# 
:Q6_R_notcmp_eq_R_R Rd_4_0, Rs_20_16, Rt_12_8
        is bits_31_21=0b11110011011 & Rs_20_16 & Rt_12_8 & Rd_4_0 {
    Rd_4_0 = zext((Rs_20_16 != Rt_12_8));
}

# 
# Pd=fastcorner9(Ps,Pt)
# 011010110000--ssPP1---tt1--1--dd
# 
# PREDUSE_TIMING;
# tmp.h[0] = (Ps << 8) | Pt;
# tmp.h[1] = (Ps << 8) | Pt;
# for (i = 1; i < 9; i++) {
#     tmp &= tmp >> 1;
# }
# 
# Pd = tmp != 0 ? 0xff : 0x00;
# 
:Q6_P_fastcorner9_P_P Pd_1_0, Ps_17_16, Pt_9_8
        is bits_31_20=0b011010110000 & Ps_17_16 & bits_13_13=0b1 & Pt_9_8 & bits_7_7=0b1 & bits_4_4=0b1 & Pd_1_0 {
    local tmp:4;
    local tmp_h:4 = &tmp;
    local res_tmp_0:4;
    *[ram]:2 (tmp_h + 2 * 0) = zext(((Ps_17_16 << 8) | Pt_9_8));
    *[ram]:2 (tmp_h + 2 * 1) = zext(((Ps_17_16 << 8) | Pt_9_8));
    local i:4 = 1;
    <for_i>
    tmp = (tmp & (tmp >> 1));
    i = i + 1;
    if (i < 9) goto <for_i>;
    if ((tmp != 0)) goto <if_tmp_0>;
    res_tmp_0 = 0x00;
    goto <endif_tmp_0>;
    <if_tmp_0>
    res_tmp_0 = 0xff;
    <endif_tmp_0>
    Pd_1_0 = res_tmp_0:1;
}

# 
# Pd=!fastcorner9(Ps,Pt)
# 011010110001--ssPP1---tt1--1--dd
# 
# PREDUSE_TIMING;
# tmp.h[0] = (Ps << 8) | Pt;
# tmp.h[1] = (Ps << 8) | Pt;
# for (i = 1; i < 9; i++) {
#     tmp &= tmp >> 1;
# }
# 
# Pd = tmp == 0 ? 0xff : 0x00;
# 
:Q6_P_notfastcorner9_P_P Pd_1_0, Ps_17_16, Pt_9_8
        is bits_31_20=0b011010110001 & Ps_17_16 & bits_13_13=0b1 & Pt_9_8 & bits_7_7=0b1 & bits_4_4=0b1 & Pd_1_0 {
    local tmp:4;
    local tmp_h:4 = &tmp;
    local res_tmp_0:4;
    *[ram]:2 (tmp_h + 2 * 0) = zext(((Ps_17_16 << 8) | Pt_9_8));
    *[ram]:2 (tmp_h + 2 * 1) = zext(((Ps_17_16 << 8) | Pt_9_8));
    local i:4 = 1;
    <for_i>
    tmp = (tmp & (tmp >> 1));
    i = i + 1;
    if (i < 9) goto <for_i>;
    if ((tmp == 0)) goto <if_tmp_0>;
    res_tmp_0 = 0x00;
    goto <endif_tmp_0>;
    <if_tmp_0>
    res_tmp_0 = 0xff;
    <endif_tmp_0>
    Pd_1_0 = res_tmp_0:1;
}

# 
# Pd=any8(Ps)
# 011010111000--ssPP0-----------dd
# 
# PREDUSE_TIMING;
# Ps ? (Pd = 0xff) : (Pd = 0x00);
# 
:Q6_P_any8_P Pd_1_0, Ps_17_16
        is bits_31_20=0b011010111000 & Ps_17_16 & bits_13_13=0b0 & Pd_1_0 {
    if ((Ps_17_16 != 0)) goto <if_Ps_17_16_0>;
    Pd_1_0 = 0x00;
    goto <endif_Ps_17_16_0>;
    <if_Ps_17_16_0>
    Pd_1_0 = 0xff;
    <endif_Ps_17_16_0>
}

# 
# Pd=all8(Ps)
# 011010111010--ssPP0-----------dd
# 
# PREDUSE_TIMING;
# (Ps == 0xff) ? (Pd = 0xff) : (Pd = 0x00);
# 
:Q6_P_all8_P Pd_1_0, Ps_17_16
        is bits_31_20=0b011010111010 & Ps_17_16 & bits_13_13=0b0 & Pd_1_0 {
    if ((Ps_17_16 == 0xff)) goto <if_Ps_17_16_0xff>;
    Pd_1_0 = 0x00;
    goto <endif_Ps_17_16_0xff>;
    <if_Ps_17_16_0xff>
    Pd_1_0 = 0xff;
    <endif_Ps_17_16_0xff>
}

# 
# loop0(#r7:2,Rs)
# 01100000000sssssPP-iiiii---ii---
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA0 = PC + imm_r;
# LC0 = Rs;
# USR.LPCFG = 0;
# 
:Q6_loop0_R_R r7, Rs_20_16
        is bits_31_21=0b01100000000 & Rs_20_16 & r7_12_8 & r7_4_3
            [r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA0) = ($(PC) + r7);
    $(LC0) = Rs_20_16;
    $(LPCFG) = 0;
}

# 
# loop1(#r7:2,Rs)
# 01100000001sssssPP-iiiii---ii---
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA1 = PC + imm_r;
# LC1 = Rs;
# 
:Q6_loop1_R_R r7, Rs_20_16
        is bits_31_21=0b01100000001 & Rs_20_16 & r7_12_8 & r7_4_3
            [r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA1) = ($(PC) + r7);
    $(LC1) = Rs_20_16;
}

# 
# loop0(#r7:2,#U10)
# 01101001000IIIIIPP-iiiiiIIIii-II
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA0 = PC + imm_r;
# LC0 = imm_U;
# USR.LPCFG = 0;
# 
:Q6_loop0_R_U_0 r7, U10
        is bits_31_21=0b01101001000 & U10_20_16 & r7_12_8 & U10_7_5 & r7_4_3 & U10_1_0
            [U10 = (U10_20_16 << 0) | (U10_7_5 << 5) | (U10_1_0 << 8); r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA0) = ($(PC) + r7);
    $(LC0) = U10;
    $(LPCFG) = 0;
}

# 
# loop1(#r7:2,#U10)
# 01101001001IIIIIPP-iiiiiIIIii-II
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA1 = PC + imm_r;
# LC1 = imm_U;
# 
:Q6_loop1_R_U_0 r7, U10
        is bits_31_21=0b01101001001 & U10_20_16 & r7_12_8 & U10_7_5 & r7_4_3 & U10_1_0
            [U10 = (U10_20_16 << 0) | (U10_7_5 << 5) | (U10_1_0 << 8); r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA1) = ($(PC) + r7);
    $(LC1) = U10;
}

# 
# Rd=add(pc,#u6)
# 0110101001001001PP-iiiiii--ddddd
# 
# Rd = PC + apply_extension(imm_u);
# 
:Q6_R_add_pc_U Rd_4_0, u6
        is bits_31_16=0b0110101001001001 & u6_12_7 & Rd_4_0
            [u6 = (u6_12_7 << 0);] {
    Rd_4_0 = ($(PC) + u6);
}

# 
# p3=sp1loop0(#r7:2,Rs)
# 01100000101sssssPP-iiiii---ii---
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA0 = PC + imm_r;
# LC0 = Rs;
# USR.LPCFG = 1;
# P3 = 0;
# 
:Q6_p3_sp1loop0_R_R r7, Rs_20_16
        is bits_31_21=0b01100000101 & Rs_20_16 & r7_12_8 & r7_4_3
            [r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA0) = ($(PC) + r7);
    $(LC0) = Rs_20_16;
    $(LPCFG) = 1;
    P3 = 0;
}

# 
# p3=sp2loop0(#r7:2,Rs)
# 01100000110sssssPP-iiiii---ii---
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA0 = PC + imm_r;
# LC0 = Rs;
# USR.LPCFG = 2;
# P3 = 0;
# 
:Q6_p3_sp2loop0_R_R r7, Rs_20_16
        is bits_31_21=0b01100000110 & Rs_20_16 & r7_12_8 & r7_4_3
            [r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA0) = ($(PC) + r7);
    $(LC0) = Rs_20_16;
    $(LPCFG) = 2;
    P3 = 0;
}

# 
# p3=sp3loop0(#r7:2,Rs)
# 01100000111sssssPP-iiiii---ii---
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA0 = PC + imm_r;
# LC0 = Rs;
# USR.LPCFG = 3;
# P3 = 0;
# 
:Q6_p3_sp3loop0_R_R r7, Rs_20_16
        is bits_31_21=0b01100000111 & Rs_20_16 & r7_12_8 & r7_4_3
            [r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA0) = ($(PC) + r7);
    $(LC0) = Rs_20_16;
    $(LPCFG) = 3;
    P3 = 0;
}

# 
# p3=sp1loop0(#r7:2,#U10)
# 01101001101IIIIIPP-iiiiiIIIii-II
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA0 = PC + imm_r;
# LC0 = imm_U;
# USR.LPCFG = 1;
# P3 = 0;
# 
:Q6_p3_sp1loop0_R_U_0 r7, U10
        is bits_31_21=0b01101001101 & U10_20_16 & r7_12_8 & U10_7_5 & r7_4_3 & U10_1_0
            [U10 = (U10_20_16 << 0) | (U10_7_5 << 5) | (U10_1_0 << 8); r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA0) = ($(PC) + r7);
    $(LC0) = U10;
    $(LPCFG) = 1;
    P3 = 0;
}

# 
# p3=sp2loop0(#r7:2,#U10)
# 01101001110IIIIIPP-iiiiiIIIii-II
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA0 = PC + imm_r;
# LC0 = imm_U;
# USR.LPCFG = 2;
# P3 = 0;
# 
:Q6_p3_sp2loop0_R_U_0 r7, U10
        is bits_31_21=0b01101001110 & U10_20_16 & r7_12_8 & U10_7_5 & r7_4_3 & U10_1_0
            [U10 = (U10_20_16 << 0) | (U10_7_5 << 5) | (U10_1_0 << 8); r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA0) = ($(PC) + r7);
    $(LC0) = U10;
    $(LPCFG) = 2;
    P3 = 0;
}

# 
# p3=sp3loop0(#r7:2,#U10)
# 01101001111IIIIIPP-iiiiiIIIii-II
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# SA0 = PC + imm_r;
# LC0 = imm_U;
# USR.LPCFG = 3;
# P3 = 0;
# 
:Q6_p3_sp3loop0_R_U_0 r7, U10
        is bits_31_21=0b01101001111 & U10_20_16 & r7_12_8 & U10_7_5 & r7_4_3 & U10_1_0
            [U10 = (U10_20_16 << 0) | (U10_7_5 << 5) | (U10_1_0 << 8); r7 = (r7_12_8 << 2) | (r7_4_3 << 7);] {
    local cst_0x3:4 = 0x3;
    r7 = (r7 & (~cst_0x3));
    $(SA0) = ($(PC) + r7);
    $(LC0) = U10;
    $(LPCFG) = 3;
    P3 = 0;
}

# 
# Pd=and(Pt,Ps)
# 011010110000--ssPP0---tt------dd
# 
# PREDUSE_TIMING;
# Pd = Pt & Ps;
# 
:Q6_P_and_P_P Pd_1_0, Pt_9_8, Ps_17_16
        is bits_31_20=0b011010110000 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pd_1_0 {
    Pd_1_0 = (Pt_9_8 & Ps_17_16);
}

# 
# Pd=and(Ps,and(Pt,Pu))
# 011010110001--ssPP0---ttuu----dd
# 
# PREDUSE_TIMING;
# Pd = Ps & Pt & Pu;
# 
:Q6_P_and_P_and_P_P Pd_1_0, Ps_17_16, Pt_9_8, Pu_7_6
        is bits_31_20=0b011010110001 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pu_7_6 & Pd_1_0 {
    Pd_1_0 = ((Ps_17_16 & Pt_9_8) & Pu_7_6);
}

# 
# Pd=or(Pt,Ps)
# 011010110010--ssPP0---tt------dd
# 
# PREDUSE_TIMING;
# Pd = Pt | Ps;
# 
:Q6_P_or_P_P Pd_1_0, Pt_9_8, Ps_17_16
        is bits_31_20=0b011010110010 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pd_1_0 {
    Pd_1_0 = (Pt_9_8 | Ps_17_16);
}

# 
# Pd=and(Ps,or(Pt,Pu))
# 011010110011--ssPP0---ttuu----dd
# 
# PREDUSE_TIMING;
# Pd = Ps & (Pt | Pu);
# 
:Q6_P_and_P_or_P_P Pd_1_0, Ps_17_16, Pt_9_8, Pu_7_6
        is bits_31_20=0b011010110011 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pu_7_6 & Pd_1_0 {
    Pd_1_0 = (Ps_17_16 & (Pt_9_8 | Pu_7_6));
}

# 
# Pd=xor(Ps,Pt)
# 011010110100--ssPP0---tt------dd
# 
# PREDUSE_TIMING;
# Pd = Ps ^ Pt;
# 
:Q6_P_xor_P_P Pd_1_0, Ps_17_16, Pt_9_8
        is bits_31_20=0b011010110100 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pd_1_0 {
    Pd_1_0 = (Ps_17_16 ^ Pt_9_8);
}

# 
# Pd=or(Ps,and(Pt,Pu))
# 011010110101--ssPP0---ttuu----dd
# 
# PREDUSE_TIMING;
# Pd = Ps | (Pt & Pu);
# 
:Q6_P_or_P_and_P_P Pd_1_0, Ps_17_16, Pt_9_8, Pu_7_6
        is bits_31_20=0b011010110101 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pu_7_6 & Pd_1_0 {
    Pd_1_0 = (Ps_17_16 | (Pt_9_8 & Pu_7_6));
}

# 
# Pd=and(Pt,!Ps)
# 011010110110--ssPP0---tt------dd
# 
# PREDUSE_TIMING;
# Pd = Pt & (~Ps);
# 
:Q6_P_and_P_not_P Pd_1_0, Pt_9_8, Ps_17_16
        is bits_31_20=0b011010110110 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pd_1_0 {
    Pd_1_0 = (Pt_9_8 & (~Ps_17_16));
}

# 
# Pd=or(Ps,or(Pt,Pu))
# 011010110111--ssPP0---ttuu----dd
# 
# PREDUSE_TIMING;
# Pd = Ps | Pt | Pu;
# 
:Q6_P_or_P_or_P_P Pd_1_0, Ps_17_16, Pt_9_8, Pu_7_6
        is bits_31_20=0b011010110111 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pu_7_6 & Pd_1_0 {
    Pd_1_0 = ((Ps_17_16 | Pt_9_8) | Pu_7_6);
}

# 
# Pd=and(Ps,and(Pt,!Pu))
# 011010111001--ssPP0---ttuu----dd
# 
# PREDUSE_TIMING;
# Pd = Ps & Pt & (~Pu);
# 
:Q6_P_and_P_and_P_not_P Pd_1_0, Ps_17_16, Pt_9_8, Pu_7_6
        is bits_31_20=0b011010111001 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pu_7_6 & Pd_1_0 {
    Pd_1_0 = ((Ps_17_16 & Pt_9_8) & (~Pu_7_6));
}

# 
# Pd=and(Ps,or(Pt,!Pu))
# 011010111011--ssPP0---ttuu----dd
# 
# PREDUSE_TIMING;
# Pd = Ps & (Pt | (~Pu));
# 
:Q6_P_and_P_or_P_not_P Pd_1_0, Ps_17_16, Pt_9_8, Pu_7_6
        is bits_31_20=0b011010111011 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pu_7_6 & Pd_1_0 {
    Pd_1_0 = (Ps_17_16 & (Pt_9_8 | (~Pu_7_6)));
}

# 
# Pd=not(Ps)
# 011010111100--ssPP0-----------dd
# 
# PREDUSE_TIMING;
# Pd = ~Ps;
# 
:Q6_P_not_P Pd_1_0, Ps_17_16
        is bits_31_20=0b011010111100 & Ps_17_16 & bits_13_13=0b0 & Pd_1_0 {
    Pd_1_0 = (~Ps_17_16);
}

# 
# Pd=or(Ps,and(Pt,!Pu))
# 011010111101--ssPP0---ttuu----dd
# 
# PREDUSE_TIMING;
# Pd = Ps | (Pt & (~Pu));
# 
:Q6_P_or_P_and_P_not_P Pd_1_0, Ps_17_16, Pt_9_8, Pu_7_6
        is bits_31_20=0b011010111101 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pu_7_6 & Pd_1_0 {
    Pd_1_0 = (Ps_17_16 | (Pt_9_8 & (~Pu_7_6)));
}

# 
# Pd=or(Pt,!Ps)
# 011010111110--ssPP0---tt------dd
# 
# PREDUSE_TIMING;
# Pd = Pt | (~Ps);
# 
:Q6_P_or_P_not_P Pd_1_0, Pt_9_8, Ps_17_16
        is bits_31_20=0b011010111110 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pd_1_0 {
    Pd_1_0 = (Pt_9_8 | (~Ps_17_16));
}

# 
# Pd=or(Ps,or(Pt,!Pu))
# 011010111111--ssPP0---ttuu----dd
# 
# PREDUSE_TIMING;
# Pd = Ps | Pt | (~Pu);
# 
:Q6_P_or_P_or_P_not_P Pd_1_0, Ps_17_16, Pt_9_8, Pu_7_6
        is bits_31_20=0b011010111111 & Ps_17_16 & bits_13_13=0b0 & Pt_9_8 & Pu_7_6 & Pd_1_0 {
    Pd_1_0 = ((Ps_17_16 | Pt_9_8) | (~Pu_7_6));
}

# 
# Cd=Rs
# 01100010001sssssPP---------ddddd
# 
# Cd = Rs;
# 
:Q6_C_R Cd_4_0, Rs_20_16
        is bits_31_21=0b01100010001 & Rs_20_16 & Cd_4_0 {
    Cd_4_0 = Rs_20_16;
}

# 
# Cdd=Rss
# 01100011001sssssPP---------ddddd
# 
# Cdd = Rss;
# 
:Q6_CC_RR Cdd_4_0, Rss_20_16
        is bits_31_21=0b01100011001 & Rss_20_16 & Cdd_4_0 {
    Cdd_4_0 = Rss_20_16;
}

# 
# Rdd=Css
# 01101000000sssssPP---------ddddd
# 
# Rdd = Css;
# 
:Q6_RR_CC Rdd_4_0, Css_20_16
        is bits_31_21=0b01101000000 & Css_20_16 & Rdd_4_0 {
    Rdd_4_0 = Css_20_16;
}

# 
# Rd=Cs
# 01101010000sssssPP---------ddddd
# 
# Rd = Cs;
# 
:Q6_R_C Rd_4_0, Cs_20_16
        is bits_31_21=0b01101010000 & Cs_20_16 & Rd_4_0 {
    Rd_4_0 = Cs_20_16;
}

# 
# callr Rs
# 01010000101sssssPP--------------
# 
# LR = NPC;
# PC = Rs;
# 
:Q6_callr_R Rs_20_16
        is bits_31_21=0b01010000101 & Rs_20_16 {
    $(LR) = nextPacket();
    $(PC) = Rs_20_16;
}

# 
# if (Pu) callr Rs
# 01010001000sssssPP----uu--------
# 
# if (Pu[0]) {
#     LR = NPC;
#     PC = Rs;
# }
# 
:Q6_if_P_callr_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010001000 & Rs_20_16 & Pu_9_8 {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    $(LR) = nextPacket();
    $(PC) = Rs_20_16;
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu) callr Rs
# 01010001001sssssPP----uu--------
# 
# if (!Pu[0]) {
#     LR = NPC;
#     PC = Rs;
# }
# 
:Q6_if_not_P_callr_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010001001 & Rs_20_16 & Pu_9_8 {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    $(LR) = nextPacket();
    $(PC) = Rs_20_16;
    <endif_Pu_9_8_0_1>
}

# 
# hintjr(Rs)
# 01010010101sssssPP--------------
# 
# 
# 
:Q6_hintjr_R Rs_20_16
        is bits_31_21=0b01010010101 & Rs_20_16 {
}

# 
# jumpr Rs
# 01010010100sssssPP--------------
# 
# PC = Rs;
# 
:Q6_jumpr_R Rs_20_16
        is bits_31_21=0b01010010100 & Rs_20_16 {
    $(PC) = Rs_20_16;
}

# 
# if (Pu) jumpr:nt Rs
# 01010011010sssssPP-00-uu--------
# 
# if (Pu[0]) {
#     PC = Rs;
# }
# 
:Q6_if_P_jumpr_nt_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010011010 & Rs_20_16 & bits_12_11=0b00 & Pu_9_8 {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    $(PC) = Rs_20_16;
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu.new) jumpr:nt Rs
# 01010011010sssssPP-01-uu--------
# 
# if (Pu.new[0]) {
#     PC = Rs;
# }
# 
:Q6_if_P_new_jumpr_nt_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010011010 & Rs_20_16 & bits_12_11=0b01 & Pu_9_8 {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    $(PC) = Rs_20_16;
    <endif_new_new_0_1>
}

# 
# if (Pu) jumpr:t Rs
# 01010011010sssssPP-10-uu--------
# 
# if (Pu[0]) {
#     PC = Rs;
# }
# 
:Q6_if_P_jumpr_t_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010011010 & Rs_20_16 & bits_12_11=0b10 & Pu_9_8 {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    $(PC) = Rs_20_16;
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu.new) jumpr:t Rs
# 01010011010sssssPP-11-uu--------
# 
# if (Pu.new[0]) {
#     PC = Rs;
# }
# 
:Q6_if_P_new_jumpr_t_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010011010 & Rs_20_16 & bits_12_11=0b11 & Pu_9_8 {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    $(PC) = Rs_20_16;
    <endif_new_new_0_1>
}

# 
# if (!Pu) jumpr:nt Rs
# 01010011011sssssPP-00-uu--------
# 
# if (!Pu[0]) {
#     PC = Rs;
# }
# 
:Q6_if_not_P_jumpr_nt_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010011011 & Rs_20_16 & bits_12_11=0b00 & Pu_9_8 {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    $(PC) = Rs_20_16;
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu.new) jumpr:nt Rs
# 01010011011sssssPP-01-uu--------
# 
# if (!Pu.new[0]) {
#     PC = Rs;
# }
# 
:Q6_if_not_P_new_jumpr_nt_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010011011 & Rs_20_16 & bits_12_11=0b01 & Pu_9_8 {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    $(PC) = Rs_20_16;
    <endif_new_new_0_1>
}

# 
# if (!Pu) jumpr:t Rs
# 01010011011sssssPP-10-uu--------
# 
# if (!Pu[0]) {
#     PC = Rs;
# }
# 
:Q6_if_not_P_jumpr_t_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010011011 & Rs_20_16 & bits_12_11=0b10 & Pu_9_8 {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    $(PC) = Rs_20_16;
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu.new) jumpr:t Rs
# 01010011011sssssPP-11-uu--------
# 
# if (!Pu.new[0]) {
#     PC = Rs;
# }
# 
:Q6_if_not_P_new_jumpr_t_R Pu_9_8, Rs_20_16
        is bits_31_21=0b01010011011 & Rs_20_16 & bits_12_11=0b11 & Pu_9_8 {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    $(PC) = Rs_20_16;
    <endif_new_new_0_1>
}

# 
# call #r22:2
# 0101101iiiiiiiiiPPiiiiiiiiiiiii0
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# LR = NPC;
# PC = PC + imm_r;
# 
:Q6_call_R_2_2 r22
        is bits_31_25=0b0101101 & r22_24_16 & r22_13_1 & bits_0_0=0b0
            [r22 = (r22_24_16 << 2) | (r22_13_1 << 11);] {
    local cst_0x3:4 = 0x3;
    r22 = (r22 & (~cst_0x3));
    $(LR) = nextPacket();
    $(PC) = ($(PC) + r22);
}

# 
# if (Pu) call #r15:2
# 01011101ii0iiiiiPPi-0-uuiiiiiii-
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# if (Pu[0]) {
#     LR = NPC;
#     PC = PC + imm_r;
# }
# 
:Q6_if_P_call_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011101 & r15_23_22 & bits_21_21=0b0 & r15_20_16 & r15_13_13 & bits_11_11=0b0 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    $(LR) = nextPacket();
    $(PC) = ($(PC) + r15);
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu) call #r15:2
# 01011101ii1iiiiiPPi-0-uuiiiiiii-
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# if (!Pu[0]) {
#     LR = NPC;
#     PC = PC + imm_r;
# }
# 
:Q6_if_not_P_call_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011101 & r15_23_22 & bits_21_21=0b1 & r15_20_16 & r15_13_13 & bits_11_11=0b0 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    $(LR) = nextPacket();
    $(PC) = ($(PC) + r15);
    <endif_Pu_9_8_0_1>
}

# 
# p0=cmp.eq(Rs,#-1); if (p0.new) jump:nt #r9:2
# 0001000110iissssPP0---00iiiiiii-
# 
# P0 = (Rs == -1) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_m1_if_p0_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001000110 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b00 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == (-1))) goto <if_Rs_19_16_1>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1>;
    <if_Rs_19_16_1>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1>
    P0 = res_Rs_19_16_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,#-1); if (p0.new) jump:nt #r9:2
# 0001000110iissssPP0---01iiiiiii-
# 
# P0 = (Rs > -1) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_m1_if_p0_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001000110 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b01 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_1:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 s> (-1))) goto <if_Rs_19_16_s_1>;
    res_Rs_19_16_s_1 = 0x00;
    goto <endif_Rs_19_16_s_1>;
    <if_Rs_19_16_s_1>
    res_Rs_19_16_s_1 = 0xff;
    <endif_Rs_19_16_s_1>
    P0 = res_Rs_19_16_s_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=tstbit(Rs,#0); if (p0.new) jump:nt #r9:2
# 0001000110iissssPP0---11iiiiiii-
# 
# P0 = (Rs & 1) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_tstbit_R_0_if_p0_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001000110 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b11 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P0);
    if (((Rs_19_16 & 1) != 0)) goto <if_Rs_19_16_1_0>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1_0>;
    <if_Rs_19_16_1_0>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1_0>
    P0 = res_Rs_19_16_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,#-1); if (p0.new) jump:t #r9:2
# 0001000110iissssPP1---00iiiiiii-
# 
# P0 = (Rs == -1) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_m1_if_p0_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001000110 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b00 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == (-1))) goto <if_Rs_19_16_1>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1>;
    <if_Rs_19_16_1>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1>
    P0 = res_Rs_19_16_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,#-1); if (p0.new) jump:t #r9:2
# 0001000110iissssPP1---01iiiiiii-
# 
# P0 = (Rs > -1) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_m1_if_p0_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001000110 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b01 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_1:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 s> (-1))) goto <if_Rs_19_16_s_1>;
    res_Rs_19_16_s_1 = 0x00;
    goto <endif_Rs_19_16_s_1>;
    <if_Rs_19_16_s_1>
    res_Rs_19_16_s_1 = 0xff;
    <endif_Rs_19_16_s_1>
    P0 = res_Rs_19_16_s_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=tstbit(Rs,#0); if (p0.new) jump:t #r9:2
# 0001000110iissssPP1---11iiiiiii-
# 
# P0 = (Rs & 1) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_tstbit_R_0_if_p0_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001000110 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b11 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P0);
    if (((Rs_19_16 & 1) != 0)) goto <if_Rs_19_16_1_0>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1_0>;
    <if_Rs_19_16_1_0>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1_0>
    P0 = res_Rs_19_16_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,#-1); if (!p0.new) jump:nt #r9:2
# 0001000111iissssPP0---00iiiiiii-
# 
# P0 = (Rs == -1) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_m1_if_notp0_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001000111 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b00 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == (-1))) goto <if_Rs_19_16_1>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1>;
    <if_Rs_19_16_1>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1>
    P0 = res_Rs_19_16_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,#-1); if (!p0.new) jump:nt #r9:2
# 0001000111iissssPP0---01iiiiiii-
# 
# P0 = (Rs > -1) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_m1_if_notp0_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001000111 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b01 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_1:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 s> (-1))) goto <if_Rs_19_16_s_1>;
    res_Rs_19_16_s_1 = 0x00;
    goto <endif_Rs_19_16_s_1>;
    <if_Rs_19_16_s_1>
    res_Rs_19_16_s_1 = 0xff;
    <endif_Rs_19_16_s_1>
    P0 = res_Rs_19_16_s_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=tstbit(Rs,#0); if (!p0.new) jump:nt #r9:2
# 0001000111iissssPP0---11iiiiiii-
# 
# P0 = (Rs & 1) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_tstbit_R_0_if_notp0_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001000111 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b11 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P0);
    if (((Rs_19_16 & 1) != 0)) goto <if_Rs_19_16_1_0>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1_0>;
    <if_Rs_19_16_1_0>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1_0>
    P0 = res_Rs_19_16_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,#-1); if (!p0.new) jump:t #r9:2
# 0001000111iissssPP1---00iiiiiii-
# 
# P0 = (Rs == -1) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_m1_if_notp0_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001000111 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b00 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == (-1))) goto <if_Rs_19_16_1>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1>;
    <if_Rs_19_16_1>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1>
    P0 = res_Rs_19_16_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,#-1); if (!p0.new) jump:t #r9:2
# 0001000111iissssPP1---01iiiiiii-
# 
# P0 = (Rs > -1) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_m1_if_notp0_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001000111 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b01 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_1:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 s> (-1))) goto <if_Rs_19_16_s_1>;
    res_Rs_19_16_s_1 = 0x00;
    goto <endif_Rs_19_16_s_1>;
    <if_Rs_19_16_s_1>
    res_Rs_19_16_s_1 = 0xff;
    <endif_Rs_19_16_s_1>
    P0 = res_Rs_19_16_s_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=tstbit(Rs,#0); if (!p0.new) jump:t #r9:2
# 0001000111iissssPP1---11iiiiiii-
# 
# P0 = (Rs & 1) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_tstbit_R_0_if_notp0_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001000111 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b11 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P0);
    if (((Rs_19_16 & 1) != 0)) goto <if_Rs_19_16_1_0>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1_0>;
    <if_Rs_19_16_1_0>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1_0>
    P0 = res_Rs_19_16_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,#U5); if (p0.new) jump:nt #r9:2
# 0001000000iissssPP0IIIIIiiiiiii-
# 
# P0 = (Rs == imm_U) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_U_if_p0_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000000 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P0 = res_Rs_19_16_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,#U5); if (p0.new) jump:t #r9:2
# 0001000000iissssPP1IIIIIiiiiiii-
# 
# P0 = (Rs == imm_U) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_U_if_p0_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000000 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P0 = res_Rs_19_16_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,#U5); if (!p0.new) jump:nt #r9:2
# 0001000001iissssPP0IIIIIiiiiiii-
# 
# P0 = (Rs == imm_U) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_U_if_notp0_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000001 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P0 = res_Rs_19_16_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,#U5); if (!p0.new) jump:t #r9:2
# 0001000001iissssPP1IIIIIiiiiiii-
# 
# P0 = (Rs == imm_U) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_U_if_notp0_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000001 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P0 = res_Rs_19_16_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,#U5); if (p0.new) jump:nt #r9:2
# 0001000010iissssPP0IIIIIiiiiiii-
# 
# P0 = (Rs > imm_U) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_U_if_p0_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000010 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 > U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P0 = res_Rs_19_16_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,#U5); if (p0.new) jump:t #r9:2
# 0001000010iissssPP1IIIIIiiiiiii-
# 
# P0 = (Rs > imm_U) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_U_if_p0_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000010 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 > U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P0 = res_Rs_19_16_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,#U5); if (!p0.new) jump:nt #r9:2
# 0001000011iissssPP0IIIIIiiiiiii-
# 
# P0 = (Rs > imm_U) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_U_if_notp0_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000011 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 > U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P0 = res_Rs_19_16_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,#U5); if (!p0.new) jump:t #r9:2
# 0001000011iissssPP1IIIIIiiiiiii-
# 
# P0 = (Rs > imm_U) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_U_if_notp0_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000011 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 > U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P0 = res_Rs_19_16_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gtu(Rs,#U5); if (p0.new) jump:nt #r9:2
# 0001000100iissssPP0IIIIIiiiiiii-
# 
# P0 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gtu_R_U_if_p0_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000100 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > U5)) goto <if_register_4_Rs_19_16_uw_4_0_U5>;
    res_register_4_Rs_19_16_uw_4_0_U5 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_U5>;
    <if_register_4_Rs_19_16_uw_4_0_U5>
    res_register_4_Rs_19_16_uw_4_0_U5 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_U5>
    P0 = res_register_4_Rs_19_16_uw_4_0_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gtu(Rs,#U5); if (p0.new) jump:t #r9:2
# 0001000100iissssPP1IIIIIiiiiiii-
# 
# P0 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gtu_R_U_if_p0_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000100 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > U5)) goto <if_register_4_Rs_19_16_uw_4_0_U5>;
    res_register_4_Rs_19_16_uw_4_0_U5 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_U5>;
    <if_register_4_Rs_19_16_uw_4_0_U5>
    res_register_4_Rs_19_16_uw_4_0_U5 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_U5>
    P0 = res_register_4_Rs_19_16_uw_4_0_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gtu(Rs,#U5); if (!p0.new) jump:nt #r9:2
# 0001000101iissssPP0IIIIIiiiiiii-
# 
# P0 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gtu_R_U_if_notp0_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000101 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > U5)) goto <if_register_4_Rs_19_16_uw_4_0_U5>;
    res_register_4_Rs_19_16_uw_4_0_U5 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_U5>;
    <if_register_4_Rs_19_16_uw_4_0_U5>
    res_register_4_Rs_19_16_uw_4_0_U5 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_U5>
    P0 = res_register_4_Rs_19_16_uw_4_0_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gtu(Rs,#U5); if (!p0.new) jump:t #r9:2
# 0001000101iissssPP1IIIIIiiiiiii-
# 
# P0 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gtu_R_U_if_notp0_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001000101 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_U5:4;
    local new_new:1 = newSuffix(P0);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > U5)) goto <if_register_4_Rs_19_16_uw_4_0_U5>;
    res_register_4_Rs_19_16_uw_4_0_U5 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_U5>;
    <if_register_4_Rs_19_16_uw_4_0_U5>
    res_register_4_Rs_19_16_uw_4_0_U5 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_U5>
    P0 = res_register_4_Rs_19_16_uw_4_0_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,#-1); if (p1.new) jump:nt #r9:2
# 0001001110iissssPP0---00iiiiiii-
# 
# P1 = (Rs == -1) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_m1_if_p1_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001001110 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b00 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == (-1))) goto <if_Rs_19_16_1>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1>;
    <if_Rs_19_16_1>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1>
    P1 = res_Rs_19_16_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,#-1); if (p1.new) jump:nt #r9:2
# 0001001110iissssPP0---01iiiiiii-
# 
# P1 = (Rs > -1) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_m1_if_p1_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001001110 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b01 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_1:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 s> (-1))) goto <if_Rs_19_16_s_1>;
    res_Rs_19_16_s_1 = 0x00;
    goto <endif_Rs_19_16_s_1>;
    <if_Rs_19_16_s_1>
    res_Rs_19_16_s_1 = 0xff;
    <endif_Rs_19_16_s_1>
    P1 = res_Rs_19_16_s_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=tstbit(Rs,#0); if (p1.new) jump:nt #r9:2
# 0001001110iissssPP0---11iiiiiii-
# 
# P1 = (Rs & 1) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_tstbit_R_0_if_p1_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001001110 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b11 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P1);
    if (((Rs_19_16 & 1) != 0)) goto <if_Rs_19_16_1_0>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1_0>;
    <if_Rs_19_16_1_0>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1_0>
    P1 = res_Rs_19_16_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,#-1); if (p1.new) jump:t #r9:2
# 0001001110iissssPP1---00iiiiiii-
# 
# P1 = (Rs == -1) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_m1_if_p1_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001001110 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b00 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == (-1))) goto <if_Rs_19_16_1>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1>;
    <if_Rs_19_16_1>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1>
    P1 = res_Rs_19_16_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,#-1); if (p1.new) jump:t #r9:2
# 0001001110iissssPP1---01iiiiiii-
# 
# P1 = (Rs > -1) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_m1_if_p1_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001001110 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b01 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_1:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 s> (-1))) goto <if_Rs_19_16_s_1>;
    res_Rs_19_16_s_1 = 0x00;
    goto <endif_Rs_19_16_s_1>;
    <if_Rs_19_16_s_1>
    res_Rs_19_16_s_1 = 0xff;
    <endif_Rs_19_16_s_1>
    P1 = res_Rs_19_16_s_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=tstbit(Rs,#0); if (p1.new) jump:t #r9:2
# 0001001110iissssPP1---11iiiiiii-
# 
# P1 = (Rs & 1) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_tstbit_R_0_if_p1_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001001110 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b11 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P1);
    if (((Rs_19_16 & 1) != 0)) goto <if_Rs_19_16_1_0>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1_0>;
    <if_Rs_19_16_1_0>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1_0>
    P1 = res_Rs_19_16_1:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,#-1); if (!p1.new) jump:nt #r9:2
# 0001001111iissssPP0---00iiiiiii-
# 
# P1 = (Rs == -1) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_m1_if_notp1_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001001111 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b00 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == (-1))) goto <if_Rs_19_16_1>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1>;
    <if_Rs_19_16_1>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1>
    P1 = res_Rs_19_16_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,#-1); if (!p1.new) jump:nt #r9:2
# 0001001111iissssPP0---01iiiiiii-
# 
# P1 = (Rs > -1) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_m1_if_notp1_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001001111 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b01 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_1:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 s> (-1))) goto <if_Rs_19_16_s_1>;
    res_Rs_19_16_s_1 = 0x00;
    goto <endif_Rs_19_16_s_1>;
    <if_Rs_19_16_s_1>
    res_Rs_19_16_s_1 = 0xff;
    <endif_Rs_19_16_s_1>
    P1 = res_Rs_19_16_s_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=tstbit(Rs,#0); if (!p1.new) jump:nt #r9:2
# 0001001111iissssPP0---11iiiiiii-
# 
# P1 = (Rs & 1) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_tstbit_R_0_if_notp1_new_jump_nt_R Rs_19_16, r9
        is bits_31_22=0b0001001111 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & bits_9_8=0b11 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P1);
    if (((Rs_19_16 & 1) != 0)) goto <if_Rs_19_16_1_0>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1_0>;
    <if_Rs_19_16_1_0>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1_0>
    P1 = res_Rs_19_16_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,#-1); if (!p1.new) jump:t #r9:2
# 0001001111iissssPP1---00iiiiiii-
# 
# P1 = (Rs == -1) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_m1_if_notp1_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001001111 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b00 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == (-1))) goto <if_Rs_19_16_1>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1>;
    <if_Rs_19_16_1>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1>
    P1 = res_Rs_19_16_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,#-1); if (!p1.new) jump:t #r9:2
# 0001001111iissssPP1---01iiiiiii-
# 
# P1 = (Rs > -1) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_m1_if_notp1_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001001111 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b01 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_1:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 s> (-1))) goto <if_Rs_19_16_s_1>;
    res_Rs_19_16_s_1 = 0x00;
    goto <endif_Rs_19_16_s_1>;
    <if_Rs_19_16_s_1>
    res_Rs_19_16_s_1 = 0xff;
    <endif_Rs_19_16_s_1>
    P1 = res_Rs_19_16_s_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=tstbit(Rs,#0); if (!p1.new) jump:t #r9:2
# 0001001111iissssPP1---11iiiiiii-
# 
# P1 = (Rs & 1) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_tstbit_R_0_if_notp1_new_jump_t_R Rs_19_16, r9
        is bits_31_22=0b0001001111 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & bits_9_8=0b11 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_1:4;
    local new_new:1 = newSuffix(P1);
    if (((Rs_19_16 & 1) != 0)) goto <if_Rs_19_16_1_0>;
    res_Rs_19_16_1 = 0x00;
    goto <endif_Rs_19_16_1_0>;
    <if_Rs_19_16_1_0>
    res_Rs_19_16_1 = 0xff;
    <endif_Rs_19_16_1_0>
    P1 = res_Rs_19_16_1:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,#U5); if (p1.new) jump:nt #r9:2
# 0001001000iissssPP0IIIIIiiiiiii-
# 
# P1 = (Rs == imm_U) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_U_if_p1_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001000 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P1 = res_Rs_19_16_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,#U5); if (p1.new) jump:t #r9:2
# 0001001000iissssPP1IIIIIiiiiiii-
# 
# P1 = (Rs == imm_U) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_U_if_p1_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001000 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P1 = res_Rs_19_16_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,#U5); if (!p1.new) jump:nt #r9:2
# 0001001001iissssPP0IIIIIiiiiiii-
# 
# P1 = (Rs == imm_U) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_U_if_notp1_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001001 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P1 = res_Rs_19_16_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,#U5); if (!p1.new) jump:t #r9:2
# 0001001001iissssPP1IIIIIiiiiiii-
# 
# P1 = (Rs == imm_U) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_U_if_notp1_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001001 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P1 = res_Rs_19_16_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,#U5); if (p1.new) jump:nt #r9:2
# 0001001010iissssPP0IIIIIiiiiiii-
# 
# P1 = (Rs > imm_U) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_U_if_p1_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001010 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 > U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P1 = res_Rs_19_16_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,#U5); if (p1.new) jump:t #r9:2
# 0001001010iissssPP1IIIIIiiiiiii-
# 
# P1 = (Rs > imm_U) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_U_if_p1_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001010 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 > U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P1 = res_Rs_19_16_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,#U5); if (!p1.new) jump:nt #r9:2
# 0001001011iissssPP0IIIIIiiiiiii-
# 
# P1 = (Rs > imm_U) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_U_if_notp1_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001011 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 > U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P1 = res_Rs_19_16_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,#U5); if (!p1.new) jump:t #r9:2
# 0001001011iissssPP1IIIIIiiiiiii-
# 
# P1 = (Rs > imm_U) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_U_if_notp1_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001011 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local res_Rs_19_16_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 > U5)) goto <if_Rs_19_16_U5>;
    res_Rs_19_16_U5 = 0x00;
    goto <endif_Rs_19_16_U5>;
    <if_Rs_19_16_U5>
    res_Rs_19_16_U5 = 0xff;
    <endif_Rs_19_16_U5>
    P1 = res_Rs_19_16_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gtu(Rs,#U5); if (p1.new) jump:nt #r9:2
# 0001001100iissssPP0IIIIIiiiiiii-
# 
# P1 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gtu_R_U_if_p1_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001100 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > U5)) goto <if_register_4_Rs_19_16_uw_4_0_U5>;
    res_register_4_Rs_19_16_uw_4_0_U5 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_U5>;
    <if_register_4_Rs_19_16_uw_4_0_U5>
    res_register_4_Rs_19_16_uw_4_0_U5 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_U5>
    P1 = res_register_4_Rs_19_16_uw_4_0_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gtu(Rs,#U5); if (p1.new) jump:t #r9:2
# 0001001100iissssPP1IIIIIiiiiiii-
# 
# P1 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gtu_R_U_if_p1_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001100 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > U5)) goto <if_register_4_Rs_19_16_uw_4_0_U5>;
    res_register_4_Rs_19_16_uw_4_0_U5 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_U5>;
    <if_register_4_Rs_19_16_uw_4_0_U5>
    res_register_4_Rs_19_16_uw_4_0_U5 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_U5>
    P1 = res_register_4_Rs_19_16_uw_4_0_U5:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gtu(Rs,#U5); if (!p1.new) jump:nt #r9:2
# 0001001101iissssPP0IIIIIiiiiiii-
# 
# P1 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gtu_R_U_if_notp1_new_jump_nt_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001101 & r9_21_20 & Rs_19_16 & bits_13_13=0b0 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > U5)) goto <if_register_4_Rs_19_16_uw_4_0_U5>;
    res_register_4_Rs_19_16_uw_4_0_U5 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_U5>;
    <if_register_4_Rs_19_16_uw_4_0_U5>
    res_register_4_Rs_19_16_uw_4_0_U5 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_U5>
    P1 = res_register_4_Rs_19_16_uw_4_0_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gtu(Rs,#U5); if (!p1.new) jump:t #r9:2
# 0001001101iissssPP1IIIIIiiiiiii-
# 
# P1 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gtu_R_U_if_notp1_new_jump_t_R Rs_19_16, U5, r9
        is bits_31_22=0b0001001101 & r9_21_20 & Rs_19_16 & bits_13_13=0b1 & U5_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U5 = (U5_12_8 << 0);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_U5:4;
    local new_new:1 = newSuffix(P1);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > U5)) goto <if_register_4_Rs_19_16_uw_4_0_U5>;
    res_register_4_Rs_19_16_uw_4_0_U5 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_U5>;
    <if_register_4_Rs_19_16_uw_4_0_U5>
    res_register_4_Rs_19_16_uw_4_0_U5 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_U5>
    P1 = res_register_4_Rs_19_16_uw_4_0_U5:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,Rt); if (p0.new) jump:nt #r9:2
# 0001010000iissssPP00ttttiiiiiii-
# 
# P0 = (Rs == Rt) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_R_if_p0_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010000 & r9_21_20 & Rs_19_16 & bits_13_12=0b00 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == Rt_11_8)) goto <if_Rs_19_16_Rt_11_8>;
    res_Rs_19_16_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_Rt_11_8>;
    <if_Rs_19_16_Rt_11_8>
    res_Rs_19_16_Rt_11_8 = 0xff;
    <endif_Rs_19_16_Rt_11_8>
    P0 = res_Rs_19_16_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,Rt); if (p1.new) jump:nt #r9:2
# 0001010000iissssPP01ttttiiiiiii-
# 
# P1 = (Rs == Rt) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_R_if_p1_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010000 & r9_21_20 & Rs_19_16 & bits_13_12=0b01 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == Rt_11_8)) goto <if_Rs_19_16_Rt_11_8>;
    res_Rs_19_16_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_Rt_11_8>;
    <if_Rs_19_16_Rt_11_8>
    res_Rs_19_16_Rt_11_8 = 0xff;
    <endif_Rs_19_16_Rt_11_8>
    P1 = res_Rs_19_16_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,Rt); if (p0.new) jump:t #r9:2
# 0001010000iissssPP10ttttiiiiiii-
# 
# P0 = (Rs == Rt) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_R_if_p0_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010000 & r9_21_20 & Rs_19_16 & bits_13_12=0b10 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == Rt_11_8)) goto <if_Rs_19_16_Rt_11_8>;
    res_Rs_19_16_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_Rt_11_8>;
    <if_Rs_19_16_Rt_11_8>
    res_Rs_19_16_Rt_11_8 = 0xff;
    <endif_Rs_19_16_Rt_11_8>
    P0 = res_Rs_19_16_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,Rt); if (p1.new) jump:t #r9:2
# 0001010000iissssPP11ttttiiiiiii-
# 
# P1 = (Rs == Rt) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_R_if_p1_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010000 & r9_21_20 & Rs_19_16 & bits_13_12=0b11 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == Rt_11_8)) goto <if_Rs_19_16_Rt_11_8>;
    res_Rs_19_16_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_Rt_11_8>;
    <if_Rs_19_16_Rt_11_8>
    res_Rs_19_16_Rt_11_8 = 0xff;
    <endif_Rs_19_16_Rt_11_8>
    P1 = res_Rs_19_16_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,Rt); if (!p0.new) jump:nt #r9:2
# 0001010001iissssPP00ttttiiiiiii-
# 
# P0 = (Rs == Rt) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_R_if_notp0_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010001 & r9_21_20 & Rs_19_16 & bits_13_12=0b00 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == Rt_11_8)) goto <if_Rs_19_16_Rt_11_8>;
    res_Rs_19_16_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_Rt_11_8>;
    <if_Rs_19_16_Rt_11_8>
    res_Rs_19_16_Rt_11_8 = 0xff;
    <endif_Rs_19_16_Rt_11_8>
    P0 = res_Rs_19_16_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,Rt); if (!p1.new) jump:nt #r9:2
# 0001010001iissssPP01ttttiiiiiii-
# 
# P1 = (Rs == Rt) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_R_if_notp1_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010001 & r9_21_20 & Rs_19_16 & bits_13_12=0b01 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == Rt_11_8)) goto <if_Rs_19_16_Rt_11_8>;
    res_Rs_19_16_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_Rt_11_8>;
    <if_Rs_19_16_Rt_11_8>
    res_Rs_19_16_Rt_11_8 = 0xff;
    <endif_Rs_19_16_Rt_11_8>
    P1 = res_Rs_19_16_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.eq(Rs,Rt); if (!p0.new) jump:t #r9:2
# 0001010001iissssPP10ttttiiiiiii-
# 
# P0 = (Rs == Rt) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_eq_R_R_if_notp0_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010001 & r9_21_20 & Rs_19_16 & bits_13_12=0b10 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 == Rt_11_8)) goto <if_Rs_19_16_Rt_11_8>;
    res_Rs_19_16_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_Rt_11_8>;
    <if_Rs_19_16_Rt_11_8>
    res_Rs_19_16_Rt_11_8 = 0xff;
    <endif_Rs_19_16_Rt_11_8>
    P0 = res_Rs_19_16_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.eq(Rs,Rt); if (!p1.new) jump:t #r9:2
# 0001010001iissssPP11ttttiiiiiii-
# 
# P1 = (Rs == Rt) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_eq_R_R_if_notp1_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010001 & r9_21_20 & Rs_19_16 & bits_13_12=0b11 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 == Rt_11_8)) goto <if_Rs_19_16_Rt_11_8>;
    res_Rs_19_16_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_Rt_11_8>;
    <if_Rs_19_16_Rt_11_8>
    res_Rs_19_16_Rt_11_8 = 0xff;
    <endif_Rs_19_16_Rt_11_8>
    P1 = res_Rs_19_16_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,Rt); if (p0.new) jump:nt #r9:2
# 0001010010iissssPP00ttttiiiiiii-
# 
# P0 = (Rs > Rt) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_R_if_p0_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010010 & r9_21_20 & Rs_19_16 & bits_13_12=0b00 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 s> Rt_11_8)) goto <if_Rs_19_16_s_Rt_11_8>;
    res_Rs_19_16_s_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_s_Rt_11_8>;
    <if_Rs_19_16_s_Rt_11_8>
    res_Rs_19_16_s_Rt_11_8 = 0xff;
    <endif_Rs_19_16_s_Rt_11_8>
    P0 = res_Rs_19_16_s_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,Rt); if (p1.new) jump:nt #r9:2
# 0001010010iissssPP01ttttiiiiiii-
# 
# P1 = (Rs > Rt) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_R_if_p1_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010010 & r9_21_20 & Rs_19_16 & bits_13_12=0b01 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 s> Rt_11_8)) goto <if_Rs_19_16_s_Rt_11_8>;
    res_Rs_19_16_s_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_s_Rt_11_8>;
    <if_Rs_19_16_s_Rt_11_8>
    res_Rs_19_16_s_Rt_11_8 = 0xff;
    <endif_Rs_19_16_s_Rt_11_8>
    P1 = res_Rs_19_16_s_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,Rt); if (p0.new) jump:t #r9:2
# 0001010010iissssPP10ttttiiiiiii-
# 
# P0 = (Rs > Rt) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_R_if_p0_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010010 & r9_21_20 & Rs_19_16 & bits_13_12=0b10 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 s> Rt_11_8)) goto <if_Rs_19_16_s_Rt_11_8>;
    res_Rs_19_16_s_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_s_Rt_11_8>;
    <if_Rs_19_16_s_Rt_11_8>
    res_Rs_19_16_s_Rt_11_8 = 0xff;
    <endif_Rs_19_16_s_Rt_11_8>
    P0 = res_Rs_19_16_s_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,Rt); if (p1.new) jump:t #r9:2
# 0001010010iissssPP11ttttiiiiiii-
# 
# P1 = (Rs > Rt) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_R_if_p1_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010010 & r9_21_20 & Rs_19_16 & bits_13_12=0b11 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 s> Rt_11_8)) goto <if_Rs_19_16_s_Rt_11_8>;
    res_Rs_19_16_s_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_s_Rt_11_8>;
    <if_Rs_19_16_s_Rt_11_8>
    res_Rs_19_16_s_Rt_11_8 = 0xff;
    <endif_Rs_19_16_s_Rt_11_8>
    P1 = res_Rs_19_16_s_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,Rt); if (!p0.new) jump:nt #r9:2
# 0001010011iissssPP00ttttiiiiiii-
# 
# P0 = (Rs > Rt) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_R_if_notp0_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010011 & r9_21_20 & Rs_19_16 & bits_13_12=0b00 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 s> Rt_11_8)) goto <if_Rs_19_16_s_Rt_11_8>;
    res_Rs_19_16_s_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_s_Rt_11_8>;
    <if_Rs_19_16_s_Rt_11_8>
    res_Rs_19_16_s_Rt_11_8 = 0xff;
    <endif_Rs_19_16_s_Rt_11_8>
    P0 = res_Rs_19_16_s_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,Rt); if (!p1.new) jump:nt #r9:2
# 0001010011iissssPP01ttttiiiiiii-
# 
# P1 = (Rs > Rt) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_R_if_notp1_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010011 & r9_21_20 & Rs_19_16 & bits_13_12=0b01 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 s> Rt_11_8)) goto <if_Rs_19_16_s_Rt_11_8>;
    res_Rs_19_16_s_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_s_Rt_11_8>;
    <if_Rs_19_16_s_Rt_11_8>
    res_Rs_19_16_s_Rt_11_8 = 0xff;
    <endif_Rs_19_16_s_Rt_11_8>
    P1 = res_Rs_19_16_s_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gt(Rs,Rt); if (!p0.new) jump:t #r9:2
# 0001010011iissssPP10ttttiiiiiii-
# 
# P0 = (Rs > Rt) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gt_R_R_if_notp0_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010011 & r9_21_20 & Rs_19_16 & bits_13_12=0b10 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((Rs_19_16 s> Rt_11_8)) goto <if_Rs_19_16_s_Rt_11_8>;
    res_Rs_19_16_s_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_s_Rt_11_8>;
    <if_Rs_19_16_s_Rt_11_8>
    res_Rs_19_16_s_Rt_11_8 = 0xff;
    <endif_Rs_19_16_s_Rt_11_8>
    P0 = res_Rs_19_16_s_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gt(Rs,Rt); if (!p1.new) jump:t #r9:2
# 0001010011iissssPP11ttttiiiiiii-
# 
# P1 = (Rs > Rt) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gt_R_R_if_notp1_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010011 & r9_21_20 & Rs_19_16 & bits_13_12=0b11 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local res_Rs_19_16_s_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((Rs_19_16 s> Rt_11_8)) goto <if_Rs_19_16_s_Rt_11_8>;
    res_Rs_19_16_s_Rt_11_8 = 0x00;
    goto <endif_Rs_19_16_s_Rt_11_8>;
    <if_Rs_19_16_s_Rt_11_8>
    res_Rs_19_16_s_Rt_11_8 = 0xff;
    <endif_Rs_19_16_s_Rt_11_8>
    P1 = res_Rs_19_16_s_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gtu(Rs,Rt); if (p0.new) jump:nt #r9:2
# 0001010100iissssPP00ttttiiiiiii-
# 
# P0 = (Rs.uw[0] > Rt) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gtu_R_R_if_p0_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010100 & r9_21_20 & Rs_19_16 & bits_13_12=0b00 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > Rt_11_8)) goto <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    P0 = res_register_4_Rs_19_16_uw_4_0_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gtu(Rs,Rt); if (p1.new) jump:nt #r9:2
# 0001010100iissssPP01ttttiiiiiii-
# 
# P1 = (Rs.uw[0] > Rt) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gtu_R_R_if_p1_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010100 & r9_21_20 & Rs_19_16 & bits_13_12=0b01 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > Rt_11_8)) goto <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    P1 = res_register_4_Rs_19_16_uw_4_0_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gtu(Rs,Rt); if (p0.new) jump:t #r9:2
# 0001010100iissssPP10ttttiiiiiii-
# 
# P0 = (Rs.uw[0] > Rt) ? 0xff : 0x00;
# if (P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gtu_R_R_if_p0_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010100 & r9_21_20 & Rs_19_16 & bits_13_12=0b10 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > Rt_11_8)) goto <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    P0 = res_register_4_Rs_19_16_uw_4_0_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gtu(Rs,Rt); if (p1.new) jump:t #r9:2
# 0001010100iissssPP11ttttiiiiiii-
# 
# P1 = (Rs.uw[0] > Rt) ? 0xff : 0x00;
# if (P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gtu_R_R_if_p1_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010100 & r9_21_20 & Rs_19_16 & bits_13_12=0b11 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > Rt_11_8)) goto <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    P1 = res_register_4_Rs_19_16_uw_4_0_Rt_11_8:1;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gtu(Rs,Rt); if (!p0.new) jump:nt #r9:2
# 0001010101iissssPP00ttttiiiiiii-
# 
# P0 = (Rs.uw[0] > Rt) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gtu_R_R_if_notp0_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010101 & r9_21_20 & Rs_19_16 & bits_13_12=0b00 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > Rt_11_8)) goto <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    P0 = res_register_4_Rs_19_16_uw_4_0_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gtu(Rs,Rt); if (!p1.new) jump:nt #r9:2
# 0001010101iissssPP01ttttiiiiiii-
# 
# P1 = (Rs.uw[0] > Rt) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gtu_R_R_if_notp1_new_jump_nt_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010101 & r9_21_20 & Rs_19_16 & bits_13_12=0b01 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > Rt_11_8)) goto <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    P1 = res_register_4_Rs_19_16_uw_4_0_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p0=cmp.gtu(Rs,Rt); if (!p0.new) jump:t #r9:2
# 0001010101iissssPP10ttttiiiiiii-
# 
# P0 = (Rs.uw[0] > Rt) ? 0xff : 0x00;
# if (!P0.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p0_cmp_gtu_R_R_if_notp0_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010101 & r9_21_20 & Rs_19_16 & bits_13_12=0b10 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_Rt_11_8:4;
    local new_new:1 = newSuffix(P0);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > Rt_11_8)) goto <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    P0 = res_register_4_Rs_19_16_uw_4_0_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# p1=cmp.gtu(Rs,Rt); if (!p1.new) jump:t #r9:2
# 0001010101iissssPP11ttttiiiiiii-
# 
# P1 = (Rs.uw[0] > Rt) ? 0xff : 0x00;
# if (!P1.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_p1_cmp_gtu_R_R_if_notp1_new_jump_t_R Rs_19_16, Rt_11_8, r9
        is bits_31_22=0b0001010101 & r9_21_20 & Rs_19_16 & bits_13_12=0b11 & Rt_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local Rs_19_16_uw:4 = &Rs_19_16;
    local res_register_4_Rs_19_16_uw_4_0_Rt_11_8:4;
    local new_new:1 = newSuffix(P1);
    if ((*[register]:4 (Rs_19_16_uw + 4 * 0) > Rt_11_8)) goto <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0x00;
    goto <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>;
    <if_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    res_register_4_Rs_19_16_uw_4_0_Rt_11_8 = 0xff;
    <endif_register_4_Rs_19_16_uw_4_0_Rt_11_8>
    P1 = res_register_4_Rs_19_16_uw_4_0_Rt_11_8:1;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_0_1>
}

# 
# jump #r22:2
# 0101100iiiiiiiiiPPiiiiiiiiiiiii-
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# PC = PC + imm_r;
# 
:Q6_jump_R_2_2 r22
        is bits_31_25=0b0101100 & r22_24_16 & r22_13_1
            [r22 = (r22_24_16 << 2) | (r22_13_1 << 11);] {
    local cst_0x3:4 = 0x3;
    r22 = (r22 & (~cst_0x3));
    $(PC) = ($(PC) + r22);
}

# 
# if (Pu) jump:nt #r15:2
# 01011100ii0iiiiiPPi00-uuiiiiiii-
# 
# if (Pu[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_P_jump_nt_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011100 & r15_23_22 & bits_21_21=0b0 & r15_20_16 & r15_13_13 & bits_12_11=0b00 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    $(PC) = ($(PC) + r15);
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu) jump:t #r15:2
# 01011100ii0iiiiiPPi10-uuiiiiiii-
# 
# if (Pu[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_P_jump_t_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011100 & r15_23_22 & bits_21_21=0b0 & r15_20_16 & r15_13_13 & bits_12_11=0b10 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    if (Pu_9_8[0, 1]) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    $(PC) = ($(PC) + r15);
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu) jump:nt #r15:2
# 01011100ii1iiiiiPPi00-uuiiiiiii-
# 
# if (!Pu[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_not_P_jump_nt_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011100 & r15_23_22 & bits_21_21=0b1 & r15_20_16 & r15_13_13 & bits_12_11=0b00 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    $(PC) = ($(PC) + r15);
    <endif_Pu_9_8_0_1>
}

# 
# if (!Pu) jump:t #r15:2
# 01011100ii1iiiiiPPi10-uuiiiiiii-
# 
# if (!Pu[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_not_P_jump_t_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011100 & r15_23_22 & bits_21_21=0b1 & r15_20_16 & r15_13_13 & bits_12_11=0b10 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    if ((!Pu_9_8[0, 1])) goto <if_Pu_9_8_0_1>;
    goto <endif_Pu_9_8_0_1>;
    <if_Pu_9_8_0_1>
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    $(PC) = ($(PC) + r15);
    <endif_Pu_9_8_0_1>
}

# 
# if (Pu.new) jump:nt #r15:2
# 01011100ii0iiiiiPPi01-uuiiiiiii-
# 
# if (Pu.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_P_new_jump_nt_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011100 & r15_23_22 & bits_21_21=0b0 & r15_20_16 & r15_13_13 & bits_12_11=0b01 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    $(PC) = ($(PC) + r15);
    <endif_new_new_0_1>
}

# 
# if (Pu.new) jump:t #r15:2
# 01011100ii0iiiiiPPi11-uuiiiiiii-
# 
# if (Pu.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_P_new_jump_t_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011100 & r15_23_22 & bits_21_21=0b0 & r15_20_16 & r15_13_13 & bits_12_11=0b11 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    local new_new:1 = newSuffix(Pu_9_8);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    $(PC) = ($(PC) + r15);
    <endif_new_new_0_1>
}

# 
# if (!Pu.new) jump:nt #r15:2
# 01011100ii1iiiiiPPi01-uuiiiiiii-
# 
# if (!Pu.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_not_P_new_jump_nt_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011100 & r15_23_22 & bits_21_21=0b1 & r15_20_16 & r15_13_13 & bits_12_11=0b01 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    $(PC) = ($(PC) + r15);
    <endif_new_new_0_1>
}

# 
# if (!Pu.new) jump:t #r15:2
# 01011100ii1iiiiiPPi11-uuiiiiiii-
# 
# if (!Pu.new[0]) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_not_P_new_jump_t_R_5_2 Pu_9_8, r15
        is bits_31_24=0b01011100 & r15_23_22 & bits_21_21=0b1 & r15_20_16 & r15_13_13 & bits_12_11=0b11 & Pu_9_8 & r15_7_1
            [r15 = (r15_23_22 << 2) | (r15_20_16 << 4) | (r15_13_13 << 9) | (r15_7_1 << 10);] {
    local new_new:1 = newSuffix(Pu_9_8);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local cst_0x3:4 = 0x3;
    r15 = (r15 & (~cst_0x3));
    $(PC) = ($(PC) + r15);
    <endif_new_new_0_1>
}

# 
# if (Rs!=#0) jump:nt #r13:2
# 0110000100isssssPPi0iiiiiiiiiii-
# 
# if (Rs != 0) {
#     PC = PC + imm_r;
# }
# 
:Q6_if_R_ne_0_jump_nt_R_3_2 Rs_20_16, r13
        is bits_31_22=0b0110000100 & r13_21_21 & Rs_20_16 & r13_13_13 & bits_12_12=0b0 & r13_11_1
            [r13 = (r13_21_21 << 2) | (r13_13_13 << 3) | (r13_11_1 << 4);] {
    if ((Rs_20_16 != 0)) goto <if_Rs_20_16_0>;
    goto <endif_Rs_20_16_0>;
    <if_Rs_20_16_0>
    $(PC) = ($(PC) + r13);
    <endif_Rs_20_16_0>
}

# 
# if (Rs!=#0) jump:t #r13:2
# 0110000100isssssPPi1iiiiiiiiiii-
# 
# if (Rs != 0) {
#     PC = PC + imm_r;
# }
# 
:Q6_if_R_ne_0_jump_t_R_3_2 Rs_20_16, r13
        is bits_31_22=0b0110000100 & r13_21_21 & Rs_20_16 & r13_13_13 & bits_12_12=0b1 & r13_11_1
            [r13 = (r13_21_21 << 2) | (r13_13_13 << 3) | (r13_11_1 << 4);] {
    if ((Rs_20_16 != 0)) goto <if_Rs_20_16_0>;
    goto <endif_Rs_20_16_0>;
    <if_Rs_20_16_0>
    $(PC) = ($(PC) + r13);
    <endif_Rs_20_16_0>
}

# 
# if (Rs>=#0) jump:nt #r13:2
# 0110000101isssssPPi0iiiiiiiiiii-
# 
# if (Rs >= 0) {
#     PC = PC + imm_r;
# }
# 
:Q6_if_R_sup_0_jump_nt_R_3_2 Rs_20_16, r13
        is bits_31_22=0b0110000101 & r13_21_21 & Rs_20_16 & r13_13_13 & bits_12_12=0b0 & r13_11_1
            [r13 = (r13_21_21 << 2) | (r13_13_13 << 3) | (r13_11_1 << 4);] {
    if ((Rs_20_16 s>= 0)) goto <if_Rs_20_16_s_0>;
    goto <endif_Rs_20_16_s_0>;
    <if_Rs_20_16_s_0>
    $(PC) = ($(PC) + r13);
    <endif_Rs_20_16_s_0>
}

# 
# if (Rs>=#0) jump:t #r13:2
# 0110000101isssssPPi1iiiiiiiiiii-
# 
# if (Rs >= 0) {
#     PC = PC + imm_r;
# }
# 
:Q6_if_R_sup_0_jump_t_R_3_2 Rs_20_16, r13
        is bits_31_22=0b0110000101 & r13_21_21 & Rs_20_16 & r13_13_13 & bits_12_12=0b1 & r13_11_1
            [r13 = (r13_21_21 << 2) | (r13_13_13 << 3) | (r13_11_1 << 4);] {
    if ((Rs_20_16 s>= 0)) goto <if_Rs_20_16_s_0>;
    goto <endif_Rs_20_16_s_0>;
    <if_Rs_20_16_s_0>
    $(PC) = ($(PC) + r13);
    <endif_Rs_20_16_s_0>
}

# 
# if (Rs==#0) jump:nt #r13:2
# 0110000110isssssPPi0iiiiiiiiiii-
# 
# if (Rs == 0) {
#     PC = PC + imm_r;
# }
# 
:Q6_if_R_eq_0_jump_nt_R_3_2 Rs_20_16, r13
        is bits_31_22=0b0110000110 & r13_21_21 & Rs_20_16 & r13_13_13 & bits_12_12=0b0 & r13_11_1
            [r13 = (r13_21_21 << 2) | (r13_13_13 << 3) | (r13_11_1 << 4);] {
    if ((Rs_20_16 == 0)) goto <if_Rs_20_16_0>;
    goto <endif_Rs_20_16_0>;
    <if_Rs_20_16_0>
    $(PC) = ($(PC) + r13);
    <endif_Rs_20_16_0>
}

# 
# if (Rs==#0) jump:t #r13:2
# 0110000110isssssPPi1iiiiiiiiiii-
# 
# if (Rs == 0) {
#     PC = PC + imm_r;
# }
# 
:Q6_if_R_eq_0_jump_t_R_3_2 Rs_20_16, r13
        is bits_31_22=0b0110000110 & r13_21_21 & Rs_20_16 & r13_13_13 & bits_12_12=0b1 & r13_11_1
            [r13 = (r13_21_21 << 2) | (r13_13_13 << 3) | (r13_11_1 << 4);] {
    if ((Rs_20_16 == 0)) goto <if_Rs_20_16_0>;
    goto <endif_Rs_20_16_0>;
    <if_Rs_20_16_0>
    $(PC) = ($(PC) + r13);
    <endif_Rs_20_16_0>
}

# 
# if (Rs<=#0) jump:nt #r13:2
# 0110000111isssssPPi0iiiiiiiiiii-
# 
# if (Rs <= 0) {
#     PC = PC + imm_r;
# }
# 
:Q6_if_R_inf_0_jump_nt_R_3_2 Rs_20_16, r13
        is bits_31_22=0b0110000111 & r13_21_21 & Rs_20_16 & r13_13_13 & bits_12_12=0b0 & r13_11_1
            [r13 = (r13_21_21 << 2) | (r13_13_13 << 3) | (r13_11_1 << 4);] {
    if ((Rs_20_16 s<= 0)) goto <if_Rs_20_16_s_0>;
    goto <endif_Rs_20_16_s_0>;
    <if_Rs_20_16_s_0>
    $(PC) = ($(PC) + r13);
    <endif_Rs_20_16_s_0>
}

# 
# if (Rs<=#0) jump:t #r13:2
# 0110000111isssssPPi1iiiiiiiiiii-
# 
# if (Rs <= 0) {
#     PC = PC + imm_r;
# }
# 
:Q6_if_R_inf_0_jump_t_R_3_2 Rs_20_16, r13
        is bits_31_22=0b0110000111 & r13_21_21 & Rs_20_16 & r13_13_13 & bits_12_12=0b1 & r13_11_1
            [r13 = (r13_21_21 << 2) | (r13_13_13 << 3) | (r13_11_1 << 4);] {
    if ((Rs_20_16 s<= 0)) goto <if_Rs_20_16_s_0>;
    goto <endif_Rs_20_16_s_0>;
    <if_Rs_20_16_s_0>
    $(PC) = ($(PC) + r13);
    <endif_Rs_20_16_s_0>
}

# 
# Rd=#U6; jump #r9:2
# 00010110--iiddddPPIIIIIIiiiiiii-
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# Rd = imm_U;
# PC = PC + imm_r;
# 
:Q6_R_U_jump_R Rd_19_16, U6, r9
        is bits_31_24=0b00010110 & r9_21_20 & Rd_19_16 & U6_13_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4); U6 = (U6_13_8 << 0);] {
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    Rd_19_16 = U6;
    $(PC) = ($(PC) + r9);
}

# 
# Rd=Rs; jump #r9:2
# 00010111--iissssPP--ddddiiiiiii-
# 
# apply_extension(imm_r);
# imm_r = imm_r & ~0x3;
# Rd = Rs;
# PC = PC + imm_r;
# 
:Q6_R_R_jump_R Rd_11_8, Rs_19_16, r9
        is bits_31_24=0b00010111 & r9_21_20 & Rs_19_16 & Rd_11_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    Rd_11_8 = Rs_19_16;
    $(PC) = ($(PC) + r9);
}

# 
# Rdd=memd(Rs+Rt<<#u2)
# 00111010110sssssPPittttti--ddddd
# 
# EA = Rs + (Rt << imm_u);
# Rdd = *EA;
# 
:Q6_RR_memd_R_R_sft_U Rdd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00111010110 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Rdd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    Rdd_4_0 = *:8 EA;
}

# 
# Rdd=memd(gp+#u16:3)
# 01001ii1110iiiiiPPiiiiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = (Constant_extended ? (0) : GP) + imm_u;
# Rdd = *EA;
# 
:Q6_RR_memd_gp_U_6_3 Rdd_4_0, u16
        is bits_31_27=0b01001 & u16_26_25 & bits_24_21=0b1110 & u16_20_16 & u16_13_5 & Rdd_4_0
            [u16 = (u16_26_25 << 3) | (u16_20_16 << 5) | (u16_13_5 << 10);] {
    local EA:4;
    local res_constExtend:4;
    local arg_constExtend:4 = constExtend();
    if ((arg_constExtend != 0)) goto <if_arg_constExtend_0>;
    res_constExtend = $(GP);
    goto <endif_arg_constExtend_0>;
    <if_arg_constExtend_0>
    res_constExtend = 0;
    <endif_arg_constExtend_0>
    EA = (res_constExtend + u16);
    Rdd_4_0 = *:8 EA;
}

# 
# Rdd=memd(Rs+#s11:3)
# 10010ii1110sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# Rdd = *EA;
# 
:Q6_RR_memd_R_S_1_3 Rdd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b1110 & Rs_20_16 & s11_13_5 & Rdd_4_0
            [s11 = (s11_26_25 << 3) | (s11_13_5 << 5);] {
    local EA:4;
    EA = (Rs_20_16 + s11);
    Rdd_4_0 = *:8 EA;
}

# 
# Rdd=memd(Rx++#s4:3:circ(Mu))
# 10011001110xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# Rdd = *EA;
# 
:Q6_RR_memd_R_inc_S_circ_M Rdd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011001110 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 3);] {
    local EA:4;
    local arg_s4:4 = s4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    Rdd_4_0 = *:8 EA;
}

# 
# Rdd=memd(Rx++I:circ(Mu))
# 10011001110xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 3, MuV);
# Rdd = *EA;
# 
:Q6_RR_memd_R_incI_circ_M Rdd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011001110 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rdd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 3), Mu_13_13);
    Rdd_4_0 = *:8 EA;
}

# 
# Rdd=memd(Re=#U6)
# 10011011110eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# Rdd = *EA;
# Re = imm_U;
# 
:Q6_RR_memd_R_U Rdd_4_0, Re_20_16, U6
        is bits_31_21=0b10011011110 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rdd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    EA = U6;
    Rdd_4_0 = *:8 EA;
    Re_20_16 = U6;
}

# 
# Rdd=memd(Rx++#s4:3)
# 10011011110xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# Rdd = *EA;
# 
:Q6_RR_memd_R_inc_S Rdd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011110 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 3);] {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    Rdd_4_0 = *:8 EA;
}

# 
# Rdd=memd(Rt<<#u2+#U6)
# 10011101110tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# Rdd = *EA;
# 
:Q6_RR_memd_R_sft_U_U Rdd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011101110 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rdd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (U6 + (Rt_20_16 << u2));
    Rdd_4_0 = *:8 EA;
}

# 
# Rdd=memd(Rx++Mu)
# 10011101110xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# Rdd = *EA;
# 
:Q6_RR_memd_R_inc_M Rdd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011101110 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rdd_4_0 {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rdd_4_0 = *:8 EA;
}

# 
# Rdd=memd(Rx++Mu:brev)
# 10011111110xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# Rdd = *EA;
# 
:Q6_RR_memd_R_inc_M_brev Rdd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011111110 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rdd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rdd_4_0 = *:8 EA;
}

# 
# if (Pv) Rdd=memd(Rs+Rt<<#u2)
# 00110000110sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_RR_memd_R_R_sft_U Pv_6_5, Rdd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110000110 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rdd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (Pv_6_5[0, 1]) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (!Pv) Rdd=memd(Rs+Rt<<#u2)
# 00110001110sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_RR_memd_R_R_sft_U Pv_6_5, Rdd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110001110 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rdd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!Pv_6_5[0, 1])) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (Pv.new) Rdd=memd(Rs+Rt<<#u2)
# 00110010110sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv.new[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_RR_memd_R_R_sft_U Pv_6_5, Rdd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110010110 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rdd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pv.new) Rdd=memd(Rs+Rt<<#u2)
# 00110011110sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv.new[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_RR_memd_R_R_sft_U Pv_6_5, Rdd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110011110 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rdd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rdd=memd(Rs+#u6:3)
# 01000001110sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_RR_memd_R_U Pt_12_11, Rdd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000001110 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rdd_4_0
            [u6 = (u6_10_5 << 3);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if (Pt_12_11[0, 1]) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (Pt.new) Rdd=memd(Rs+#u6:3)
# 01000011110sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt.new[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_RR_memd_R_U Pt_12_11, Rdd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000011110 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rdd_4_0
            [u6 = (u6_10_5 << 3);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt) Rdd=memd(Rs+#u6:3)
# 01000101110sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_RR_memd_R_U Pt_12_11, Rdd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000101110 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rdd_4_0
            [u6 = (u6_10_5 << 3);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if ((!Pt_12_11[0, 1])) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (!Pt.new) Rdd=memd(Rs+#u6:3)
# 01000111110sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt.new[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_RR_memd_R_U Pt_12_11, Rdd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000111110 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rdd_4_0
            [u6 = (u6_10_5 << 3);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rdd=memd(Rx++#s4:3)
# 10011011110xxxxxPP100ttiiiiddddd
# 
# EA = Rx;
# if (Pt[0]) {
#     Rx = Rx + imm_s;
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_RR_memd_R_inc_S Pt_10_9, Rdd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011110 & Rx_20_16 & bits_13_11=0b100 & Pt_10_9 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 3);] {
    local EA:4;
    EA = Rx_20_16;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rdd_4_0 = *:8 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rdd=memd(Rx++#s4:3)
# 10011011110xxxxxPP101ttiiiiddddd
# 
# EA = Rx;
# if (!Pt[0]) {
#     Rx = Rx + imm_s;
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_RR_memd_R_inc_S Pt_10_9, Rdd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011110 & Rx_20_16 & bits_13_11=0b101 & Pt_10_9 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 3);] {
    local EA:4;
    EA = Rx_20_16;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rdd_4_0 = *:8 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rdd=memd(Rx++#s4:3)
# 10011011110xxxxxPP110ttiiiiddddd
# 
# EA = Rx;
# if (Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_RR_memd_R_inc_S Pt_10_9, Rdd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011110 & Rx_20_16 & bits_13_11=0b110 & Pt_10_9 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 3);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rdd_4_0 = *:8 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rdd=memd(Rx++#s4:3)
# 10011011110xxxxxPP111ttiiiiddddd
# 
# EA = Rx;
# if (!Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_RR_memd_R_inc_S Pt_10_9, Rdd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011110 & Rx_20_16 & bits_13_11=0b111 & Pt_10_9 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 3);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rdd_4_0 = *:8 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rdd=memd(#u6)
# 10011111110iiiiiPP100tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_RR_memd_U Pt_10_9, Rdd_4_0, u6
        is bits_31_21=0b10011111110 & u6_20_16 & bits_13_11=0b100 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rdd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rdd=memd(#u6)
# 10011111110iiiiiPP101tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_RR_memd_U Pt_10_9, Rdd_4_0, u6
        is bits_31_21=0b10011111110 & u6_20_16 & bits_13_11=0b101 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rdd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rdd=memd(#u6)
# 10011111110iiiiiPP110tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt.new[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_RR_memd_U Pt_10_9, Rdd_4_0, u6
        is bits_31_21=0b10011111110 & u6_20_16 & bits_13_11=0b110 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rdd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rdd=memd(#u6)
# 10011111110iiiiiPP111tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt.new[0]) {
#     Rdd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_RR_memd_U Pt_10_9, Rdd_4_0, u6
        is bits_31_21=0b10011111110 & u6_20_16 & bits_13_11=0b111 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rdd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rdd_4_0 = *:8 EA;
    <endif_new_new_0_1>
}

# 
# Rd=memb(Rs+Rt<<#u2)
# 00111010000sssssPPittttti--ddddd
# 
# EA = Rs + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memb_R_R_sft_U Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00111010000 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memb(gp+#u16:0)
# 01001ii1000iiiiiPPiiiiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = (Constant_extended ? (0) : GP) + imm_u;
# Rd = *EA;
# 
:Q6_R_memb_gp_U_6_0 Rd_4_0, u16
        is bits_31_27=0b01001 & u16_26_25 & bits_24_21=0b1000 & u16_20_16 & u16_13_5 & Rd_4_0
            [u16 = (u16_26_25 << 0) | (u16_20_16 << 2) | (u16_13_5 << 7);] {
    local EA:4;
    local res_constExtend:4;
    local arg_constExtend:4 = constExtend();
    if ((arg_constExtend != 0)) goto <if_arg_constExtend_0>;
    res_constExtend = $(GP);
    goto <endif_arg_constExtend_0>;
    <if_arg_constExtend_0>
    res_constExtend = 0;
    <endif_arg_constExtend_0>
    EA = (res_constExtend + u16);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memb(Rs+#s11:0)
# 10010ii1000sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# Rd = *EA;
# 
:Q6_R_memb_R_S_1_0 Rd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b1000 & Rs_20_16 & s11_13_5 & Rd_4_0
            [s11 = (s11_26_25 << 0) | (s11_13_5 << 2);] {
    local EA:4;
    EA = (Rs_20_16 + s11);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memb(Rx++#s4:0:circ(Mu))
# 10011001000xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# Rd = *EA;
# 
:Q6_R_memb_R_inc_S_circ_M Rd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011001000 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    local arg_s4:4 = s4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memb(Rx++I:circ(Mu))
# 10011001000xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 0, MuV);
# Rd = *EA;
# 
:Q6_R_memb_R_incI_circ_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011001000 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 0), Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memb(Re=#U6)
# 10011011000eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# Rd = *EA;
# Re = imm_U;
# 
:Q6_R_memb_R_U Rd_4_0, Re_20_16, U6
        is bits_31_21=0b10011011000 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    EA = U6;
    Rd_4_0 = *:4 EA;
    Re_20_16 = U6;
}

# 
# Rd=memb(Rx++#s4:0)
# 10011011000xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# Rd = *EA;
# 
:Q6_R_memb_R_inc_S Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011000 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memb(Rt<<#u2+#U6)
# 10011101000tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memb_R_sft_U_U Rd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011101000 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (U6 + (Rt_20_16 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memb(Rx++Mu)
# 10011101000xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memb_R_inc_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011101000 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memb(Rx++Mu:brev)
# 10011111000xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memb_R_inc_M_brev Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011111000 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# if (Pv) Rd=memb(Rs+Rt<<#u2)
# 00110000000sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memb_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110000000 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (Pv_6_5[0, 1]) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (!Pv) Rd=memb(Rs+Rt<<#u2)
# 00110001000sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memb_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110001000 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!Pv_6_5[0, 1])) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (Pv.new) Rd=memb(Rs+Rt<<#u2)
# 00110010000sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memb_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110010000 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pv.new) Rd=memb(Rs+Rt<<#u2)
# 00110011000sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memb_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110011000 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memb(Rs+#u6:0)
# 01000001000sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memb_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000001000 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 0);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if (Pt_12_11[0, 1]) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (Pt.new) Rd=memb(Rs+#u6:0)
# 01000011000sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memb_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000011000 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 0);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt) Rd=memb(Rs+#u6:0)
# 01000101000sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memb_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000101000 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 0);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if ((!Pt_12_11[0, 1])) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (!Pt.new) Rd=memb(Rs+#u6:0)
# 01000111000sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memb_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000111000 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 0);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memb(Rx++#s4:0)
# 10011011000xxxxxPP100ttiiiiddddd
# 
# EA = Rx;
# if (Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memb_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011000 & Rx_20_16 & bits_13_11=0b100 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    EA = Rx_20_16;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memb(Rx++#s4:0)
# 10011011000xxxxxPP101ttiiiiddddd
# 
# EA = Rx;
# if (!Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memb_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011000 & Rx_20_16 & bits_13_11=0b101 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    EA = Rx_20_16;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memb(Rx++#s4:0)
# 10011011000xxxxxPP110ttiiiiddddd
# 
# EA = Rx;
# if (Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memb_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011000 & Rx_20_16 & bits_13_11=0b110 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memb(Rx++#s4:0)
# 10011011000xxxxxPP111ttiiiiddddd
# 
# EA = Rx;
# if (!Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memb_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011000 & Rx_20_16 & bits_13_11=0b111 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memb(#u6)
# 10011111000iiiiiPP100tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memb_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111000 & u6_20_16 & bits_13_11=0b100 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memb(#u6)
# 10011111000iiiiiPP101tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memb_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111000 & u6_20_16 & bits_13_11=0b101 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memb(#u6)
# 10011111000iiiiiPP110tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memb_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111000 & u6_20_16 & bits_13_11=0b110 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memb(#u6)
# 10011111000iiiiiPP111tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memb_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111000 & u6_20_16 & bits_13_11=0b111 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# Ryy=memb_fifo(Rs+#s11:0)
# 10010ii0100sssssPPiiiiiiiiiyyyyy
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# tmpV = *EA;
# Ryy = (Ryy >> 8) | (tmpV << 56);
# 
:Q6_RR_memb_fifo_R_S_1_0 Ryy_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b0100 & Rs_20_16 & s11_13_5 & Ryy_4_0
            [s11 = (s11_26_25 << 0) | (s11_13_5 << 2);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + s11);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 8) | zext((tmp << 56)));
}

# 
# Ryy=memb_fifo(Rx++#s4:0:circ(Mu))
# 10011000100xxxxxPPu0--0iiiiyyyyy
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# tmpV = *EA;
# Ryy = (Ryy >> 8) | (tmpV << 56);
# 
:Q6_RR_memb_fifo_R_inc_S_circ_M Ryy_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011000100 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Ryy_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    local arg_s4:4 = s4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 8) | zext((tmp << 56)));
}

# 
# Ryy=memb_fifo(Rx++I:circ(Mu))
# 10011000100xxxxxPPu0--1-0--yyyyy
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 0, MuV);
# tmpV = *EA;
# Ryy = (Ryy >> 8) | (tmpV << 56);
# 
:Q6_RR_memb_fifo_R_incI_circ_M Ryy_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011000100 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Ryy_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 0), Mu_13_13);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 8) | zext((tmp << 56)));
}

# 
# Ryy=memb_fifo(Re=#U6)
# 10011010100eeeeePP01IIII-IIyyyyy
# 
# apply_extension(imm_U);
# EA = imm_U;
# tmpV = *EA;
# Ryy = (Ryy >> 8) | (tmpV << 56);
# Re = imm_U;
# 
:Q6_RR_memb_fifo_R_U Ryy_4_0, Re_20_16, U6
        is bits_31_21=0b10011010100 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Ryy_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    local tmp:4;
    EA = U6;
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 8) | zext((tmp << 56)));
    Re_20_16 = U6;
}

# 
# Ryy=memb_fifo(Rx++#s4:0)
# 10011010100xxxxxPP00---iiiiyyyyy
# 
# EA = Rx;
# Rx = Rx + imm_s;
# tmpV = *EA;
# Ryy = (Ryy >> 8) | (tmpV << 56);
# 
:Q6_RR_memb_fifo_R_inc_S Ryy_4_0, Rx_20_16, s4
        is bits_31_21=0b10011010100 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Ryy_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 8) | zext((tmp << 56)));
}

# 
# Ryy=memb_fifo(Rt<<#u2+#U6)
# 10011100100tttttPPi1IIIIiIIyyyyy
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# tmpV = *EA;
# Ryy = (Ryy >> 8) | (tmpV << 56);
# 
:Q6_RR_memb_fifo_R_sft_U_U Ryy_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011100100 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Ryy_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (U6 + (Rt_20_16 << u2));
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 8) | zext((tmp << 56)));
}

# 
# Ryy=memb_fifo(Rx++Mu)
# 10011100100xxxxxPPu0----0--yyyyy
# 
# EA = Rx;
# Rx = Rx + MuV;
# tmpV = *EA;
# Ryy = (Ryy >> 8) | (tmpV << 56);
# 
:Q6_RR_memb_fifo_R_inc_M Ryy_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011100100 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Ryy_4_0 {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 8) | zext((tmp << 56)));
}

# 
# Ryy=memb_fifo(Rx++Mu:brev)
# 10011110100xxxxxPPu0----0--yyyyy
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# tmpV = *EA;
# Ryy = (Ryy >> 8) | (tmpV << 56);
# 
:Q6_RR_memb_fifo_R_inc_M_brev Ryy_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011110100 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Ryy_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    local tmp:4;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 8) | zext((tmp << 56)));
}

# 
# Ryy=memh_fifo(Rs+#s11:1)
# 10010ii0010sssssPPiiiiiiiiiyyyyy
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# tmpV = *EA;
# Ryy = (Ryy >> 16) | (tmpV << 48);
# 
:Q6_RR_memh_fifo_R_S_1_1 Ryy_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b0010 & Rs_20_16 & s11_13_5 & Ryy_4_0
            [s11 = (s11_26_25 << 1) | (s11_13_5 << 3);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + s11);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 16) | zext((tmp << 48)));
}

# 
# Ryy=memh_fifo(Rx++#s4:1:circ(Mu))
# 10011000010xxxxxPPu0--0iiiiyyyyy
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# tmpV = *EA;
# Ryy = (Ryy >> 16) | (tmpV << 48);
# 
:Q6_RR_memh_fifo_R_inc_S_circ_M Ryy_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011000010 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Ryy_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local arg_s4:4 = s4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 16) | zext((tmp << 48)));
}

# 
# Ryy=memh_fifo(Rx++I:circ(Mu))
# 10011000010xxxxxPPu0--1-0--yyyyy
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 1, MuV);
# tmpV = *EA;
# Ryy = (Ryy >> 16) | (tmpV << 48);
# 
:Q6_RR_memh_fifo_R_incI_circ_M Ryy_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011000010 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Ryy_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 1), Mu_13_13);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 16) | zext((tmp << 48)));
}

# 
# Ryy=memh_fifo(Re=#U6)
# 10011010010eeeeePP01IIII-IIyyyyy
# 
# apply_extension(imm_U);
# EA = imm_U;
# tmpV = *EA;
# Ryy = (Ryy >> 16) | (tmpV << 48);
# Re = imm_U;
# 
:Q6_RR_memh_fifo_R_U Ryy_4_0, Re_20_16, U6
        is bits_31_21=0b10011010010 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Ryy_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    local tmp:4;
    EA = U6;
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 16) | zext((tmp << 48)));
    Re_20_16 = U6;
}

# 
# Ryy=memh_fifo(Rx++#s4:1)
# 10011010010xxxxxPP00---iiiiyyyyy
# 
# EA = Rx;
# Rx = Rx + imm_s;
# tmpV = *EA;
# Ryy = (Ryy >> 16) | (tmpV << 48);
# 
:Q6_RR_memh_fifo_R_inc_S Ryy_4_0, Rx_20_16, s4
        is bits_31_21=0b10011010010 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Ryy_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 16) | zext((tmp << 48)));
}

# 
# Ryy=memh_fifo(Rt<<#u2+#U6)
# 10011100010tttttPPi1IIIIiIIyyyyy
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# tmpV = *EA;
# Ryy = (Ryy >> 16) | (tmpV << 48);
# 
:Q6_RR_memh_fifo_R_sft_U_U Ryy_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011100010 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Ryy_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (U6 + (Rt_20_16 << u2));
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 16) | zext((tmp << 48)));
}

# 
# Ryy=memh_fifo(Rx++Mu)
# 10011100010xxxxxPPu0----0--yyyyy
# 
# EA = Rx;
# Rx = Rx + MuV;
# tmpV = *EA;
# Ryy = (Ryy >> 16) | (tmpV << 48);
# 
:Q6_RR_memh_fifo_R_inc_M Ryy_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011100010 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Ryy_4_0 {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 16) | zext((tmp << 48)));
}

# 
# Ryy=memh_fifo(Rx++Mu:brev)
# 10011110010xxxxxPPu0----0--yyyyy
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# tmpV = *EA;
# Ryy = (Ryy >> 16) | (tmpV << 48);
# 
:Q6_RR_memh_fifo_R_inc_M_brev Ryy_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011110010 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Ryy_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    local tmp:4;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    Ryy_4_0 = ((Ryy_4_0 >> 16) | zext((tmp << 48)));
}

# 
# Rd=memh(Rs+Rt<<#u2)
# 00111010010sssssPPittttti--ddddd
# 
# EA = Rs + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memh_R_R_sft_U Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00111010010 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memh(gp+#u16:1)
# 01001ii1010iiiiiPPiiiiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = (Constant_extended ? (0) : GP) + imm_u;
# Rd = *EA;
# 
:Q6_R_memh_gp_U_6_1 Rd_4_0, u16
        is bits_31_27=0b01001 & u16_26_25 & bits_24_21=0b1010 & u16_20_16 & u16_13_5 & Rd_4_0
            [u16 = (u16_26_25 << 1) | (u16_20_16 << 3) | (u16_13_5 << 8);] {
    local EA:4;
    local res_constExtend:4;
    local arg_constExtend:4 = constExtend();
    if ((arg_constExtend != 0)) goto <if_arg_constExtend_0>;
    res_constExtend = $(GP);
    goto <endif_arg_constExtend_0>;
    <if_arg_constExtend_0>
    res_constExtend = 0;
    <endif_arg_constExtend_0>
    EA = (res_constExtend + u16);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memh(Rs+#s11:1)
# 10010ii1010sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# Rd = *EA;
# 
:Q6_R_memh_R_S_1_1 Rd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b1010 & Rs_20_16 & s11_13_5 & Rd_4_0
            [s11 = (s11_26_25 << 1) | (s11_13_5 << 3);] {
    local EA:4;
    EA = (Rs_20_16 + s11);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memh(Rx++#s4:1:circ(Mu))
# 10011001010xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# Rd = *EA;
# 
:Q6_R_memh_R_inc_S_circ_M Rd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011001010 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local arg_s4:4 = s4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memh(Rx++I:circ(Mu))
# 10011001010xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 1, MuV);
# Rd = *EA;
# 
:Q6_R_memh_R_incI_circ_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011001010 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 1), Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memh(Re=#U6)
# 10011011010eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# Rd = *EA;
# Re = imm_U;
# 
:Q6_R_memh_R_U Rd_4_0, Re_20_16, U6
        is bits_31_21=0b10011011010 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    EA = U6;
    Rd_4_0 = *:4 EA;
    Re_20_16 = U6;
}

# 
# Rd=memh(Rx++#s4:1)
# 10011011010xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# Rd = *EA;
# 
:Q6_R_memh_R_inc_S Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011010 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memh(Rt<<#u2+#U6)
# 10011101010tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memh_R_sft_U_U Rd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011101010 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (U6 + (Rt_20_16 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memh(Rx++Mu)
# 10011101010xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memh_R_inc_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011101010 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memh(Rx++Mu:brev)
# 10011111010xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memh_R_inc_M_brev Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011111010 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# if (Pv) Rd=memh(Rs+Rt<<#u2)
# 00110000010sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memh_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110000010 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (Pv_6_5[0, 1]) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (!Pv) Rd=memh(Rs+Rt<<#u2)
# 00110001010sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memh_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110001010 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!Pv_6_5[0, 1])) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (Pv.new) Rd=memh(Rs+Rt<<#u2)
# 00110010010sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memh_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110010010 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pv.new) Rd=memh(Rs+Rt<<#u2)
# 00110011010sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memh_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110011010 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memh(Rs+#u6:1)
# 01000001010sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memh_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000001010 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if (Pt_12_11[0, 1]) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (Pt.new) Rd=memh(Rs+#u6:1)
# 01000011010sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memh_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000011010 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt) Rd=memh(Rs+#u6:1)
# 01000101010sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memh_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000101010 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if ((!Pt_12_11[0, 1])) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (!Pt.new) Rd=memh(Rs+#u6:1)
# 01000111010sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memh_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000111010 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memh(Rx++#s4:1)
# 10011011010xxxxxPP100ttiiiiddddd
# 
# EA = Rx;
# if (Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memh_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011010 & Rx_20_16 & bits_13_11=0b100 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    EA = Rx_20_16;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memh(Rx++#s4:1)
# 10011011010xxxxxPP101ttiiiiddddd
# 
# EA = Rx;
# if (!Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memh_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011010 & Rx_20_16 & bits_13_11=0b101 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    EA = Rx_20_16;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memh(Rx++#s4:1)
# 10011011010xxxxxPP110ttiiiiddddd
# 
# EA = Rx;
# if (Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memh_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011010 & Rx_20_16 & bits_13_11=0b110 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memh(Rx++#s4:1)
# 10011011010xxxxxPP111ttiiiiddddd
# 
# EA = Rx;
# if (!Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memh_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011010 & Rx_20_16 & bits_13_11=0b111 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memh(#u6)
# 10011111010iiiiiPP100tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memh_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111010 & u6_20_16 & bits_13_11=0b100 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memh(#u6)
# 10011111010iiiiiPP101tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memh_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111010 & u6_20_16 & bits_13_11=0b101 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memh(#u6)
# 10011111010iiiiiPP110tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memh_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111010 & u6_20_16 & bits_13_11=0b110 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memh(#u6)
# 10011111010iiiiiPP111tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memh_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111010 & u6_20_16 & bits_13_11=0b111 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# Rd=memub(Rs+Rt<<#u2)
# 00111010001sssssPPittttti--ddddd
# 
# EA = Rs + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memub_R_R_sft_U Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00111010001 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memub(gp+#u16:0)
# 01001ii1001iiiiiPPiiiiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = (Constant_extended ? (0) : GP) + imm_u;
# Rd = *EA;
# 
:Q6_R_memub_gp_U_6_0 Rd_4_0, u16
        is bits_31_27=0b01001 & u16_26_25 & bits_24_21=0b1001 & u16_20_16 & u16_13_5 & Rd_4_0
            [u16 = (u16_26_25 << 0) | (u16_20_16 << 2) | (u16_13_5 << 7);] {
    local EA:4;
    local res_constExtend:4;
    local arg_constExtend:4 = constExtend();
    if ((arg_constExtend != 0)) goto <if_arg_constExtend_0>;
    res_constExtend = $(GP);
    goto <endif_arg_constExtend_0>;
    <if_arg_constExtend_0>
    res_constExtend = 0;
    <endif_arg_constExtend_0>
    EA = (res_constExtend + u16);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memub(Rs+#s11:0)
# 10010ii1001sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# Rd = *EA;
# 
:Q6_R_memub_R_S_1_0 Rd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b1001 & Rs_20_16 & s11_13_5 & Rd_4_0
            [s11 = (s11_26_25 << 0) | (s11_13_5 << 2);] {
    local EA:4;
    EA = (Rs_20_16 + s11);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memub(Rx++#s4:0:circ(Mu))
# 10011001001xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# Rd = *EA;
# 
:Q6_R_memub_R_inc_S_circ_M Rd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011001001 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    local arg_s4:4 = s4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memub(Rx++I:circ(Mu))
# 10011001001xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 0, MuV);
# Rd = *EA;
# 
:Q6_R_memub_R_incI_circ_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011001001 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 0), Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memub(Re=#U6)
# 10011011001eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# Rd = *EA;
# Re = imm_U;
# 
:Q6_R_memub_R_U Rd_4_0, Re_20_16, U6
        is bits_31_21=0b10011011001 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    EA = U6;
    Rd_4_0 = *:4 EA;
    Re_20_16 = U6;
}

# 
# Rd=memub(Rx++#s4:0)
# 10011011001xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# Rd = *EA;
# 
:Q6_R_memub_R_inc_S Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011001 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memub(Rt<<#u2+#U6)
# 10011101001tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memub_R_sft_U_U Rd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011101001 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (U6 + (Rt_20_16 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memub(Rx++Mu)
# 10011101001xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memub_R_inc_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011101001 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memub(Rx++Mu:brev)
# 10011111001xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memub_R_inc_M_brev Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011111001 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# if (Pv) Rd=memub(Rs+Rt<<#u2)
# 00110000001sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memub_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110000001 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (Pv_6_5[0, 1]) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (!Pv) Rd=memub(Rs+Rt<<#u2)
# 00110001001sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memub_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110001001 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!Pv_6_5[0, 1])) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (Pv.new) Rd=memub(Rs+Rt<<#u2)
# 00110010001sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memub_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110010001 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pv.new) Rd=memub(Rs+Rt<<#u2)
# 00110011001sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memub_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110011001 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memub(Rs+#u6:0)
# 01000001001sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memub_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000001001 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 0);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if (Pt_12_11[0, 1]) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (Pt.new) Rd=memub(Rs+#u6:0)
# 01000011001sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memub_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000011001 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 0);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt) Rd=memub(Rs+#u6:0)
# 01000101001sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memub_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000101001 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 0);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if ((!Pt_12_11[0, 1])) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (!Pt.new) Rd=memub(Rs+#u6:0)
# 01000111001sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memub_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000111001 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 0);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memub(Rx++#s4:0)
# 10011011001xxxxxPP100ttiiiiddddd
# 
# EA = Rx;
# if (Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memub_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011001 & Rx_20_16 & bits_13_11=0b100 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    EA = Rx_20_16;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memub(Rx++#s4:0)
# 10011011001xxxxxPP101ttiiiiddddd
# 
# EA = Rx;
# if (!Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memub_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011001 & Rx_20_16 & bits_13_11=0b101 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    EA = Rx_20_16;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memub(Rx++#s4:0)
# 10011011001xxxxxPP110ttiiiiddddd
# 
# EA = Rx;
# if (Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memub_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011001 & Rx_20_16 & bits_13_11=0b110 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memub(Rx++#s4:0)
# 10011011001xxxxxPP111ttiiiiddddd
# 
# EA = Rx;
# if (!Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memub_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011001 & Rx_20_16 & bits_13_11=0b111 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 0);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memub(#u6)
# 10011111001iiiiiPP100tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memub_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111001 & u6_20_16 & bits_13_11=0b100 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memub(#u6)
# 10011111001iiiiiPP101tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memub_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111001 & u6_20_16 & bits_13_11=0b101 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memub(#u6)
# 10011111001iiiiiPP110tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memub_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111001 & u6_20_16 & bits_13_11=0b110 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memub(#u6)
# 10011111001iiiiiPP111tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memub_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111001 & u6_20_16 & bits_13_11=0b111 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# Rd=memuh(Rs+Rt<<#u2)
# 00111010011sssssPPittttti--ddddd
# 
# EA = Rs + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memuh_R_R_sft_U Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00111010011 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memuh(gp+#u16:1)
# 01001ii1011iiiiiPPiiiiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = (Constant_extended ? (0) : GP) + imm_u;
# Rd = *EA;
# 
:Q6_R_memuh_gp_U_6_1 Rd_4_0, u16
        is bits_31_27=0b01001 & u16_26_25 & bits_24_21=0b1011 & u16_20_16 & u16_13_5 & Rd_4_0
            [u16 = (u16_26_25 << 1) | (u16_20_16 << 3) | (u16_13_5 << 8);] {
    local EA:4;
    local res_constExtend:4;
    local arg_constExtend:4 = constExtend();
    if ((arg_constExtend != 0)) goto <if_arg_constExtend_0>;
    res_constExtend = $(GP);
    goto <endif_arg_constExtend_0>;
    <if_arg_constExtend_0>
    res_constExtend = 0;
    <endif_arg_constExtend_0>
    EA = (res_constExtend + u16);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memuh(Rs+#s11:1)
# 10010ii1011sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# Rd = *EA;
# 
:Q6_R_memuh_R_S_1_1 Rd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b1011 & Rs_20_16 & s11_13_5 & Rd_4_0
            [s11 = (s11_26_25 << 1) | (s11_13_5 << 3);] {
    local EA:4;
    EA = (Rs_20_16 + s11);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memuh(Rx++#s4:1:circ(Mu))
# 10011001011xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# Rd = *EA;
# 
:Q6_R_memuh_R_inc_S_circ_M Rd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011001011 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local arg_s4:4 = s4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memuh(Rx++I:circ(Mu))
# 10011001011xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 1, MuV);
# Rd = *EA;
# 
:Q6_R_memuh_R_incI_circ_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011001011 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 1), Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memuh(Re=#U6)
# 10011011011eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# Rd = *EA;
# Re = imm_U;
# 
:Q6_R_memuh_R_U Rd_4_0, Re_20_16, U6
        is bits_31_21=0b10011011011 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    EA = U6;
    Rd_4_0 = *:4 EA;
    Re_20_16 = U6;
}

# 
# Rd=memuh(Rx++#s4:1)
# 10011011011xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# Rd = *EA;
# 
:Q6_R_memuh_R_inc_S Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011011 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memuh(Rt<<#u2+#U6)
# 10011101011tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memuh_R_sft_U_U Rd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011101011 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (U6 + (Rt_20_16 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memuh(Rx++Mu)
# 10011101011xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memuh_R_inc_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011101011 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memuh(Rx++Mu:brev)
# 10011111011xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memuh_R_inc_M_brev Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011111011 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# if (Pv) Rd=memuh(Rs+Rt<<#u2)
# 00110000011sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memuh_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110000011 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (Pv_6_5[0, 1]) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (!Pv) Rd=memuh(Rs+Rt<<#u2)
# 00110001011sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memuh_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110001011 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!Pv_6_5[0, 1])) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (Pv.new) Rd=memuh(Rs+Rt<<#u2)
# 00110010011sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memuh_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110010011 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pv.new) Rd=memuh(Rs+Rt<<#u2)
# 00110011011sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memuh_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110011011 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memuh(Rs+#u6:1)
# 01000001011sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memuh_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000001011 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if (Pt_12_11[0, 1]) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (Pt.new) Rd=memuh(Rs+#u6:1)
# 01000011011sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memuh_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000011011 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt) Rd=memuh(Rs+#u6:1)
# 01000101011sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memuh_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000101011 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if ((!Pt_12_11[0, 1])) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (!Pt.new) Rd=memuh(Rs+#u6:1)
# 01000111011sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memuh_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000111011 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memuh(Rx++#s4:1)
# 10011011011xxxxxPP100ttiiiiddddd
# 
# EA = Rx;
# if (Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memuh_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011011 & Rx_20_16 & bits_13_11=0b100 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    EA = Rx_20_16;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memuh(Rx++#s4:1)
# 10011011011xxxxxPP101ttiiiiddddd
# 
# EA = Rx;
# if (!Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memuh_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011011 & Rx_20_16 & bits_13_11=0b101 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    EA = Rx_20_16;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memuh(Rx++#s4:1)
# 10011011011xxxxxPP110ttiiiiddddd
# 
# EA = Rx;
# if (Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memuh_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011011 & Rx_20_16 & bits_13_11=0b110 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memuh(Rx++#s4:1)
# 10011011011xxxxxPP111ttiiiiddddd
# 
# EA = Rx;
# if (!Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memuh_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011011 & Rx_20_16 & bits_13_11=0b111 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memuh(#u6)
# 10011111011iiiiiPP100tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memuh_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111011 & u6_20_16 & bits_13_11=0b100 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memuh(#u6)
# 10011111011iiiiiPP101tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memuh_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111011 & u6_20_16 & bits_13_11=0b101 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memuh(#u6)
# 10011111011iiiiiPP110tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memuh_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111011 & u6_20_16 & bits_13_11=0b110 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memuh(#u6)
# 10011111011iiiiiPP111tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memuh_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111011 & u6_20_16 & bits_13_11=0b111 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# Rd=memw(Rs+Rt<<#u2)
# 00111010100sssssPPittttti--ddddd
# 
# EA = Rs + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memw_R_R_sft_U Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00111010100 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memw(gp+#u16:2)
# 01001ii1100iiiiiPPiiiiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = (Constant_extended ? (0) : GP) + imm_u;
# Rd = *EA;
# 
:Q6_R_memw_gp_U_6_2 Rd_4_0, u16
        is bits_31_27=0b01001 & u16_26_25 & bits_24_21=0b1100 & u16_20_16 & u16_13_5 & Rd_4_0
            [u16 = (u16_26_25 << 2) | (u16_20_16 << 4) | (u16_13_5 << 9);] {
    local EA:4;
    local res_constExtend:4;
    local arg_constExtend:4 = constExtend();
    if ((arg_constExtend != 0)) goto <if_arg_constExtend_0>;
    res_constExtend = $(GP);
    goto <endif_arg_constExtend_0>;
    <if_arg_constExtend_0>
    res_constExtend = 0;
    <endif_arg_constExtend_0>
    EA = (res_constExtend + u16);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memw(Rs+#s11:2)
# 10010ii1100sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# Rd = *EA;
# 
:Q6_R_memw_R_S_1_2 Rd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b1100 & Rs_20_16 & s11_13_5 & Rd_4_0
            [s11 = (s11_26_25 << 2) | (s11_13_5 << 4);] {
    local EA:4;
    EA = (Rs_20_16 + s11);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memw(Rx++#s4:2:circ(Mu))
# 10011001100xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# Rd = *EA;
# 
:Q6_R_memw_R_inc_S_circ_M Rd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011001100 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    local arg_s4:4 = s4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memw(Rx++I:circ(Mu))
# 10011001100xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 2, MuV);
# Rd = *EA;
# 
:Q6_R_memw_R_incI_circ_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011001100 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 2), Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memw(Re=#U6)
# 10011011100eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# Rd = *EA;
# Re = imm_U;
# 
:Q6_R_memw_R_U Rd_4_0, Re_20_16, U6
        is bits_31_21=0b10011011100 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    EA = U6;
    Rd_4_0 = *:4 EA;
    Re_20_16 = U6;
}

# 
# Rd=memw(Rx++#s4:2)
# 10011011100xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# Rd = *EA;
# 
:Q6_R_memw_R_inc_S Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011100 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memw(Rt<<#u2+#U6)
# 10011101100tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# Rd = *EA;
# 
:Q6_R_memw_R_sft_U_U Rd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011101100 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (U6 + (Rt_20_16 << u2));
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memw(Rx++Mu)
# 10011101100xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memw_R_inc_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011101100 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# Rd=memw(Rx++Mu:brev)
# 10011111100xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# Rd = *EA;
# 
:Q6_R_memw_R_inc_M_brev Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011111100 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    Rd_4_0 = *:4 EA;
}

# 
# if (Pv) Rd=memw(Rs+Rt<<#u2)
# 00110000100sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memw_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110000100 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (Pv_6_5[0, 1]) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (!Pv) Rd=memw(Rs+Rt<<#u2)
# 00110001100sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memw_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110001100 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!Pv_6_5[0, 1])) goto <if_Pv_6_5_0_1>;
    goto <endif_Pv_6_5_0_1>;
    <if_Pv_6_5_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pv_6_5_0_1>
}

# 
# if (Pv.new) Rd=memw(Rs+Rt<<#u2)
# 00110010100sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memw_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110010100 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pv.new) Rd=memw(Rs+Rt<<#u2)
# 00110011100sssssPPitttttivvddddd
# 
# EA = Rs + (Rt << imm_u);
# if (!Pv.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memw_R_R_sft_U Pv_6_5, Rd_4_0, Rs_20_16, Rt_12_8, u2
        is bits_31_21=0b00110011100 & Rs_20_16 & u2_13_13 & Rt_12_8 & u2_7_7 & Pv_6_5 & Rd_4_0
            [u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local new_new:1 = newSuffix(Pv_6_5);
    EA = (Rs_20_16 + (Rt_12_8 << u2));
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memw(Rs+#u6:2)
# 01000001100sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memw_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000001100 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 2);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if (Pt_12_11[0, 1]) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (Pt.new) Rd=memw(Rs+#u6:2)
# 01000011100sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memw_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000011100 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 2);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt) Rd=memw(Rs+#u6:2)
# 01000101100sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memw_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000101100 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 2);] {
    local EA:4;
    EA = (Rs_20_16 + u6);
    if ((!Pt_12_11[0, 1])) goto <if_Pt_12_11_0_1>;
    goto <endif_Pt_12_11_0_1>;
    <if_Pt_12_11_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_12_11_0_1>
}

# 
# if (!Pt.new) Rd=memw(Rs+#u6:2)
# 01000111100sssssPP0ttiiiiiiddddd
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memw_R_U Pt_12_11, Rd_4_0, Rs_20_16, u6
        is bits_31_21=0b01000111100 & Rs_20_16 & bits_13_13=0b0 & Pt_12_11 & u6_10_5 & Rd_4_0
            [u6 = (u6_10_5 << 2);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_12_11);
    EA = (Rs_20_16 + u6);
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memw(Rx++#s4:2)
# 10011011100xxxxxPP100ttiiiiddddd
# 
# EA = Rx;
# if (Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memw_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011100 & Rx_20_16 & bits_13_11=0b100 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    EA = Rx_20_16;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memw(Rx++#s4:2)
# 10011011100xxxxxPP101ttiiiiddddd
# 
# EA = Rx;
# if (!Pt[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memw_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011100 & Rx_20_16 & bits_13_11=0b101 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    EA = Rx_20_16;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memw(Rx++#s4:2)
# 10011011100xxxxxPP110ttiiiiddddd
# 
# EA = Rx;
# if (Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memw_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011100 & Rx_20_16 & bits_13_11=0b110 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memw(Rx++#s4:2)
# 10011011100xxxxxPP111ttiiiiddddd
# 
# EA = Rx;
# if (!Pt.new[0]) {
#     Rx = Rx + imm_s;
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memw_R_inc_S Pt_10_9, Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011011100 & Rx_20_16 & bits_13_11=0b111 & Pt_10_9 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = Rx_20_16;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rx_20_16 = (Rx_20_16 + s4);
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (Pt) Rd=memw(#u6)
# 10011111100iiiiiPP100tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_R_memw_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111100 & u6_20_16 & bits_13_11=0b100 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if (Pt_10_9[0, 1]) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (!Pt) Rd=memw(#u6)
# 10011111100iiiiiPP101tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_R_memw_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111100 & u6_20_16 & bits_13_11=0b101 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    EA = u6;
    if ((!Pt_10_9[0, 1])) goto <if_Pt_10_9_0_1>;
    goto <endif_Pt_10_9_0_1>;
    <if_Pt_10_9_0_1>
    Rd_4_0 = *:4 EA;
    <endif_Pt_10_9_0_1>
}

# 
# if (Pt.new) Rd=memw(#u6)
# 10011111100iiiiiPP110tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_R_memw_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111100 & u6_20_16 & bits_13_11=0b110 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# if (!Pt.new) Rd=memw(#u6)
# 10011111100iiiiiPP111tti1--ddddd
# 
# apply_extension(imm_u);
# EA = imm_u;
# if (!Pt.new[0]) {
#     Rd = *EA;
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_R_memw_U Pt_10_9, Rd_4_0, u6
        is bits_31_21=0b10011111100 & u6_20_16 & bits_13_11=0b111 & Pt_10_9 & u6_8_8 & bits_7_7=0b1 & Rd_4_0
            [u6 = (u6_20_16 << 0) | (u6_8_8 << 5);] {
    local EA:4;
    local new_new:1 = newSuffix(Pt_10_9);
    EA = u6;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    Rd_4_0 = *:4 EA;
    <endif_new_new_0_1>
}

# 
# Rdd=deallocframe(Rs):raw
# 10010000000sssssPP0--------ddddd
# 
# EA = Rs;
# tmp = *EA;
# Rdd = frame_unscramble(tmp);
# SP = EA + 8;
# 
:Q6_RR_deallocframe_R_raw Rdd_4_0, Rs_20_16
        is bits_31_21=0b10010000000 & Rs_20_16 & bits_13_13=0b0 & Rdd_4_0 {
    local tmp:8;
    local EA:4;
    EA = Rs_20_16;
    tmp = *:8 EA;
    Rdd_4_0 = frameUnscramble(tmp);
    $(SP) = (EA + 8);
}

# 
# Rdd=dealloc_return(Rs):raw
# 10010110000sssssPP0000-----ddddd
# 
# EA = Rs;
# tmp = *EA;
# Rdd = frame_unscramble(tmp);
# SP = EA + 8;
# PC = Rdd.w[1];
# 
:Q6_RR_dealloc_return_R_raw Rdd_4_0, Rs_20_16
        is bits_31_21=0b10010110000 & Rs_20_16 & bits_13_10=0b0000 & Rdd_4_0 {
    local tmp:8;
    local EA:4;
    local Rdd_4_0_w:4 = &Rdd_4_0;
    EA = Rs_20_16;
    tmp = *:8 EA;
    Rdd_4_0 = frameUnscramble(tmp);
    $(SP) = (EA + 8);
    $(PC) = *[register]:4 (Rdd_4_0_w + 4 * 1);
}

# 
# if (Pv.new) Rdd=dealloc_return(Rs):nt:raw
# 10010110000sssssPP0010vv---ddddd
# 
# EA = Rs;
# if (Pv.new[0]) {
#     tmp = *EA;
#     Rdd = frame_unscramble(tmp);
#     SP = EA + 8;
#     PC = Rdd.w[1];
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_RR_dealloc_return_R_nt_raw Pv_9_8, Rdd_4_0, Rs_20_16
        is bits_31_21=0b10010110000 & Rs_20_16 & bits_13_10=0b0010 & Pv_9_8 & Rdd_4_0 {
    local tmp:8;
    local EA:4;
    local new_new:1 = newSuffix(Pv_9_8);
    EA = Rs_20_16;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    tmp = *:8 EA;
    Rdd_4_0 = frameUnscramble(tmp);
    $(SP) = (EA + 8);
    $(PC) = *[register]:4 (Rdd_4_0_w + 4 * 1);
    <endif_new_new_0_1>
}

# 
# if (Pv) Rdd=dealloc_return(Rs):raw
# 10010110000sssssPP0100vv---ddddd
# 
# EA = Rs;
# if (Pv[0]) {
#     tmp = *EA;
#     Rdd = frame_unscramble(tmp);
#     SP = EA + 8;
#     PC = Rdd.w[1];
# } else {
#     NOP;
# }
# 
:Q6_if_P_RR_dealloc_return_R_raw Pv_9_8, Rdd_4_0, Rs_20_16
        is bits_31_21=0b10010110000 & Rs_20_16 & bits_13_10=0b0100 & Pv_9_8 & Rdd_4_0 {
    local tmp:8;
    local EA:4;
    EA = Rs_20_16;
    if (Pv_9_8[0, 1]) goto <if_Pv_9_8_0_1>;
    goto <endif_Pv_9_8_0_1>;
    <if_Pv_9_8_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    tmp = *:8 EA;
    Rdd_4_0 = frameUnscramble(tmp);
    $(SP) = (EA + 8);
    $(PC) = *[register]:4 (Rdd_4_0_w + 4 * 1);
    <endif_Pv_9_8_0_1>
}

# 
# if (Pv.new) Rdd=dealloc_return(Rs):t:raw
# 10010110000sssssPP0110vv---ddddd
# 
# EA = Rs;
# if (Pv.new[0]) {
#     tmp = *EA;
#     Rdd = frame_unscramble(tmp);
#     SP = EA + 8;
#     PC = Rdd.w[1];
# } else {
#     NOP;
# }
# 
:Q6_if_P_new_RR_dealloc_return_R_t_raw Pv_9_8, Rdd_4_0, Rs_20_16
        is bits_31_21=0b10010110000 & Rs_20_16 & bits_13_10=0b0110 & Pv_9_8 & Rdd_4_0 {
    local tmp:8;
    local EA:4;
    local new_new:1 = newSuffix(Pv_9_8);
    EA = Rs_20_16;
    if (new_new[0, 1]) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    tmp = *:8 EA;
    Rdd_4_0 = frameUnscramble(tmp);
    $(SP) = (EA + 8);
    $(PC) = *[register]:4 (Rdd_4_0_w + 4 * 1);
    <endif_new_new_0_1>
}

# 
# if (!Pv.new) Rdd=dealloc_return(Rs):nt:raw
# 10010110000sssssPP1010vv---ddddd
# 
# EA = Rs;
# if (!Pv.new[0]) {
#     tmp = *EA;
#     Rdd = frame_unscramble(tmp);
#     SP = EA + 8;
#     PC = Rdd.w[1];
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_RR_dealloc_return_R_nt_raw Pv_9_8, Rdd_4_0, Rs_20_16
        is bits_31_21=0b10010110000 & Rs_20_16 & bits_13_10=0b1010 & Pv_9_8 & Rdd_4_0 {
    local tmp:8;
    local EA:4;
    local new_new:1 = newSuffix(Pv_9_8);
    EA = Rs_20_16;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    tmp = *:8 EA;
    Rdd_4_0 = frameUnscramble(tmp);
    $(SP) = (EA + 8);
    $(PC) = *[register]:4 (Rdd_4_0_w + 4 * 1);
    <endif_new_new_0_1>
}

# 
# if (!Pv) Rdd=dealloc_return(Rs):raw
# 10010110000sssssPP1100vv---ddddd
# 
# EA = Rs;
# if (!Pv[0]) {
#     tmp = *EA;
#     Rdd = frame_unscramble(tmp);
#     SP = EA + 8;
#     PC = Rdd.w[1];
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_RR_dealloc_return_R_raw Pv_9_8, Rdd_4_0, Rs_20_16
        is bits_31_21=0b10010110000 & Rs_20_16 & bits_13_10=0b1100 & Pv_9_8 & Rdd_4_0 {
    local tmp:8;
    local EA:4;
    EA = Rs_20_16;
    if ((!Pv_9_8[0, 1])) goto <if_Pv_9_8_0_1>;
    goto <endif_Pv_9_8_0_1>;
    <if_Pv_9_8_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    tmp = *:8 EA;
    Rdd_4_0 = frameUnscramble(tmp);
    $(SP) = (EA + 8);
    $(PC) = *[register]:4 (Rdd_4_0_w + 4 * 1);
    <endif_Pv_9_8_0_1>
}

# 
# if (!Pv.new) Rdd=dealloc_return(Rs):t:raw
# 10010110000sssssPP1110vv---ddddd
# 
# EA = Rs;
# if (!Pv.new[0]) {
#     tmp = *EA;
#     Rdd = frame_unscramble(tmp);
#     SP = EA + 8;
#     PC = Rdd.w[1];
# } else {
#     NOP;
# }
# 
:Q6_if_not_P_new_RR_dealloc_return_R_t_raw Pv_9_8, Rdd_4_0, Rs_20_16
        is bits_31_21=0b10010110000 & Rs_20_16 & bits_13_10=0b1110 & Pv_9_8 & Rdd_4_0 {
    local tmp:8;
    local EA:4;
    local new_new:1 = newSuffix(Pv_9_8);
    EA = Rs_20_16;
    if ((!new_new[0, 1])) goto <if_new_new_0_1>;
    goto <endif_new_new_0_1>;
    <if_new_new_0_1>
    local Rdd_4_0_w:4 = &Rdd_4_0;
    tmp = *:8 EA;
    Rdd_4_0 = frameUnscramble(tmp);
    $(SP) = (EA + 8);
    $(PC) = *[register]:4 (Rdd_4_0_w + 4 * 1);
    <endif_new_new_0_1>
}

# 
# Rd=membh(Rs+#s11:1)
# 10010ii0001sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.b[i];
# }
# 
:Q6_R_membh_R_S_1_1 Rd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b0001 & Rs_20_16 & s11_13_5 & Rd_4_0
            [s11 = (s11_26_25 << 1) | (s11_13_5 << 3);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + s11);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=memubh(Rs+#s11:1)
# 10010ii0011sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.ub[i];
# }
# 
:Q6_R_memubh_R_S_1_1 Rd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b0011 & Rs_20_16 & s11_13_5 & Rd_4_0
            [s11 = (s11_26_25 << 1) | (s11_13_5 << 3);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + s11);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rdd=memubh(Rs+#s11:2)
# 10010ii0101sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.ub[i];
# }
# 
:Q6_RR_memubh_R_S_1_2 Rdd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b0101 & Rs_20_16 & s11_13_5 & Rdd_4_0
            [s11 = (s11_26_25 << 2) | (s11_13_5 << 4);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + s11);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rdd=membh(Rs+#s11:2)
# 10010ii0111sssssPPiiiiiiiiiddddd
# 
# apply_extension(imm_s);
# EA = Rs + imm_s;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.b[i];
# }
# 
:Q6_RR_membh_R_S_1_2 Rdd_4_0, Rs_20_16, s11
        is bits_31_27=0b10010 & s11_26_25 & bits_24_21=0b0111 & Rs_20_16 & s11_13_5 & Rdd_4_0
            [s11 = (s11_26_25 << 2) | (s11_13_5 << 4);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + s11);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rd=membh(Rx++#s4:1:circ(Mu))
# 10011000001xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.b[i];
# }
# 
:Q6_R_membh_R_inc_S_circ_M Rd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011000001 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local arg_s4:4 = s4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=membh(Rx++I:circ(Mu))
# 10011000001xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 1, MuV);
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.b[i];
# }
# 
:Q6_R_membh_R_incI_circ_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011000001 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 1), Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=memubh(Rx++#s4:1:circ(Mu))
# 10011000011xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.ub[i];
# }
# 
:Q6_R_memubh_R_inc_S_circ_M Rd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011000011 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local arg_s4:4 = s4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=memubh(Rx++I:circ(Mu))
# 10011000011xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 1, MuV);
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.ub[i];
# }
# 
:Q6_R_memubh_R_incI_circ_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011000011 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 1), Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rdd=memubh(Rx++#s4:2:circ(Mu))
# 10011000101xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.ub[i];
# }
# 
:Q6_RR_memubh_R_inc_S_circ_M Rdd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011000101 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    local arg_s4:4 = s4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rdd=memubh(Rx++I:circ(Mu))
# 10011000101xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 2, MuV);
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.ub[i];
# }
# 
:Q6_RR_memubh_R_incI_circ_M Rdd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011000101 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rdd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 2), Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rdd=membh(Rx++#s4:2:circ(Mu))
# 10011000111xxxxxPPu0--0iiiiddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, imm_s, MuV);
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.b[i];
# }
# 
:Q6_RR_membh_R_inc_S_circ_M Rdd_4_0, Rx_20_16, s4, Mu_13_13
        is bits_31_21=0b10011000111 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b0 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    local arg_s4:4 = s4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, arg_s4, Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rdd=membh(Rx++I:circ(Mu))
# 10011000111xxxxxPPu0--1-0--ddddd
# 
# EA = Rx;
# Rx = circ_add(Rx, I << 2, MuV);
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.b[i];
# }
# 
:Q6_RR_membh_R_incI_circ_M Rdd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011000111 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_9_9=0b1 & bits_7_7=0b0 & Rdd_4_0 {
    local EA:4;
    local I:4 = (((Mu_13_13 >> 28) & 0xf) << 7) | ((Mu_13_13 >> 17) & 0x7f);
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = circAdd(Rx_20_16, (I << 2), Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rd=membh(Re=#U6)
# 10011010001eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.b[i];
# }
# 
# Re = imm_U;
# 
:Q6_R_membh_R_U Rd_4_0, Re_20_16, U6
        is bits_31_21=0b10011010001 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    local tmp:4;
    EA = U6;
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
    Re_20_16 = U6;
}

# 
# Rd=membh(Rx++#s4:1)
# 10011010001xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.b[i];
# }
# 
:Q6_R_membh_R_inc_S Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011010001 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=memubh(Re=#U6)
# 10011010011eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.ub[i];
# }
# 
# Re = imm_U;
# 
:Q6_R_memubh_R_U Rd_4_0, Re_20_16, U6
        is bits_31_21=0b10011010011 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    local tmp:4;
    EA = U6;
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
    Re_20_16 = U6;
}

# 
# Rd=memubh(Rx++#s4:1)
# 10011010011xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.ub[i];
# }
# 
:Q6_R_memubh_R_inc_S Rd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011010011 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rd_4_0
            [s4 = (s4_8_5 << 1);] {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rdd=memubh(Re=#U6)
# 10011010101eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.ub[i];
# }
# 
# Re = imm_U;
# 
:Q6_RR_memubh_R_U Rdd_4_0, Re_20_16, U6
        is bits_31_21=0b10011010101 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rdd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    local tmp:4;
    EA = U6;
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
    Re_20_16 = U6;
}

# 
# Rdd=memubh(Rx++#s4:2)
# 10011010101xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.ub[i];
# }
# 
:Q6_RR_memubh_R_inc_S Rdd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011010101 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rdd=membh(Re=#U6)
# 10011010111eeeeePP01IIII-IIddddd
# 
# apply_extension(imm_U);
# EA = imm_U;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.b[i];
# }
# 
# Re = imm_U;
# 
:Q6_RR_membh_R_U Rdd_4_0, Re_20_16, U6
        is bits_31_21=0b10011010111 & Re_20_16 & bits_13_12=0b01 & U6_11_8 & U6_6_5 & Rdd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4);] {
    local EA:4;
    local tmp:4;
    EA = U6;
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
    Re_20_16 = U6;
}

# 
# Rdd=membh(Rx++#s4:2)
# 10011010111xxxxxPP00---iiiiddddd
# 
# EA = Rx;
# Rx = Rx + imm_s;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.b[i];
# }
# 
:Q6_RR_membh_R_inc_S Rdd_4_0, Rx_20_16, s4
        is bits_31_21=0b10011010111 & Rx_20_16 & bits_13_12=0b00 & s4_8_5 & Rdd_4_0
            [s4 = (s4_8_5 << 2);] {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + s4);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rd=membh(Rt<<#u2+#U6)
# 10011100001tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.b[i];
# }
# 
:Q6_R_membh_R_sft_U_U Rd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011100001 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (U6 + (Rt_20_16 << u2));
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=membh(Rx++Mu)
# 10011100001xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.b[i];
# }
# 
:Q6_R_membh_R_inc_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011100001 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=memubh(Rt<<#u2+#U6)
# 10011100011tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.ub[i];
# }
# 
:Q6_R_memubh_R_sft_U_U Rd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011100011 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (U6 + (Rt_20_16 << u2));
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=memubh(Rx++Mu)
# 10011100011xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.ub[i];
# }
# 
:Q6_R_memubh_R_inc_M Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011100011 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rdd=memubh(Rt<<#u2+#U6)
# 10011100101tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.ub[i];
# }
# 
:Q6_RR_memubh_R_sft_U_U Rdd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011100101 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rdd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (U6 + (Rt_20_16 << u2));
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rdd=memubh(Rx++Mu)
# 10011100101xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.ub[i];
# }
# 
:Q6_RR_memubh_R_inc_M Rdd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011100101 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rdd_4_0 {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rdd=membh(Rt<<#u2+#U6)
# 10011100111tttttPPi1IIIIiIIddddd
# 
# apply_extension(imm_U);
# EA = imm_U + (Rt << imm_u);
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.b[i];
# }
# 
:Q6_RR_membh_R_sft_U_U Rdd_4_0, Rt_20_16, u2, U6
        is bits_31_21=0b10011100111 & Rt_20_16 & u2_13_13 & bits_12_12=0b1 & U6_11_8 & u2_7_7 & U6_6_5 & Rdd_4_0
            [U6 = (U6_11_8 << 0) | (U6_6_5 << 4); u2 = (u2_13_13 << 0) | (u2_7_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (U6 + (Rt_20_16 << u2));
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rdd=membh(Rx++Mu)
# 10011100111xxxxxPPu0----0--ddddd
# 
# EA = Rx;
# Rx = Rx + MuV;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.b[i];
# }
# 
:Q6_RR_membh_R_inc_M Rdd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011100111 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rdd_4_0 {
    local EA:4;
    local tmp:4;
    EA = Rx_20_16;
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rd=membh(Rx++Mu:brev)
# 10011110001xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.b[i];
# }
# 
:Q6_R_membh_R_inc_M_brev Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011110001 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    local tmp:4;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rd=memubh(Rx++Mu:brev)
# 10011110011xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# tmpV = *EA;
# for (i = 0; i < 2; i++) {
#     Rd.h[i] = tmpV.ub[i];
# }
# 
:Q6_R_memubh_R_inc_M_brev Rd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011110011 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    local tmp:4;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rd_4_0_h:4 = &Rd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 2) goto <for_i>;
}

# 
# Rdd=memubh(Rx++Mu:brev)
# 10011110101xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.ub[i];
# }
# 
:Q6_RR_memubh_R_inc_M_brev Rdd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011110101 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rdd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    local tmp:4;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_ub:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = zext(*[ram]:1 (tmp_ub + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# Rdd=membh(Rx++Mu:brev)
# 10011110111xxxxxPPu0----0--ddddd
# 
# EA = Rx.h[1] | brev(Rx.h[0]);
# Rx = Rx + MuV;
# tmpV = *EA;
# for (i = 0; i < 4; i++) {
#     Rdd.h[i] = tmpV.b[i];
# }
# 
:Q6_RR_membh_R_inc_M_brev Rdd_4_0, Rx_20_16, Mu_13_13
        is bits_31_21=0b10011110111 & Rx_20_16 & Mu_13_13 & bits_12_12=0b0 & bits_7_7=0b0 & Rdd_4_0 {
    local EA:4;
    local Rx_20_16_h:4 = &Rx_20_16;
    local tmp:4;
    EA = sext((*[register]:2 (Rx_20_16_h + 2 * 1) | bitsRev(*[register]:2 (Rx_20_16_h + 2 * 0))));
    Rx_20_16 = (Rx_20_16 + Mu_13_13);
    tmp = *:4 EA;
    local i:4 = 0;
    <for_i>
    local Rdd_4_0_h:4 = &Rdd_4_0;
    local tmp_b:4 = &tmp;
    *[register]:2 (Rdd_4_0_h + 2 * i) = sext(*[ram]:1 (tmp_b + 1 * i));
    i = i + 1;
    if (i < 4) goto <for_i>;
}

# 
# memb(Rs+#u6:0)+=Rt
# 00111110-00sssssPP0iiiiii00ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp += Rt;
# *EA = tmp;
# 
:Q6_memb_R_U_acc_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b00 & Rt_4_0
            [u6 = (u6_12_7 << 0);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp + Rt_4_0);
    *:4 EA = tmp;
}

# 
# memb(Rs+#u6:0)-=Rt
# 00111110-00sssssPP0iiiiii01ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp -= Rt;
# *EA = tmp;
# 
:Q6_memb_R_U_nac_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b01 & Rt_4_0
            [u6 = (u6_12_7 << 0);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp - Rt_4_0);
    *:4 EA = tmp;
}

# 
# memb(Rs+#u6:0)&=Rt
# 00111110-00sssssPP0iiiiii10ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp &= Rt;
# *EA = tmp;
# 
:Q6_memb_R_U_aac_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b10 & Rt_4_0
            [u6 = (u6_12_7 << 0);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp & Rt_4_0);
    *:4 EA = tmp;
}

# 
# memb(Rs+#u6:0)|=Rt
# 00111110-00sssssPP0iiiiii11ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp |= Rt;
# *EA = tmp;
# 
:Q6_memb_R_U_oac_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b11 & Rt_4_0
            [u6 = (u6_12_7 << 0);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp | Rt_4_0);
    *:4 EA = tmp;
}

# 
# memb(Rs+#u6:0)+=#U5
# 00111111-00sssssPP0iiiiii00IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp += imm_U;
# *EA = tmp;
# 
:Q6_memb_R_U_acc_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b00 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 0);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp + U5);
    *:4 EA = tmp;
}

# 
# memb(Rs+#u6:0)-=#U5
# 00111111-00sssssPP0iiiiii01IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp -= imm_U;
# *EA = tmp;
# 
:Q6_memb_R_U_nac_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b01 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 0);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp - U5);
    *:4 EA = tmp;
}

# 
# memb(Rs+#u6:0)=clrbit(#U5)
# 00111111-00sssssPP0iiiiii10IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp &= (~(1 << imm_U));
# *EA = tmp;
# 
:Q6_memb_R_U_clrbit_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b10 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 0);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp & (~(1 << U5)));
    *:4 EA = tmp;
}

# 
# memb(Rs+#u6:0)=setbit(#U5)
# 00111111-00sssssPP0iiiiii11IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp |= (1 << imm_U);
# *EA = tmp;
# 
:Q6_memb_R_U_setbit_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b00 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b11 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 0);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp | (1 << U5));
    *:4 EA = tmp;
}

# 
# memh(Rs+#u6:1)+=Rt
# 00111110-01sssssPP0iiiiii00ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp += Rt;
# *EA = tmp;
# 
:Q6_memh_R_U_acc_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b00 & Rt_4_0
            [u6 = (u6_12_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp + Rt_4_0);
    *:4 EA = tmp;
}

# 
# memh(Rs+#u6:1)-=Rt
# 00111110-01sssssPP0iiiiii01ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp -= Rt;
# *EA = tmp;
# 
:Q6_memh_R_U_nac_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b01 & Rt_4_0
            [u6 = (u6_12_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp - Rt_4_0);
    *:4 EA = tmp;
}

# 
# memh(Rs+#u6:1)&=Rt
# 00111110-01sssssPP0iiiiii10ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp &= Rt;
# *EA = tmp;
# 
:Q6_memh_R_U_aac_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b10 & Rt_4_0
            [u6 = (u6_12_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp & Rt_4_0);
    *:4 EA = tmp;
}

# 
# memh(Rs+#u6:1)|=Rt
# 00111110-01sssssPP0iiiiii11ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp |= Rt;
# *EA = tmp;
# 
:Q6_memh_R_U_oac_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b11 & Rt_4_0
            [u6 = (u6_12_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp | Rt_4_0);
    *:4 EA = tmp;
}

# 
# memh(Rs+#u6:1)+=#U5
# 00111111-01sssssPP0iiiiii00IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp += imm_U;
# *EA = tmp;
# 
:Q6_memh_R_U_acc_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b00 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp + U5);
    *:4 EA = tmp;
}

# 
# memh(Rs+#u6:1)-=#U5
# 00111111-01sssssPP0iiiiii01IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp -= imm_U;
# *EA = tmp;
# 
:Q6_memh_R_U_nac_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b01 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp - U5);
    *:4 EA = tmp;
}

# 
# memh(Rs+#u6:1)=clrbit(#U5)
# 00111111-01sssssPP0iiiiii10IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp &= (~(1 << imm_U));
# *EA = tmp;
# 
:Q6_memh_R_U_clrbit_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b10 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp & (~(1 << U5)));
    *:4 EA = tmp;
}

# 
# memh(Rs+#u6:1)=setbit(#U5)
# 00111111-01sssssPP0iiiiii11IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp |= (1 << imm_U);
# *EA = tmp;
# 
:Q6_memh_R_U_setbit_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b01 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b11 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 1);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp | (1 << U5));
    *:4 EA = tmp;
}

# 
# memw(Rs+#u6:2)+=Rt
# 00111110-10sssssPP0iiiiii00ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp += Rt;
# *EA = tmp;
# 
:Q6_memw_R_U_acc_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b10 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b00 & Rt_4_0
            [u6 = (u6_12_7 << 2);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp + Rt_4_0);
    *:4 EA = tmp;
}

# 
# memw(Rs+#u6:2)-=Rt
# 00111110-10sssssPP0iiiiii01ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp -= Rt;
# *EA = tmp;
# 
:Q6_memw_R_U_nac_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b10 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b01 & Rt_4_0
            [u6 = (u6_12_7 << 2);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp - Rt_4_0);
    *:4 EA = tmp;
}

# 
# memw(Rs+#u6:2)&=Rt
# 00111110-10sssssPP0iiiiii10ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp &= Rt;
# *EA = tmp;
# 
:Q6_memw_R_U_aac_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b10 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b10 & Rt_4_0
            [u6 = (u6_12_7 << 2);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp & Rt_4_0);
    *:4 EA = tmp;
}

# 
# memw(Rs+#u6:2)|=Rt
# 00111110-10sssssPP0iiiiii11ttttt
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp |= Rt;
# *EA = tmp;
# 
:Q6_memw_R_U_oac_R Rs_20_16, u6, Rt_4_0
        is bits_31_24=0b00111110 & bits_22_21=0b10 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b11 & Rt_4_0
            [u6 = (u6_12_7 << 2);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp | Rt_4_0);
    *:4 EA = tmp;
}

# 
# memw(Rs+#u6:2)+=#U5
# 00111111-10sssssPP0iiiiii00IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp += imm_U;
# *EA = tmp;
# 
:Q6_memw_R_U_acc_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b10 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b00 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 2);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp + U5);
    *:4 EA = tmp;
}

# 
# memw(Rs+#u6:2)-=#U5
# 00111111-10sssssPP0iiiiii01IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp -= imm_U;
# *EA = tmp;
# 
:Q6_memw_R_U_nac_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b10 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b01 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 2);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp - U5);
    *:4 EA = tmp;
}

# 
# memw(Rs+#u6:2)=clrbit(#U5)
# 00111111-10sssssPP0iiiiii10IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp &= (~(1 << imm_U));
# *EA = tmp;
# 
:Q6_memw_R_U_clrbit_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b10 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b10 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 2);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp & (~(1 << U5)));
    *:4 EA = tmp;
}

# 
# memw(Rs+#u6:2)=setbit(#U5)
# 00111111-10sssssPP0iiiiii11IIIII
# 
# apply_extension(imm_u);
# EA = Rs + imm_u;
# tmp = *EA;
# tmp |= (1 << imm_U);
# *EA = tmp;
# 
:Q6_memw_R_U_setbit_U Rs_20_16, u6, U5
        is bits_31_24=0b00111111 & bits_22_21=0b10 & Rs_20_16 & bits_13_13=0b0 & u6_12_7 & bits_6_5=0b11 & U5_4_0
            [U5 = (U5_4_0 << 0); u6 = (u6_12_7 << 2);] {
    local EA:4;
    local tmp:4;
    EA = (Rs_20_16 + u6);
    tmp = *:4 EA;
    tmp = (tmp | (1 << U5));
    *:4 EA = tmp;
}

# 
# if (cmp.eq(Ns.new,Rt)) jump:nt #r9:2
# 0010000000ii-sssPP0tttttiiiiiii-
# 
# if ((Ns.new == Rt)) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_cmp_eq_N_new_R_jump_nt_R Ns_18_16, Rt_12_8, r9
        is bits_31_22=0b0010000000 & r9_21_20 & Ns_18_16 & bits_13_13=0b0 & Rt_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local arg_Ns_18_16:4 = Ns_18_16;
    local new_new:4 = newSuffix(arg_Ns_18_16);
    if ((new_new == Rt_12_8)) goto <if_new_new_Rt_12_8>;
    goto <endif_new_new_Rt_12_8>;
    <if_new_new_Rt_12_8>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_Rt_12_8>
}

# 
# if (cmp.eq(Ns.new,Rt)) jump:t #r9:2
# 0010000000ii-sssPP1tttttiiiiiii-
# 
# if ((Ns.new == Rt)) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_cmp_eq_N_new_R_jump_t_R Ns_18_16, Rt_12_8, r9
        is bits_31_22=0b0010000000 & r9_21_20 & Ns_18_16 & bits_13_13=0b1 & Rt_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local arg_Ns_18_16:4 = Ns_18_16;
    local new_new:4 = newSuffix(arg_Ns_18_16);
    if ((new_new == Rt_12_8)) goto <if_new_new_Rt_12_8>;
    goto <endif_new_new_Rt_12_8>;
    <if_new_new_Rt_12_8>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_Rt_12_8>
}

# 
# if (!cmp.eq(Ns.new,Rt)) jump:nt #r9:2
# 0010000001ii-sssPP0tttttiiiiiii-
# 
# if ((Ns.new != Rt)) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_notcmp_eq_N_new_R_jump_nt_R Ns_18_16, Rt_12_8, r9
        is bits_31_22=0b0010000001 & r9_21_20 & Ns_18_16 & bits_13_13=0b0 & Rt_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local arg_Ns_18_16:4 = Ns_18_16;
    local new_new:4 = newSuffix(arg_Ns_18_16);
    if ((new_new != Rt_12_8)) goto <if_new_new_Rt_12_8>;
    goto <endif_new_new_Rt_12_8>;
    <if_new_new_Rt_12_8>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_Rt_12_8>
}

# 
# if (!cmp.eq(Ns.new,Rt)) jump:t #r9:2
# 0010000001ii-sssPP1tttttiiiiiii-
# 
# if ((Ns.new != Rt)) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_notcmp_eq_N_new_R_jump_t_R Ns_18_16, Rt_12_8, r9
        is bits_31_22=0b0010000001 & r9_21_20 & Ns_18_16 & bits_13_13=0b1 & Rt_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local arg_Ns_18_16:4 = Ns_18_16;
    local new_new:4 = newSuffix(arg_Ns_18_16);
    if ((new_new != Rt_12_8)) goto <if_new_new_Rt_12_8>;
    goto <endif_new_new_Rt_12_8>;
    <if_new_new_Rt_12_8>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_Rt_12_8>
}

# 
# if (cmp.gt(Ns.new,Rt)) jump:nt #r9:2
# 0010000010ii-sssPP0tttttiiiiiii-
# 
# if ((Ns.new > Rt)) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_cmp_gt_N_new_R_jump_nt_R Ns_18_16, Rt_12_8, r9
        is bits_31_22=0b0010000010 & r9_21_20 & Ns_18_16 & bits_13_13=0b0 & Rt_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local arg_Ns_18_16:4 = Ns_18_16;
    local new_new:4 = newSuffix(arg_Ns_18_16);
    if ((new_new s> Rt_12_8)) goto <if_new_new_s_Rt_12_8>;
    goto <endif_new_new_s_Rt_12_8>;
    <if_new_new_s_Rt_12_8>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_s_Rt_12_8>
}

# 
# if (cmp.gt(Ns.new,Rt)) jump:t #r9:2
# 0010000010ii-sssPP1tttttiiiiiii-
# 
# if ((Ns.new > Rt)) {
#     apply_extension(imm_r);
#     imm_r = imm_r & ~0x3;
#     PC = PC + imm_r;
# }
# 
:Q6_if_cmp_gt_N_new_R_jump_t_R Ns_18_16, Rt_12_8, r9
        is bits_31_22=0b0010000010 & r9_21_20 & Ns_18_16 & bits_13_13=0b1 & Rt_12_8 & r9_7_1
            [r9 = (r9_21_20 << 2) | (r9_7_1 << 4);] {
    local arg_Ns_18_16:4 = Ns_18_16;
    local new_new:4 = newSuffix(arg_Ns_18_16);
    if ((new_new s> Rt_12_8)) goto <if_new_new_s_Rt_12_8>;
    goto <endif_new_new_s_Rt_12_8>;
    <if_new_new_s_Rt_12_8>
    local cst_0x3:4 = 0x3;
    r9 = (r9 & (~cst_0x3));
    $(PC) = ($(PC) + r9);
    <endif_new_new_s_Rt_12_8>
}
