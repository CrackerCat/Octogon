[
    [
        "Rd=add(Rs,#s16)", 
        "1011iiiiiiisssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nRd = Rs + imm_s;"
    ], 
    [
        "Rd=add(Rs,Rt)", 
        "11110011000sssssPP-ttttt---ddddd", 
        "Rd = Rs + Rt;"
    ], 
    [
        "Rd=add(Rs,Rt):sat", 
        "11110110010sssssPP-ttttt---ddddd", 
        "Rd = sat(32, Rs + Rt);"
    ], 
    [
        "Rd=and(Rs,#s10)", 
        "0111011000isssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nRd = Rs & imm_s;"
    ], 
    [
        "Rd=or(Rs,#s10)", 
        "0111011010isssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nRd = Rs | imm_s;"
    ], 
    [
        "Rd=and(Rs,Rt)", 
        "11110001000sssssPP-ttttt---ddddd", 
        "Rd = Rs & Rt;"
    ], 
    [
        "Rd=or(Rs,Rt)", 
        "11110001001sssssPP-ttttt---ddddd", 
        "Rd = Rs | Rt;"
    ], 
    [
        "Rd=xor(Rs,Rt)", 
        "11110001011sssssPP-ttttt---ddddd", 
        "Rd = Rs ^ Rt;"
    ], 
    [
        "Rd=and(Rt,~Rs)", 
        "11110001100sssssPP-ttttt---ddddd", 
        "Rd = (Rt & ~Rs);"
    ], 
    [
        "Rd=or(Rt,~Rs)", 
        "11110001101sssssPP-ttttt---ddddd", 
        "Rd = (Rt | ~Rs);"
    ], 
    [
        "nop", 
        "01111111--------PP--------------", 
        ""
    ], 
    [
        "Rd=sub(#s10,Rs)", 
        "0111011001isssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nRd = imm_s - Rs;"
    ], 
    [
        "Rd=sub(Rt,Rs)", 
        "11110011001sssssPP-ttttt---ddddd", 
        "Rd = Rt - Rs;"
    ], 
    [
        "Rd=sub(Rt,Rs):sat", 
        "11110110110sssssPP-ttttt---ddddd", 
        "Rd = sat(32, Rt - Rs);"
    ], 
    [
        "Rd=sxtb(Rs)", 
        "01110000101sssssPP0--------ddddd", 
        "Rd = sxt(8, 32, Rs);"
    ], 
    [
        "Rd=sxth(Rs)", 
        "01110000111sssssPP0--------ddddd", 
        "Rd = sxt(16, 32, Rs);"
    ], 
    [
        "Rx.L=#u16", 
        "01110001ii1xxxxxPPiiiiiiiiiiiiii", 
        "Rx.h[0] = imm_u;"
    ], 
    [
        "Rx.H=#u16", 
        "01110010ii1xxxxxPPiiiiiiiiiiiiii", 
        "Rx.h[1] = imm_u;"
    ], 
    [
        "Rd=#s16", 
        "01111000ii-iiiiiPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nRd = imm_s;"
    ], 
    [
        "Rd=Rs", 
        "01110000011sssssPP0--------ddddd", 
        "Rd = Rs;"
    ], 
    [
        "Rd=vaddh(Rs,Rt)", 
        "11110110000sssssPP-ttttt---ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = (Rs.h[i] + Rt.h[i]);\n}"
    ], 
    [
        "Rd=vaddh(Rs,Rt):sat", 
        "11110110001sssssPP-ttttt---ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = sat(16, Rs.h[i] + Rt.h[i]);\n}"
    ], 
    [
        "Rd=vadduh(Rs,Rt):sat", 
        "11110110011sssssPP-ttttt---ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = usat(16, Rs.uh[i] + Rt.uh[i]);\n}"
    ], 
    [
        "Rd=vavgh(Rs,Rt)", 
        "11110111-00sssssPP-ttttt---ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = ((Rs.h[i] + Rt.h[i]) >> 1);\n}"
    ], 
    [
        "Rd=vavgh(Rs,Rt):rnd", 
        "11110111-01sssssPP-ttttt---ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = ((Rs.h[i] + Rt.h[i] + 1) >> 1);\n}"
    ], 
    [
        "Rd=vnavgh(Rt,Rs)", 
        "11110111-11sssssPP-ttttt---ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = ((Rt.h[i] - Rs.h[i]) >> 1);\n}"
    ], 
    [
        "Rd=vsubh(Rt,Rs)", 
        "11110110100sssssPP-ttttt---ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = (Rt.h[i] - Rs.h[i]);\n}"
    ], 
    [
        "Rd=vsubh(Rt,Rs):sat", 
        "11110110101sssssPP-ttttt---ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = sat(16, Rt.h[i] - Rs.h[i]);\n}"
    ], 
    [
        "Rd=vsubuh(Rt,Rs):sat", 
        "11110110111sssssPP-ttttt---ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = usat(16, Rt.uh[i] - Rs.uh[i]);\n}"
    ], 
    [
        "Rd=zxth(Rs)", 
        "01110000110sssssPP0--------ddddd", 
        "Rd = zxt(16, 32, Rs);"
    ], 
    [
        "Rdd=combine(Rs,#s8)", 
        "01110011-00sssssPP1iiiiiiiiddddd", 
        "apply_extension(imm_s);\nRdd.w[0] = imm_s;\nRdd.w[1] = Rs;"
    ], 
    [
        "Rdd=combine(#s8,Rs)", 
        "01110011-01sssssPP1iiiiiiiiddddd", 
        "apply_extension(imm_s);\nRdd.w[0] = Rs;\nRdd.w[1] = imm_s;"
    ], 
    [
        "Rdd=combine(#s8,#S8)", 
        "011111000IIIIIIIPPIiiiiiiiiddddd", 
        "apply_extension(imm_s);\nRdd.w[0] = imm_S;\nRdd.w[1] = imm_s;"
    ], 
    [
        "Rdd=combine(#s8,#U6)", 
        "011111001--IIIIIPPIiiiiiiiiddddd", 
        "apply_extension(imm_U);\nRdd.w[0] = imm_U;\nRdd.w[1] = imm_s;"
    ], 
    [
        "Rd=combine(Rt.H,Rs.H)", 
        "11110011100sssssPP-ttttt---ddddd", 
        "Rd = (Rt.uh[1] << 16) | Rs.uh[1];"
    ], 
    [
        "Rd=combine(Rt.H,Rs.L)", 
        "11110011101sssssPP-ttttt---ddddd", 
        "Rd = (Rt.uh[1] << 16) | Rs.uh[0];"
    ], 
    [
        "Rd=combine(Rt.L,Rs.H)", 
        "11110011110sssssPP-ttttt---ddddd", 
        "Rd = (Rt.uh[0] << 16) | Rs.uh[1];"
    ], 
    [
        "Rd=combine(Rt.L,Rs.L)", 
        "11110011111sssssPP-ttttt---ddddd", 
        "Rd = (Rt.uh[0] << 16) | Rs.uh[0];"
    ], 
    [
        "Rdd=combine(Rs,Rt)", 
        "111101010--sssssPP-ttttt---ddddd", 
        "Rdd.w[0] = Rt;\nRdd.w[1] = Rs;"
    ], 
    [
        "Rd=mux(Pu,Rs,#s8)", 
        "011100110uusssssPP0iiiiiiiiddddd", 
        "PREDUSE_TIMING;\napply_extension(imm_s);\n(Pu[0]) ? (Rd = Rs) : (Rd = imm_s);"
    ], 
    [
        "Rd=mux(Pu,#s8,Rs)", 
        "011100111uusssssPP0iiiiiiiiddddd", 
        "PREDUSE_TIMING;\napply_extension(imm_s);\n(Pu[0]) ? (Rd = imm_s) : (Rd = Rs);"
    ], 
    [
        "Rd=mux(Pu,#s8,#S8)", 
        "0111101uuIIIIIIIPPIiiiiiiiiddddd", 
        "PREDUSE_TIMING;\napply_extension(imm_s);\n(Pu[0]) ? (Rd = imm_s) : (Rd = imm_S);"
    ], 
    [
        "Rd=mux(Pu,Rs,Rt)", 
        "11110100---sssssPP-ttttt-uuddddd", 
        "PREDUSE_TIMING;\n(Pu[0]) ? (Rd = Rs) : (Rd = Rt);"
    ], 
    [
        "Rd=aslh(Rs)", 
        "01110000000sssssPP0--------ddddd", 
        "Rd = Rs << 16;"
    ], 
    [
        "Rd=asrh(Rs)", 
        "01110000001sssssPP0--------ddddd", 
        "Rd = Rs >> 16;"
    ], 
    [
        "Rdd=packhl(Rs,Rt)", 
        "111101011--sssssPP-ttttt---ddddd", 
        "Rdd.h[0] = Rt.h[0];\nRdd.h[1] = Rs.h[0];\nRdd.h[2] = Rt.h[1];\nRdd.h[3] = Rs.h[1];"
    ], 
    [
        "if (Pu) Rd=add(Rs,#s8)", 
        "011101000uusssssPP0iiiiiiiiddddd", 
        "if (Pu[0]) {\n    apply_extension(imm_s);\n    Rd = Rs + imm_s;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=add(Rs,#s8)", 
        "011101000uusssssPP1iiiiiiiiddddd", 
        "if (Pu.new[0]) {\n    apply_extension(imm_s);\n    Rd = Rs + imm_s;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=add(Rs,#s8)", 
        "011101001uusssssPP0iiiiiiiiddddd", 
        "if (!Pu[0]) {\n    apply_extension(imm_s);\n    Rd = Rs + imm_s;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=add(Rs,#s8)", 
        "011101001uusssssPP1iiiiiiiiddddd", 
        "if (!Pu.new[0]) {\n    apply_extension(imm_s);\n    Rd = Rs + imm_s;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=add(Rs,Rt)", 
        "111110110-0sssssPP0ttttt0uuddddd", 
        "if (Pu[0]) {\n    Rd = Rs + Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=add(Rs,Rt)", 
        "111110110-0sssssPP0ttttt1uuddddd", 
        "if (!Pu[0]) {\n    Rd = Rs + Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=add(Rs,Rt)", 
        "111110110-0sssssPP1ttttt0uuddddd", 
        "if (Pu.new[0]) {\n    Rd = Rs + Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=add(Rs,Rt)", 
        "111110110-0sssssPP1ttttt1uuddddd", 
        "if (!Pu.new[0]) {\n    Rd = Rs + Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=aslh(Rs)", 
        "01110000000sssssPP1-00uu---ddddd", 
        "if (Pu[0]) {\n    Rd = Rs << 16;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=aslh(Rs)", 
        "01110000000sssssPP1-01uu---ddddd", 
        "if (Pu.new[0]) {\n    Rd = Rs << 16;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=aslh(Rs)", 
        "01110000000sssssPP1-10uu---ddddd", 
        "if (!Pu[0]) {\n    Rd = Rs << 16;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=aslh(Rs)", 
        "01110000000sssssPP1-11uu---ddddd", 
        "if (!Pu.new[0]) {\n    Rd = Rs << 16;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=asrh(Rs)", 
        "01110000001sssssPP1-00uu---ddddd", 
        "if (Pu[0]) {\n    Rd = Rs >> 16;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=asrh(Rs)", 
        "01110000001sssssPP1-01uu---ddddd", 
        "if (Pu.new[0]) {\n    Rd = Rs >> 16;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=asrh(Rs)", 
        "01110000001sssssPP1-10uu---ddddd", 
        "if (!Pu[0]) {\n    Rd = Rs >> 16;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=asrh(Rs)", 
        "01110000001sssssPP1-11uu---ddddd", 
        "if (!Pu.new[0]) {\n    Rd = Rs >> 16;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rdd=combine(Rs,Rt)", 
        "11111101---sssssPP0ttttt0uuddddd", 
        "if (Pu[0]) {\n    Rdd.w[0] = Rt;\n    Rdd.w[1] = Rs;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rdd=combine(Rs,Rt)", 
        "11111101---sssssPP0ttttt1uuddddd", 
        "if (!Pu[0]) {\n    Rdd.w[0] = Rt;\n    Rdd.w[1] = Rs;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rdd=combine(Rs,Rt)", 
        "11111101---sssssPP1ttttt0uuddddd", 
        "if (Pu.new[0]) {\n    Rdd.w[0] = Rt;\n    Rdd.w[1] = Rs;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rdd=combine(Rs,Rt)", 
        "11111101---sssssPP1ttttt1uuddddd", 
        "if (!Pu.new[0]) {\n    Rdd.w[0] = Rt;\n    Rdd.w[1] = Rs;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=and(Rs,Rt)", 
        "11111001-00sssssPP0ttttt0uuddddd", 
        "if (Pu[0]) {\n    Rd = Rs & Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=and(Rs,Rt)", 
        "11111001-00sssssPP0ttttt1uuddddd", 
        "if (!Pu[0]) {\n    Rd = Rs & Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=and(Rs,Rt)", 
        "11111001-00sssssPP1ttttt0uuddddd", 
        "if (Pu.new[0]) {\n    Rd = Rs & Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=and(Rs,Rt)", 
        "11111001-00sssssPP1ttttt1uuddddd", 
        "if (!Pu.new[0]) {\n    Rd = Rs & Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=or(Rs,Rt)", 
        "11111001-01sssssPP0ttttt0uuddddd", 
        "if (Pu[0]) {\n    Rd = Rs | Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=or(Rs,Rt)", 
        "11111001-01sssssPP0ttttt1uuddddd", 
        "if (!Pu[0]) {\n    Rd = Rs | Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=or(Rs,Rt)", 
        "11111001-01sssssPP1ttttt0uuddddd", 
        "if (Pu.new[0]) {\n    Rd = Rs | Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=or(Rs,Rt)", 
        "11111001-01sssssPP1ttttt1uuddddd", 
        "if (!Pu.new[0]) {\n    Rd = Rs | Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=xor(Rs,Rt)", 
        "11111001-11sssssPP0ttttt0uuddddd", 
        "if (Pu[0]) {\n    Rd = Rs ^ Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=xor(Rs,Rt)", 
        "11111001-11sssssPP0ttttt1uuddddd", 
        "if (!Pu[0]) {\n    Rd = Rs ^ Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=xor(Rs,Rt)", 
        "11111001-11sssssPP1ttttt0uuddddd", 
        "if (Pu.new[0]) {\n    Rd = Rs ^ Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=xor(Rs,Rt)", 
        "11111001-11sssssPP1ttttt1uuddddd", 
        "if (!Pu.new[0]) {\n    Rd = Rs ^ Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=sub(Rt,Rs)", 
        "111110110-1sssssPP0ttttt0uuddddd", 
        "if (Pu[0]) {\n    Rd = Rt - Rs;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=sub(Rt,Rs)", 
        "111110110-1sssssPP0ttttt1uuddddd", 
        "if (!Pu[0]) {\n    Rd = Rt - Rs;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=sub(Rt,Rs)", 
        "111110110-1sssssPP1ttttt0uuddddd", 
        "if (Pu.new[0]) {\n    Rd = Rt - Rs;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=sub(Rt,Rs)", 
        "111110110-1sssssPP1ttttt1uuddddd", 
        "if (!Pu.new[0]) {\n    Rd = Rt - Rs;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=sxtb(Rs)", 
        "01110000101sssssPP1-00uu---ddddd", 
        "if (Pu[0]) {\n    Rd = sxt(8, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=sxtb(Rs)", 
        "01110000101sssssPP1-01uu---ddddd", 
        "if (Pu.new[0]) {\n    Rd = sxt(8, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=sxtb(Rs)", 
        "01110000101sssssPP1-10uu---ddddd", 
        "if (!Pu[0]) {\n    Rd = sxt(8, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=sxtb(Rs)", 
        "01110000101sssssPP1-11uu---ddddd", 
        "if (!Pu.new[0]) {\n    Rd = sxt(8, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=sxth(Rs)", 
        "01110000111sssssPP1-00uu---ddddd", 
        "if (Pu[0]) {\n    Rd = sxt(16, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=sxth(Rs)", 
        "01110000111sssssPP1-01uu---ddddd", 
        "if (Pu.new[0]) {\n    Rd = sxt(16, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=sxth(Rs)", 
        "01110000111sssssPP1-10uu---ddddd", 
        "if (!Pu[0]) {\n    Rd = sxt(16, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=sxth(Rs)", 
        "01110000111sssssPP1-11uu---ddddd", 
        "if (!Pu.new[0]) {\n    Rd = sxt(16, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=#s12", 
        "011111100uu0iiiiPP0iiiiiiiiddddd", 
        "apply_extension(imm_s);\nif (Pu[0]) {\n    Rd = imm_s;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=#s12", 
        "011111100uu0iiiiPP1iiiiiiiiddddd", 
        "apply_extension(imm_s);\nif (Pu.new[0]) {\n    Rd = imm_s;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=#s12", 
        "011111101uu0iiiiPP0iiiiiiiiddddd", 
        "apply_extension(imm_s);\nif (!Pu[0]) {\n    Rd = imm_s;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=#s12", 
        "011111101uu0iiiiPP1iiiiiiiiddddd", 
        "apply_extension(imm_s);\nif (!Pu.new[0]) {\n    Rd = imm_s;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=zxtb(Rs)", 
        "01110000100sssssPP1-00uu---ddddd", 
        "if (Pu[0]) {\n    Rd = zxt(8, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=zxtb(Rs)", 
        "01110000100sssssPP1-01uu---ddddd", 
        "if (Pu.new[0]) {\n    Rd = zxt(8, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=zxtb(Rs)", 
        "01110000100sssssPP1-10uu---ddddd", 
        "if (!Pu[0]) {\n    Rd = zxt(8, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=zxtb(Rs)", 
        "01110000100sssssPP1-11uu---ddddd", 
        "if (!Pu.new[0]) {\n    Rd = zxt(8, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu) Rd=zxth(Rs)", 
        "01110000110sssssPP1-00uu---ddddd", 
        "if (Pu[0]) {\n    Rd = zxt(16, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pu.new) Rd=zxth(Rs)", 
        "01110000110sssssPP1-01uu---ddddd", 
        "if (Pu.new[0]) {\n    Rd = zxt(16, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu) Rd=zxth(Rs)", 
        "01110000110sssssPP1-10uu---ddddd", 
        "if (!Pu[0]) {\n    Rd = zxt(16, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pu.new) Rd=zxth(Rs)", 
        "01110000110sssssPP1-11uu---ddddd", 
        "if (!Pu.new[0]) {\n    Rd = zxt(16, 32, Rs);\n} else {\n    NOP;\n}"
    ], 
    [
        "Pd=cmp.eq(Rs,#s10)", 
        "0111010100isssssPPiiiiiiiii000dd", 
        "apply_extension(imm_s);\nPd = Rs == imm_s ? 0xff : 0x00;"
    ], 
    [
        "Pd=!cmp.eq(Rs,#s10)", 
        "0111010100isssssPPiiiiiiiii100dd", 
        "apply_extension(imm_s);\nPd = Rs != imm_s ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmp.gt(Rs,#s10)", 
        "0111010101isssssPPiiiiiiiii000dd", 
        "apply_extension(imm_s);\nPd = Rs > imm_s ? 0xff : 0x00;"
    ], 
    [
        "Pd=!cmp.gt(Rs,#s10)", 
        "0111010101isssssPPiiiiiiiii100dd", 
        "apply_extension(imm_s);\nPd = Rs <= imm_s ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmp.gtu(Rs,#u9)", 
        "01110101100sssssPPiiiiiiiii000dd", 
        "apply_extension(imm_u);\nPd = Rs.uw[0] > imm_u ? 0xff : 0x00;"
    ], 
    [
        "Pd=!cmp.gtu(Rs,#u9)", 
        "01110101100sssssPPiiiiiiiii100dd", 
        "apply_extension(imm_u);\nPd = Rs.uw[0] <= imm_u ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmp.eq(Rs,Rt)", 
        "11110010-00sssssPP-ttttt---000dd", 
        "Pd = Rs == Rt ? 0xff : 0x00;"
    ], 
    [
        "Pd=!cmp.eq(Rs,Rt)", 
        "11110010-00sssssPP-ttttt---100dd", 
        "Pd = Rs != Rt ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmp.gt(Rs,Rt)", 
        "11110010-10sssssPP-ttttt---000dd", 
        "Pd = Rs > Rt ? 0xff : 0x00;"
    ], 
    [
        "Pd=!cmp.gt(Rs,Rt)", 
        "11110010-10sssssPP-ttttt---100dd", 
        "Pd = Rs <= Rt ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmp.gtu(Rs,Rt)", 
        "11110010-11sssssPP-ttttt---000dd", 
        "Pd = Rs.uw[0] > Rt.uw[0] ? 0xff : 0x00;"
    ], 
    [
        "Pd=!cmp.gtu(Rs,Rt)", 
        "11110010-11sssssPP-ttttt---100dd", 
        "Pd = Rs.uw[0] <= Rt.uw[0] ? 0xff : 0x00;"
    ], 
    [
        "Rd=cmp.eq(Rs,#s8)", 
        "01110011-10sssssPP1iiiiiiiiddddd", 
        "apply_extension(imm_s);\nRd = (Rs == imm_s);"
    ], 
    [
        "Rd=!cmp.eq(Rs,#s8)", 
        "01110011-11sssssPP1iiiiiiiiddddd", 
        "apply_extension(imm_s);\nRd = (Rs != imm_s);"
    ], 
    [
        "Rd=cmp.eq(Rs,Rt)", 
        "11110011010sssssPP-ttttt---ddddd", 
        "Rd = (Rs == Rt);"
    ], 
    [
        "Rd=!cmp.eq(Rs,Rt)", 
        "11110011011sssssPP-ttttt---ddddd", 
        "Rd = (Rs != Rt);"
    ], 
    [
        "Pd=fastcorner9(Ps,Pt)", 
        "011010110000--ssPP1---tt1--1--dd", 
        "PREDUSE_TIMING;\ntmp.h[0] = (Ps << 8) | Pt;\ntmp.h[1] = (Ps << 8) | Pt;\nfor (i = 1; i < 9; i++) {\n    tmp &= tmp >> 1;\n}\n\nPd = tmp != 0 ? 0xff : 0x00;"
    ], 
    [
        "Pd=!fastcorner9(Ps,Pt)", 
        "011010110001--ssPP1---tt1--1--dd", 
        "PREDUSE_TIMING;\ntmp.h[0] = (Ps << 8) | Pt;\ntmp.h[1] = (Ps << 8) | Pt;\nfor (i = 1; i < 9; i++) {\n    tmp &= tmp >> 1;\n}\n\nPd = tmp == 0 ? 0xff : 0x00;"
    ], 
    [
        "Pd=any8(Ps)", 
        "011010111000--ssPP0-----------dd", 
        "PREDUSE_TIMING;\nPs ? (Pd = 0xff) : (Pd = 0x00);"
    ], 
    [
        "Pd=all8(Ps)", 
        "011010111010--ssPP0-----------dd", 
        "PREDUSE_TIMING;\n(Ps == 0xff) ? (Pd = 0xff) : (Pd = 0x00);"
    ], 
    [
        "loop0(#r7:2,Rs)", 
        "01100000000sssssPP-iiiii---ii---", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA0 = PC + imm_r;\nLC0 = Rs;\nUSR.LPCFG = 0;"
    ], 
    [
        "loop1(#r7:2,Rs)", 
        "01100000001sssssPP-iiiii---ii---", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA1 = PC + imm_r;\nLC1 = Rs;"
    ], 
    [
        "loop0(#r7:2,#U10)", 
        "01101001000IIIIIPP-iiiiiIIIii-II", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA0 = PC + imm_r;\nLC0 = imm_U;\nUSR.LPCFG = 0;"
    ], 
    [
        "loop1(#r7:2,#U10)", 
        "01101001001IIIIIPP-iiiiiIIIii-II", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA1 = PC + imm_r;\nLC1 = imm_U;"
    ], 
    [
        "Rd=add(pc,#u6)", 
        "0110101001001001PP-iiiiii--ddddd", 
        "Rd = PC + apply_extension(imm_u);"
    ], 
    [
        "p3=sp1loop0(#r7:2,Rs)", 
        "01100000101sssssPP-iiiii---ii---", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA0 = PC + imm_r;\nLC0 = Rs;\nUSR.LPCFG = 1;\nP3 = 0;"
    ], 
    [
        "p3=sp2loop0(#r7:2,Rs)", 
        "01100000110sssssPP-iiiii---ii---", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA0 = PC + imm_r;\nLC0 = Rs;\nUSR.LPCFG = 2;\nP3 = 0;"
    ], 
    [
        "p3=sp3loop0(#r7:2,Rs)", 
        "01100000111sssssPP-iiiii---ii---", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA0 = PC + imm_r;\nLC0 = Rs;\nUSR.LPCFG = 3;\nP3 = 0;"
    ], 
    [
        "p3=sp1loop0(#r7:2,#U10)", 
        "01101001101IIIIIPP-iiiiiIIIii-II", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA0 = PC + imm_r;\nLC0 = imm_U;\nUSR.LPCFG = 1;\nP3 = 0;"
    ], 
    [
        "p3=sp2loop0(#r7:2,#U10)", 
        "01101001110IIIIIPP-iiiiiIIIii-II", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA0 = PC + imm_r;\nLC0 = imm_U;\nUSR.LPCFG = 2;\nP3 = 0;"
    ], 
    [
        "p3=sp3loop0(#r7:2,#U10)", 
        "01101001111IIIIIPP-iiiiiIIIii-II", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nSA0 = PC + imm_r;\nLC0 = imm_U;\nUSR.LPCFG = 3;\nP3 = 0;"
    ], 
    [
        "Pd=and(Pt,Ps)", 
        "011010110000--ssPP0---tt------dd", 
        "PREDUSE_TIMING;\nPd = Pt & Ps;"
    ], 
    [
        "Pd=and(Ps,and(Pt,Pu))", 
        "011010110001--ssPP0---ttuu----dd", 
        "PREDUSE_TIMING;\nPd = Ps & Pt & Pu;"
    ], 
    [
        "Pd=or(Pt,Ps)", 
        "011010110010--ssPP0---tt------dd", 
        "PREDUSE_TIMING;\nPd = Pt | Ps;"
    ], 
    [
        "Pd=and(Ps,or(Pt,Pu))", 
        "011010110011--ssPP0---ttuu----dd", 
        "PREDUSE_TIMING;\nPd = Ps & (Pt | Pu);"
    ], 
    [
        "Pd=xor(Ps,Pt)", 
        "011010110100--ssPP0---tt------dd", 
        "PREDUSE_TIMING;\nPd = Ps ^ Pt;"
    ], 
    [
        "Pd=or(Ps,and(Pt,Pu))", 
        "011010110101--ssPP0---ttuu----dd", 
        "PREDUSE_TIMING;\nPd = Ps | (Pt & Pu);"
    ], 
    [
        "Pd=and(Pt,!Ps)", 
        "011010110110--ssPP0---tt------dd", 
        "PREDUSE_TIMING;\nPd = Pt & (~Ps);"
    ], 
    [
        "Pd=or(Ps,or(Pt,Pu))", 
        "011010110111--ssPP0---ttuu----dd", 
        "PREDUSE_TIMING;\nPd = Ps | Pt | Pu;"
    ], 
    [
        "Pd=and(Ps,and(Pt,!Pu))", 
        "011010111001--ssPP0---ttuu----dd", 
        "PREDUSE_TIMING;\nPd = Ps & Pt & (~Pu);"
    ], 
    [
        "Pd=and(Ps,or(Pt,!Pu))", 
        "011010111011--ssPP0---ttuu----dd", 
        "PREDUSE_TIMING;\nPd = Ps & (Pt | (~Pu));"
    ], 
    [
        "Pd=not(Ps)", 
        "011010111100--ssPP0-----------dd", 
        "PREDUSE_TIMING;\nPd = ~Ps;"
    ], 
    [
        "Pd=or(Ps,and(Pt,!Pu))", 
        "011010111101--ssPP0---ttuu----dd", 
        "PREDUSE_TIMING;\nPd = Ps | (Pt & (~Pu));"
    ], 
    [
        "Pd=or(Pt,!Ps)", 
        "011010111110--ssPP0---tt------dd", 
        "PREDUSE_TIMING;\nPd = Pt | (~Ps);"
    ], 
    [
        "Pd=or(Ps,or(Pt,!Pu))", 
        "011010111111--ssPP0---ttuu----dd", 
        "PREDUSE_TIMING;\nPd = Ps | Pt | (~Pu);"
    ], 
    [
        "Cd=Rs", 
        "01100010001sssssPP---------ddddd", 
        "Cd = Rs;"
    ], 
    [
        "Cdd=Rss", 
        "01100011001sssssPP---------ddddd", 
        "Cdd = Rss;"
    ], 
    [
        "Rdd=Css", 
        "01101000000sssssPP---------ddddd", 
        "Rdd = Css;"
    ], 
    [
        "Rd=Cs", 
        "01101010000sssssPP---------ddddd", 
        "Rd = Cs;"
    ], 
    [
        "callr Rs", 
        "01010000101sssssPP--------------", 
        "LR = NPC;\nPC = Rs;"
    ], 
    [
        "if (Pu) callr Rs", 
        "01010001000sssssPP----uu--------", 
        "if (Pu[0]) {\n    LR = NPC;\n    PC = Rs;\n}"
    ], 
    [
        "if (!Pu) callr Rs", 
        "01010001001sssssPP----uu--------", 
        "if (!Pu[0]) {\n    LR = NPC;\n    PC = Rs;\n}"
    ], 
    [
        "hintjr(Rs)", 
        "01010010101sssssPP--------------", 
        ""
    ], 
    [
        "jumpr Rs", 
        "01010010100sssssPP--------------", 
        "PC = Rs;"
    ], 
    [
        "if (Pu) jumpr:nt Rs", 
        "01010011010sssssPP-00-uu--------", 
        "if (Pu[0]) {\n    PC = Rs;\n}"
    ], 
    [
        "if (Pu.new) jumpr:nt Rs", 
        "01010011010sssssPP-01-uu--------", 
        "if (Pu.new[0]) {\n    PC = Rs;\n}"
    ], 
    [
        "if (Pu) jumpr:t Rs", 
        "01010011010sssssPP-10-uu--------", 
        "if (Pu[0]) {\n    PC = Rs;\n}"
    ], 
    [
        "if (Pu.new) jumpr:t Rs", 
        "01010011010sssssPP-11-uu--------", 
        "if (Pu.new[0]) {\n    PC = Rs;\n}"
    ], 
    [
        "if (!Pu) jumpr:nt Rs", 
        "01010011011sssssPP-00-uu--------", 
        "if (!Pu[0]) {\n    PC = Rs;\n}"
    ], 
    [
        "if (!Pu.new) jumpr:nt Rs", 
        "01010011011sssssPP-01-uu--------", 
        "if (!Pu.new[0]) {\n    PC = Rs;\n}"
    ], 
    [
        "if (!Pu) jumpr:t Rs", 
        "01010011011sssssPP-10-uu--------", 
        "if (!Pu[0]) {\n    PC = Rs;\n}"
    ], 
    [
        "if (!Pu.new) jumpr:t Rs", 
        "01010011011sssssPP-11-uu--------", 
        "if (!Pu.new[0]) {\n    PC = Rs;\n}"
    ], 
    [
        "call #r22:2", 
        "0101101iiiiiiiiiPPiiiiiiiiiiiii0", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nLR = NPC;\nPC = PC + imm_r;"
    ], 
    [
        "if (Pu) call #r15:2", 
        "01011101ii0iiiiiPPi-0-uuiiiiiii-", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nif (Pu[0]) {\n    LR = NPC;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!Pu) call #r15:2", 
        "01011101ii1iiiiiPPi-0-uuiiiiiii-", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nif (!Pu[0]) {\n    LR = NPC;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,#-1); if (p0.new) jump:nt #r9:2", 
        "0001000110iissssPP0---00iiiiiii-", 
        "P0 = (Rs == -1) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,#-1); if (p0.new) jump:nt #r9:2", 
        "0001000110iissssPP0---01iiiiiii-", 
        "P0 = (Rs > -1) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=tstbit(Rs,#0); if (p0.new) jump:nt #r9:2", 
        "0001000110iissssPP0---11iiiiiii-", 
        "P0 = (Rs & 1) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,#-1); if (p0.new) jump:t #r9:2", 
        "0001000110iissssPP1---00iiiiiii-", 
        "P0 = (Rs == -1) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,#-1); if (p0.new) jump:t #r9:2", 
        "0001000110iissssPP1---01iiiiiii-", 
        "P0 = (Rs > -1) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=tstbit(Rs,#0); if (p0.new) jump:t #r9:2", 
        "0001000110iissssPP1---11iiiiiii-", 
        "P0 = (Rs & 1) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,#-1); if (!p0.new) jump:nt #r9:2", 
        "0001000111iissssPP0---00iiiiiii-", 
        "P0 = (Rs == -1) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,#-1); if (!p0.new) jump:nt #r9:2", 
        "0001000111iissssPP0---01iiiiiii-", 
        "P0 = (Rs > -1) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=tstbit(Rs,#0); if (!p0.new) jump:nt #r9:2", 
        "0001000111iissssPP0---11iiiiiii-", 
        "P0 = (Rs & 1) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,#-1); if (!p0.new) jump:t #r9:2", 
        "0001000111iissssPP1---00iiiiiii-", 
        "P0 = (Rs == -1) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,#-1); if (!p0.new) jump:t #r9:2", 
        "0001000111iissssPP1---01iiiiiii-", 
        "P0 = (Rs > -1) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=tstbit(Rs,#0); if (!p0.new) jump:t #r9:2", 
        "0001000111iissssPP1---11iiiiiii-", 
        "P0 = (Rs & 1) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,#U5); if (p0.new) jump:nt #r9:2", 
        "0001000000iissssPP0IIIIIiiiiiii-", 
        "P0 = (Rs == imm_U) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,#U5); if (p0.new) jump:t #r9:2", 
        "0001000000iissssPP1IIIIIiiiiiii-", 
        "P0 = (Rs == imm_U) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,#U5); if (!p0.new) jump:nt #r9:2", 
        "0001000001iissssPP0IIIIIiiiiiii-", 
        "P0 = (Rs == imm_U) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,#U5); if (!p0.new) jump:t #r9:2", 
        "0001000001iissssPP1IIIIIiiiiiii-", 
        "P0 = (Rs == imm_U) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,#U5); if (p0.new) jump:nt #r9:2", 
        "0001000010iissssPP0IIIIIiiiiiii-", 
        "P0 = (Rs > imm_U) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,#U5); if (p0.new) jump:t #r9:2", 
        "0001000010iissssPP1IIIIIiiiiiii-", 
        "P0 = (Rs > imm_U) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,#U5); if (!p0.new) jump:nt #r9:2", 
        "0001000011iissssPP0IIIIIiiiiiii-", 
        "P0 = (Rs > imm_U) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,#U5); if (!p0.new) jump:t #r9:2", 
        "0001000011iissssPP1IIIIIiiiiiii-", 
        "P0 = (Rs > imm_U) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gtu(Rs,#U5); if (p0.new) jump:nt #r9:2", 
        "0001000100iissssPP0IIIIIiiiiiii-", 
        "P0 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gtu(Rs,#U5); if (p0.new) jump:t #r9:2", 
        "0001000100iissssPP1IIIIIiiiiiii-", 
        "P0 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gtu(Rs,#U5); if (!p0.new) jump:nt #r9:2", 
        "0001000101iissssPP0IIIIIiiiiiii-", 
        "P0 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gtu(Rs,#U5); if (!p0.new) jump:t #r9:2", 
        "0001000101iissssPP1IIIIIiiiiiii-", 
        "P0 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,#-1); if (p1.new) jump:nt #r9:2", 
        "0001001110iissssPP0---00iiiiiii-", 
        "P1 = (Rs == -1) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,#-1); if (p1.new) jump:nt #r9:2", 
        "0001001110iissssPP0---01iiiiiii-", 
        "P1 = (Rs > -1) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=tstbit(Rs,#0); if (p1.new) jump:nt #r9:2", 
        "0001001110iissssPP0---11iiiiiii-", 
        "P1 = (Rs & 1) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,#-1); if (p1.new) jump:t #r9:2", 
        "0001001110iissssPP1---00iiiiiii-", 
        "P1 = (Rs == -1) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,#-1); if (p1.new) jump:t #r9:2", 
        "0001001110iissssPP1---01iiiiiii-", 
        "P1 = (Rs > -1) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=tstbit(Rs,#0); if (p1.new) jump:t #r9:2", 
        "0001001110iissssPP1---11iiiiiii-", 
        "P1 = (Rs & 1) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,#-1); if (!p1.new) jump:nt #r9:2", 
        "0001001111iissssPP0---00iiiiiii-", 
        "P1 = (Rs == -1) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,#-1); if (!p1.new) jump:nt #r9:2", 
        "0001001111iissssPP0---01iiiiiii-", 
        "P1 = (Rs > -1) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=tstbit(Rs,#0); if (!p1.new) jump:nt #r9:2", 
        "0001001111iissssPP0---11iiiiiii-", 
        "P1 = (Rs & 1) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,#-1); if (!p1.new) jump:t #r9:2", 
        "0001001111iissssPP1---00iiiiiii-", 
        "P1 = (Rs == -1) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,#-1); if (!p1.new) jump:t #r9:2", 
        "0001001111iissssPP1---01iiiiiii-", 
        "P1 = (Rs > -1) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=tstbit(Rs,#0); if (!p1.new) jump:t #r9:2", 
        "0001001111iissssPP1---11iiiiiii-", 
        "P1 = (Rs & 1) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,#U5); if (p1.new) jump:nt #r9:2", 
        "0001001000iissssPP0IIIIIiiiiiii-", 
        "P1 = (Rs == imm_U) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,#U5); if (p1.new) jump:t #r9:2", 
        "0001001000iissssPP1IIIIIiiiiiii-", 
        "P1 = (Rs == imm_U) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,#U5); if (!p1.new) jump:nt #r9:2", 
        "0001001001iissssPP0IIIIIiiiiiii-", 
        "P1 = (Rs == imm_U) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,#U5); if (!p1.new) jump:t #r9:2", 
        "0001001001iissssPP1IIIIIiiiiiii-", 
        "P1 = (Rs == imm_U) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,#U5); if (p1.new) jump:nt #r9:2", 
        "0001001010iissssPP0IIIIIiiiiiii-", 
        "P1 = (Rs > imm_U) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,#U5); if (p1.new) jump:t #r9:2", 
        "0001001010iissssPP1IIIIIiiiiiii-", 
        "P1 = (Rs > imm_U) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,#U5); if (!p1.new) jump:nt #r9:2", 
        "0001001011iissssPP0IIIIIiiiiiii-", 
        "P1 = (Rs > imm_U) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,#U5); if (!p1.new) jump:t #r9:2", 
        "0001001011iissssPP1IIIIIiiiiiii-", 
        "P1 = (Rs > imm_U) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gtu(Rs,#U5); if (p1.new) jump:nt #r9:2", 
        "0001001100iissssPP0IIIIIiiiiiii-", 
        "P1 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gtu(Rs,#U5); if (p1.new) jump:t #r9:2", 
        "0001001100iissssPP1IIIIIiiiiiii-", 
        "P1 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gtu(Rs,#U5); if (!p1.new) jump:nt #r9:2", 
        "0001001101iissssPP0IIIIIiiiiiii-", 
        "P1 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gtu(Rs,#U5); if (!p1.new) jump:t #r9:2", 
        "0001001101iissssPP1IIIIIiiiiiii-", 
        "P1 = (Rs.uw[0] > imm_U) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,Rt); if (p0.new) jump:nt #r9:2", 
        "0001010000iissssPP00ttttiiiiiii-", 
        "P0 = (Rs == Rt) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,Rt); if (p1.new) jump:nt #r9:2", 
        "0001010000iissssPP01ttttiiiiiii-", 
        "P1 = (Rs == Rt) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,Rt); if (p0.new) jump:t #r9:2", 
        "0001010000iissssPP10ttttiiiiiii-", 
        "P0 = (Rs == Rt) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,Rt); if (p1.new) jump:t #r9:2", 
        "0001010000iissssPP11ttttiiiiiii-", 
        "P1 = (Rs == Rt) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,Rt); if (!p0.new) jump:nt #r9:2", 
        "0001010001iissssPP00ttttiiiiiii-", 
        "P0 = (Rs == Rt) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,Rt); if (!p1.new) jump:nt #r9:2", 
        "0001010001iissssPP01ttttiiiiiii-", 
        "P1 = (Rs == Rt) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.eq(Rs,Rt); if (!p0.new) jump:t #r9:2", 
        "0001010001iissssPP10ttttiiiiiii-", 
        "P0 = (Rs == Rt) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.eq(Rs,Rt); if (!p1.new) jump:t #r9:2", 
        "0001010001iissssPP11ttttiiiiiii-", 
        "P1 = (Rs == Rt) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,Rt); if (p0.new) jump:nt #r9:2", 
        "0001010010iissssPP00ttttiiiiiii-", 
        "P0 = (Rs > Rt) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,Rt); if (p1.new) jump:nt #r9:2", 
        "0001010010iissssPP01ttttiiiiiii-", 
        "P1 = (Rs > Rt) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,Rt); if (p0.new) jump:t #r9:2", 
        "0001010010iissssPP10ttttiiiiiii-", 
        "P0 = (Rs > Rt) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,Rt); if (p1.new) jump:t #r9:2", 
        "0001010010iissssPP11ttttiiiiiii-", 
        "P1 = (Rs > Rt) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,Rt); if (!p0.new) jump:nt #r9:2", 
        "0001010011iissssPP00ttttiiiiiii-", 
        "P0 = (Rs > Rt) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,Rt); if (!p1.new) jump:nt #r9:2", 
        "0001010011iissssPP01ttttiiiiiii-", 
        "P1 = (Rs > Rt) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gt(Rs,Rt); if (!p0.new) jump:t #r9:2", 
        "0001010011iissssPP10ttttiiiiiii-", 
        "P0 = (Rs > Rt) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gt(Rs,Rt); if (!p1.new) jump:t #r9:2", 
        "0001010011iissssPP11ttttiiiiiii-", 
        "P1 = (Rs > Rt) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gtu(Rs,Rt); if (p0.new) jump:nt #r9:2", 
        "0001010100iissssPP00ttttiiiiiii-", 
        "P0 = (Rs.uw[0] > Rt) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gtu(Rs,Rt); if (p1.new) jump:nt #r9:2", 
        "0001010100iissssPP01ttttiiiiiii-", 
        "P1 = (Rs.uw[0] > Rt) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gtu(Rs,Rt); if (p0.new) jump:t #r9:2", 
        "0001010100iissssPP10ttttiiiiiii-", 
        "P0 = (Rs.uw[0] > Rt) ? 0xff : 0x00;\nif (P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gtu(Rs,Rt); if (p1.new) jump:t #r9:2", 
        "0001010100iissssPP11ttttiiiiiii-", 
        "P1 = (Rs.uw[0] > Rt) ? 0xff : 0x00;\nif (P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gtu(Rs,Rt); if (!p0.new) jump:nt #r9:2", 
        "0001010101iissssPP00ttttiiiiiii-", 
        "P0 = (Rs.uw[0] > Rt) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gtu(Rs,Rt); if (!p1.new) jump:nt #r9:2", 
        "0001010101iissssPP01ttttiiiiiii-", 
        "P1 = (Rs.uw[0] > Rt) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p0=cmp.gtu(Rs,Rt); if (!p0.new) jump:t #r9:2", 
        "0001010101iissssPP10ttttiiiiiii-", 
        "P0 = (Rs.uw[0] > Rt) ? 0xff : 0x00;\nif (!P0.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "p1=cmp.gtu(Rs,Rt); if (!p1.new) jump:t #r9:2", 
        "0001010101iissssPP11ttttiiiiiii-", 
        "P1 = (Rs.uw[0] > Rt) ? 0xff : 0x00;\nif (!P1.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "jump #r22:2", 
        "0101100iiiiiiiiiPPiiiiiiiiiiiii-", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nPC = PC + imm_r;"
    ], 
    [
        "if (Pu) jump:nt #r15:2", 
        "01011100ii0iiiiiPPi00-uuiiiiiii-", 
        "if (Pu[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Pu) jump:t #r15:2", 
        "01011100ii0iiiiiPPi10-uuiiiiiii-", 
        "if (Pu[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!Pu) jump:nt #r15:2", 
        "01011100ii1iiiiiPPi00-uuiiiiiii-", 
        "if (!Pu[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!Pu) jump:t #r15:2", 
        "01011100ii1iiiiiPPi10-uuiiiiiii-", 
        "if (!Pu[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Pu.new) jump:nt #r15:2", 
        "01011100ii0iiiiiPPi01-uuiiiiiii-", 
        "if (Pu.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Pu.new) jump:t #r15:2", 
        "01011100ii0iiiiiPPi11-uuiiiiiii-", 
        "if (Pu.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!Pu.new) jump:nt #r15:2", 
        "01011100ii1iiiiiPPi01-uuiiiiiii-", 
        "if (!Pu.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!Pu.new) jump:t #r15:2", 
        "01011100ii1iiiiiPPi11-uuiiiiiii-", 
        "if (!Pu.new[0]) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Rs!=#0) jump:nt #r13:2", 
        "0110000100isssssPPi0iiiiiiiiiii-", 
        "if (Rs != 0) {\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Rs!=#0) jump:t #r13:2", 
        "0110000100isssssPPi1iiiiiiiiiii-", 
        "if (Rs != 0) {\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Rs>=#0) jump:nt #r13:2", 
        "0110000101isssssPPi0iiiiiiiiiii-", 
        "if (Rs >= 0) {\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Rs>=#0) jump:t #r13:2", 
        "0110000101isssssPPi1iiiiiiiiiii-", 
        "if (Rs >= 0) {\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Rs==#0) jump:nt #r13:2", 
        "0110000110isssssPPi0iiiiiiiiiii-", 
        "if (Rs == 0) {\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Rs==#0) jump:t #r13:2", 
        "0110000110isssssPPi1iiiiiiiiiii-", 
        "if (Rs == 0) {\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Rs<=#0) jump:nt #r13:2", 
        "0110000111isssssPPi0iiiiiiiiiii-", 
        "if (Rs <= 0) {\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (Rs<=#0) jump:t #r13:2", 
        "0110000111isssssPPi1iiiiiiiiiii-", 
        "if (Rs <= 0) {\n    PC = PC + imm_r;\n}"
    ], 
    [
        "Rd=#U6; jump #r9:2", 
        "00010110--iiddddPPIIIIIIiiiiiii-", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nRd = imm_U;\nPC = PC + imm_r;"
    ], 
    [
        "Rd=Rs; jump #r9:2", 
        "00010111--iissssPP--ddddiiiiiii-", 
        "apply_extension(imm_r);\nimm_r = imm_r & ~0x3;\nRd = Rs;\nPC = PC + imm_r;"
    ], 
    [
        "Rdd=memd(Rs+Rt<<#u2)", 
        "00111010110sssssPPittttti--ddddd", 
        "EA = Rs + (Rt << imm_u);\nRdd = *EA;"
    ], 
    [
        "Rdd=memd(gp+#u16:3)", 
        "01001ii1110iiiiiPPiiiiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\nRdd = *EA;"
    ], 
    [
        "Rdd=memd(Rs+#s11:3)", 
        "10010ii1110sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\nRdd = *EA;"
    ], 
    [
        "Rdd=memd(Rx++#s4:3:circ(Mu))", 
        "10011001110xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\nRdd = *EA;"
    ], 
    [
        "Rdd=memd(Rx++I:circ(Mu))", 
        "10011001110xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 3, MuV);\nRdd = *EA;"
    ], 
    [
        "Rdd=memd(Re=#U6)", 
        "10011011110eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\nRdd = *EA;\nRe = imm_U;"
    ], 
    [
        "Rdd=memd(Rx++#s4:3)", 
        "10011011110xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\nRdd = *EA;"
    ], 
    [
        "Rdd=memd(Rt<<#u2+#U6)", 
        "10011101110tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\nRdd = *EA;"
    ], 
    [
        "Rdd=memd(Rx++Mu)", 
        "10011101110xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\nRdd = *EA;"
    ], 
    [
        "Rdd=memd(Rx++Mu:brev)", 
        "10011111110xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\nRdd = *EA;"
    ], 
    [
        "if (Pv) Rdd=memd(Rs+Rt<<#u2)", 
        "00110000110sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) Rdd=memd(Rs+Rt<<#u2)", 
        "00110001110sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) Rdd=memd(Rs+Rt<<#u2)", 
        "00110010110sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv.new[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) Rdd=memd(Rs+Rt<<#u2)", 
        "00110011110sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv.new[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rdd=memd(Rs+#u6:3)", 
        "01000001110sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rdd=memd(Rs+#u6:3)", 
        "01000011110sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt.new[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rdd=memd(Rs+#u6:3)", 
        "01000101110sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rdd=memd(Rs+#u6:3)", 
        "01000111110sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt.new[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rdd=memd(Rx++#s4:3)", 
        "10011011110xxxxxPP100ttiiiiddddd", 
        "EA = Rx;\nif (Pt[0]) {\n    Rx = Rx + imm_s;\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rdd=memd(Rx++#s4:3)", 
        "10011011110xxxxxPP101ttiiiiddddd", 
        "EA = Rx;\nif (!Pt[0]) {\n    Rx = Rx + imm_s;\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rdd=memd(Rx++#s4:3)", 
        "10011011110xxxxxPP110ttiiiiddddd", 
        "EA = Rx;\nif (Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rdd=memd(Rx++#s4:3)", 
        "10011011110xxxxxPP111ttiiiiddddd", 
        "EA = Rx;\nif (!Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rdd=memd(#u6)", 
        "10011111110iiiiiPP100tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rdd=memd(#u6)", 
        "10011111110iiiiiPP101tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rdd=memd(#u6)", 
        "10011111110iiiiiPP110tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt.new[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rdd=memd(#u6)", 
        "10011111110iiiiiPP111tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt.new[0]) {\n    Rdd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "Rd=memb(Rs+Rt<<#u2)", 
        "00111010000sssssPPittttti--ddddd", 
        "EA = Rs + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memb(gp+#u16:0)", 
        "01001ii1000iiiiiPPiiiiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\nRd = *EA;"
    ], 
    [
        "Rd=memb(Rs+#s11:0)", 
        "10010ii1000sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memb(Rx++#s4:0:circ(Mu))", 
        "10011001000xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memb(Rx++I:circ(Mu))", 
        "10011001000xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 0, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memb(Re=#U6)", 
        "10011011000eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\nRd = *EA;\nRe = imm_U;"
    ], 
    [
        "Rd=memb(Rx++#s4:0)", 
        "10011011000xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memb(Rt<<#u2+#U6)", 
        "10011101000tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memb(Rx++Mu)", 
        "10011101000xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "Rd=memb(Rx++Mu:brev)", 
        "10011111000xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "if (Pv) Rd=memb(Rs+Rt<<#u2)", 
        "00110000000sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) Rd=memb(Rs+Rt<<#u2)", 
        "00110001000sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) Rd=memb(Rs+Rt<<#u2)", 
        "00110010000sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) Rd=memb(Rs+Rt<<#u2)", 
        "00110011000sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memb(Rs+#u6:0)", 
        "01000001000sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memb(Rs+#u6:0)", 
        "01000011000sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memb(Rs+#u6:0)", 
        "01000101000sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memb(Rs+#u6:0)", 
        "01000111000sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memb(Rx++#s4:0)", 
        "10011011000xxxxxPP100ttiiiiddddd", 
        "EA = Rx;\nif (Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memb(Rx++#s4:0)", 
        "10011011000xxxxxPP101ttiiiiddddd", 
        "EA = Rx;\nif (!Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memb(Rx++#s4:0)", 
        "10011011000xxxxxPP110ttiiiiddddd", 
        "EA = Rx;\nif (Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memb(Rx++#s4:0)", 
        "10011011000xxxxxPP111ttiiiiddddd", 
        "EA = Rx;\nif (!Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memb(#u6)", 
        "10011111000iiiiiPP100tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memb(#u6)", 
        "10011111000iiiiiPP101tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memb(#u6)", 
        "10011111000iiiiiPP110tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memb(#u6)", 
        "10011111000iiiiiPP111tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "Ryy=memb_fifo(Rs+#s11:0)", 
        "10010ii0100sssssPPiiiiiiiiiyyyyy", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\ntmpV = *EA;\nRyy = (Ryy >> 8) | (tmpV << 56);"
    ], 
    [
        "Ryy=memb_fifo(Rx++#s4:0:circ(Mu))", 
        "10011000100xxxxxPPu0--0iiiiyyyyy", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\ntmpV = *EA;\nRyy = (Ryy >> 8) | (tmpV << 56);"
    ], 
    [
        "Ryy=memb_fifo(Rx++I:circ(Mu))", 
        "10011000100xxxxxPPu0--1-0--yyyyy", 
        "EA = Rx;\nRx = circ_add(Rx, I << 0, MuV);\ntmpV = *EA;\nRyy = (Ryy >> 8) | (tmpV << 56);"
    ], 
    [
        "Ryy=memb_fifo(Re=#U6)", 
        "10011010100eeeeePP01IIII-IIyyyyy", 
        "apply_extension(imm_U);\nEA = imm_U;\ntmpV = *EA;\nRyy = (Ryy >> 8) | (tmpV << 56);\nRe = imm_U;"
    ], 
    [
        "Ryy=memb_fifo(Rx++#s4:0)", 
        "10011010100xxxxxPP00---iiiiyyyyy", 
        "EA = Rx;\nRx = Rx + imm_s;\ntmpV = *EA;\nRyy = (Ryy >> 8) | (tmpV << 56);"
    ], 
    [
        "Ryy=memb_fifo(Rt<<#u2+#U6)", 
        "10011100100tttttPPi1IIIIiIIyyyyy", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\ntmpV = *EA;\nRyy = (Ryy >> 8) | (tmpV << 56);"
    ], 
    [
        "Ryy=memb_fifo(Rx++Mu)", 
        "10011100100xxxxxPPu0----0--yyyyy", 
        "EA = Rx;\nRx = Rx + MuV;\ntmpV = *EA;\nRyy = (Ryy >> 8) | (tmpV << 56);"
    ], 
    [
        "Ryy=memb_fifo(Rx++Mu:brev)", 
        "10011110100xxxxxPPu0----0--yyyyy", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\ntmpV = *EA;\nRyy = (Ryy >> 8) | (tmpV << 56);"
    ], 
    [
        "Ryy=memh_fifo(Rs+#s11:1)", 
        "10010ii0010sssssPPiiiiiiiiiyyyyy", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\ntmpV = *EA;\nRyy = (Ryy >> 16) | (tmpV << 48);"
    ], 
    [
        "Ryy=memh_fifo(Rx++#s4:1:circ(Mu))", 
        "10011000010xxxxxPPu0--0iiiiyyyyy", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\ntmpV = *EA;\nRyy = (Ryy >> 16) | (tmpV << 48);"
    ], 
    [
        "Ryy=memh_fifo(Rx++I:circ(Mu))", 
        "10011000010xxxxxPPu0--1-0--yyyyy", 
        "EA = Rx;\nRx = circ_add(Rx, I << 1, MuV);\ntmpV = *EA;\nRyy = (Ryy >> 16) | (tmpV << 48);"
    ], 
    [
        "Ryy=memh_fifo(Re=#U6)", 
        "10011010010eeeeePP01IIII-IIyyyyy", 
        "apply_extension(imm_U);\nEA = imm_U;\ntmpV = *EA;\nRyy = (Ryy >> 16) | (tmpV << 48);\nRe = imm_U;"
    ], 
    [
        "Ryy=memh_fifo(Rx++#s4:1)", 
        "10011010010xxxxxPP00---iiiiyyyyy", 
        "EA = Rx;\nRx = Rx + imm_s;\ntmpV = *EA;\nRyy = (Ryy >> 16) | (tmpV << 48);"
    ], 
    [
        "Ryy=memh_fifo(Rt<<#u2+#U6)", 
        "10011100010tttttPPi1IIIIiIIyyyyy", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\ntmpV = *EA;\nRyy = (Ryy >> 16) | (tmpV << 48);"
    ], 
    [
        "Ryy=memh_fifo(Rx++Mu)", 
        "10011100010xxxxxPPu0----0--yyyyy", 
        "EA = Rx;\nRx = Rx + MuV;\ntmpV = *EA;\nRyy = (Ryy >> 16) | (tmpV << 48);"
    ], 
    [
        "Ryy=memh_fifo(Rx++Mu:brev)", 
        "10011110010xxxxxPPu0----0--yyyyy", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\ntmpV = *EA;\nRyy = (Ryy >> 16) | (tmpV << 48);"
    ], 
    [
        "Rd=memh(Rs+Rt<<#u2)", 
        "00111010010sssssPPittttti--ddddd", 
        "EA = Rs + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memh(gp+#u16:1)", 
        "01001ii1010iiiiiPPiiiiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\nRd = *EA;"
    ], 
    [
        "Rd=memh(Rs+#s11:1)", 
        "10010ii1010sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memh(Rx++#s4:1:circ(Mu))", 
        "10011001010xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memh(Rx++I:circ(Mu))", 
        "10011001010xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 1, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memh(Re=#U6)", 
        "10011011010eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\nRd = *EA;\nRe = imm_U;"
    ], 
    [
        "Rd=memh(Rx++#s4:1)", 
        "10011011010xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memh(Rt<<#u2+#U6)", 
        "10011101010tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memh(Rx++Mu)", 
        "10011101010xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "Rd=memh(Rx++Mu:brev)", 
        "10011111010xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "if (Pv) Rd=memh(Rs+Rt<<#u2)", 
        "00110000010sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) Rd=memh(Rs+Rt<<#u2)", 
        "00110001010sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) Rd=memh(Rs+Rt<<#u2)", 
        "00110010010sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) Rd=memh(Rs+Rt<<#u2)", 
        "00110011010sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memh(Rs+#u6:1)", 
        "01000001010sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memh(Rs+#u6:1)", 
        "01000011010sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memh(Rs+#u6:1)", 
        "01000101010sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memh(Rs+#u6:1)", 
        "01000111010sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memh(Rx++#s4:1)", 
        "10011011010xxxxxPP100ttiiiiddddd", 
        "EA = Rx;\nif (Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memh(Rx++#s4:1)", 
        "10011011010xxxxxPP101ttiiiiddddd", 
        "EA = Rx;\nif (!Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memh(Rx++#s4:1)", 
        "10011011010xxxxxPP110ttiiiiddddd", 
        "EA = Rx;\nif (Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memh(Rx++#s4:1)", 
        "10011011010xxxxxPP111ttiiiiddddd", 
        "EA = Rx;\nif (!Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memh(#u6)", 
        "10011111010iiiiiPP100tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memh(#u6)", 
        "10011111010iiiiiPP101tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memh(#u6)", 
        "10011111010iiiiiPP110tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memh(#u6)", 
        "10011111010iiiiiPP111tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "Rd=memub(Rs+Rt<<#u2)", 
        "00111010001sssssPPittttti--ddddd", 
        "EA = Rs + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memub(gp+#u16:0)", 
        "01001ii1001iiiiiPPiiiiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\nRd = *EA;"
    ], 
    [
        "Rd=memub(Rs+#s11:0)", 
        "10010ii1001sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memub(Rx++#s4:0:circ(Mu))", 
        "10011001001xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memub(Rx++I:circ(Mu))", 
        "10011001001xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 0, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memub(Re=#U6)", 
        "10011011001eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\nRd = *EA;\nRe = imm_U;"
    ], 
    [
        "Rd=memub(Rx++#s4:0)", 
        "10011011001xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memub(Rt<<#u2+#U6)", 
        "10011101001tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memub(Rx++Mu)", 
        "10011101001xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "Rd=memub(Rx++Mu:brev)", 
        "10011111001xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "if (Pv) Rd=memub(Rs+Rt<<#u2)", 
        "00110000001sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) Rd=memub(Rs+Rt<<#u2)", 
        "00110001001sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) Rd=memub(Rs+Rt<<#u2)", 
        "00110010001sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) Rd=memub(Rs+Rt<<#u2)", 
        "00110011001sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memub(Rs+#u6:0)", 
        "01000001001sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memub(Rs+#u6:0)", 
        "01000011001sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memub(Rs+#u6:0)", 
        "01000101001sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memub(Rs+#u6:0)", 
        "01000111001sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memub(Rx++#s4:0)", 
        "10011011001xxxxxPP100ttiiiiddddd", 
        "EA = Rx;\nif (Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memub(Rx++#s4:0)", 
        "10011011001xxxxxPP101ttiiiiddddd", 
        "EA = Rx;\nif (!Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memub(Rx++#s4:0)", 
        "10011011001xxxxxPP110ttiiiiddddd", 
        "EA = Rx;\nif (Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memub(Rx++#s4:0)", 
        "10011011001xxxxxPP111ttiiiiddddd", 
        "EA = Rx;\nif (!Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memub(#u6)", 
        "10011111001iiiiiPP100tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memub(#u6)", 
        "10011111001iiiiiPP101tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memub(#u6)", 
        "10011111001iiiiiPP110tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memub(#u6)", 
        "10011111001iiiiiPP111tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "Rd=memuh(Rs+Rt<<#u2)", 
        "00111010011sssssPPittttti--ddddd", 
        "EA = Rs + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memuh(gp+#u16:1)", 
        "01001ii1011iiiiiPPiiiiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\nRd = *EA;"
    ], 
    [
        "Rd=memuh(Rs+#s11:1)", 
        "10010ii1011sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memuh(Rx++#s4:1:circ(Mu))", 
        "10011001011xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memuh(Rx++I:circ(Mu))", 
        "10011001011xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 1, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memuh(Re=#U6)", 
        "10011011011eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\nRd = *EA;\nRe = imm_U;"
    ], 
    [
        "Rd=memuh(Rx++#s4:1)", 
        "10011011011xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memuh(Rt<<#u2+#U6)", 
        "10011101011tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memuh(Rx++Mu)", 
        "10011101011xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "Rd=memuh(Rx++Mu:brev)", 
        "10011111011xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "if (Pv) Rd=memuh(Rs+Rt<<#u2)", 
        "00110000011sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) Rd=memuh(Rs+Rt<<#u2)", 
        "00110001011sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) Rd=memuh(Rs+Rt<<#u2)", 
        "00110010011sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) Rd=memuh(Rs+Rt<<#u2)", 
        "00110011011sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memuh(Rs+#u6:1)", 
        "01000001011sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memuh(Rs+#u6:1)", 
        "01000011011sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memuh(Rs+#u6:1)", 
        "01000101011sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memuh(Rs+#u6:1)", 
        "01000111011sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memuh(Rx++#s4:1)", 
        "10011011011xxxxxPP100ttiiiiddddd", 
        "EA = Rx;\nif (Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memuh(Rx++#s4:1)", 
        "10011011011xxxxxPP101ttiiiiddddd", 
        "EA = Rx;\nif (!Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memuh(Rx++#s4:1)", 
        "10011011011xxxxxPP110ttiiiiddddd", 
        "EA = Rx;\nif (Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memuh(Rx++#s4:1)", 
        "10011011011xxxxxPP111ttiiiiddddd", 
        "EA = Rx;\nif (!Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memuh(#u6)", 
        "10011111011iiiiiPP100tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memuh(#u6)", 
        "10011111011iiiiiPP101tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memuh(#u6)", 
        "10011111011iiiiiPP110tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memuh(#u6)", 
        "10011111011iiiiiPP111tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "Rd=memw(Rs+Rt<<#u2)", 
        "00111010100sssssPPittttti--ddddd", 
        "EA = Rs + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memw(gp+#u16:2)", 
        "01001ii1100iiiiiPPiiiiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\nRd = *EA;"
    ], 
    [
        "Rd=memw(Rs+#s11:2)", 
        "10010ii1100sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memw(Rx++#s4:2:circ(Mu))", 
        "10011001100xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memw(Rx++I:circ(Mu))", 
        "10011001100xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 2, MuV);\nRd = *EA;"
    ], 
    [
        "Rd=memw(Re=#U6)", 
        "10011011100eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\nRd = *EA;\nRe = imm_U;"
    ], 
    [
        "Rd=memw(Rx++#s4:2)", 
        "10011011100xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\nRd = *EA;"
    ], 
    [
        "Rd=memw(Rt<<#u2+#U6)", 
        "10011101100tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\nRd = *EA;"
    ], 
    [
        "Rd=memw(Rx++Mu)", 
        "10011101100xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "Rd=memw(Rx++Mu:brev)", 
        "10011111100xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\nRd = *EA;"
    ], 
    [
        "if (Pv) Rd=memw(Rs+Rt<<#u2)", 
        "00110000100sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) Rd=memw(Rs+Rt<<#u2)", 
        "00110001100sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) Rd=memw(Rs+Rt<<#u2)", 
        "00110010100sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) Rd=memw(Rs+Rt<<#u2)", 
        "00110011100sssssPPitttttivvddddd", 
        "EA = Rs + (Rt << imm_u);\nif (!Pv.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memw(Rs+#u6:2)", 
        "01000001100sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memw(Rs+#u6:2)", 
        "01000011100sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memw(Rs+#u6:2)", 
        "01000101100sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memw(Rs+#u6:2)", 
        "01000111100sssssPP0ttiiiiiiddddd", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memw(Rx++#s4:2)", 
        "10011011100xxxxxPP100ttiiiiddddd", 
        "EA = Rx;\nif (Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memw(Rx++#s4:2)", 
        "10011011100xxxxxPP101ttiiiiddddd", 
        "EA = Rx;\nif (!Pt[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memw(Rx++#s4:2)", 
        "10011011100xxxxxPP110ttiiiiddddd", 
        "EA = Rx;\nif (Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memw(Rx++#s4:2)", 
        "10011011100xxxxxPP111ttiiiiddddd", 
        "EA = Rx;\nif (!Pt.new[0]) {\n    Rx = Rx + imm_s;\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt) Rd=memw(#u6)", 
        "10011111100iiiiiPP100tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt) Rd=memw(#u6)", 
        "10011111100iiiiiPP101tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pt.new) Rd=memw(#u6)", 
        "10011111100iiiiiPP110tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pt.new) Rd=memw(#u6)", 
        "10011111100iiiiiPP111tti1--ddddd", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pt.new[0]) {\n    Rd = *EA;\n} else {\n    NOP;\n}"
    ], 
    [
        "Rdd=deallocframe(Rs):raw", 
        "10010000000sssssPP0--------ddddd", 
        "EA = Rs;\ntmp = *EA;\nRdd = frame_unscramble(tmp);\nSP = EA + 8;"
    ], 
    [
        "Rdd=dealloc_return(Rs):raw", 
        "10010110000sssssPP0000-----ddddd", 
        "EA = Rs;\ntmp = *EA;\nRdd = frame_unscramble(tmp);\nSP = EA + 8;\nPC = Rdd.w[1];"
    ], 
    [
        "if (Pv.new) Rdd=dealloc_return(Rs):nt:raw", 
        "10010110000sssssPP0010vv---ddddd", 
        "EA = Rs;\nif (Pv.new[0]) {\n    tmp = *EA;\n    Rdd = frame_unscramble(tmp);\n    SP = EA + 8;\n    PC = Rdd.w[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) Rdd=dealloc_return(Rs):raw", 
        "10010110000sssssPP0100vv---ddddd", 
        "EA = Rs;\nif (Pv[0]) {\n    tmp = *EA;\n    Rdd = frame_unscramble(tmp);\n    SP = EA + 8;\n    PC = Rdd.w[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) Rdd=dealloc_return(Rs):t:raw", 
        "10010110000sssssPP0110vv---ddddd", 
        "EA = Rs;\nif (Pv.new[0]) {\n    tmp = *EA;\n    Rdd = frame_unscramble(tmp);\n    SP = EA + 8;\n    PC = Rdd.w[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) Rdd=dealloc_return(Rs):nt:raw", 
        "10010110000sssssPP1010vv---ddddd", 
        "EA = Rs;\nif (!Pv.new[0]) {\n    tmp = *EA;\n    Rdd = frame_unscramble(tmp);\n    SP = EA + 8;\n    PC = Rdd.w[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) Rdd=dealloc_return(Rs):raw", 
        "10010110000sssssPP1100vv---ddddd", 
        "EA = Rs;\nif (!Pv[0]) {\n    tmp = *EA;\n    Rdd = frame_unscramble(tmp);\n    SP = EA + 8;\n    PC = Rdd.w[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) Rdd=dealloc_return(Rs):t:raw", 
        "10010110000sssssPP1110vv---ddddd", 
        "EA = Rs;\nif (!Pv.new[0]) {\n    tmp = *EA;\n    Rdd = frame_unscramble(tmp);\n    SP = EA + 8;\n    PC = Rdd.w[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "Rd=membh(Rs+#s11:1)", 
        "10010ii0001sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=memubh(Rs+#s11:1)", 
        "10010ii0011sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=memubh(Rs+#s11:2)", 
        "10010ii0101sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=membh(Rs+#s11:2)", 
        "10010ii0111sssssPPiiiiiiiiiddddd", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=membh(Rx++#s4:1:circ(Mu))", 
        "10011000001xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=membh(Rx++I:circ(Mu))", 
        "10011000001xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 1, MuV);\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=memubh(Rx++#s4:1:circ(Mu))", 
        "10011000011xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rd=memubh(Rx++I:circ(Mu))", 
        "10011000011xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 1, MuV);\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=memubh(Rx++#s4:2:circ(Mu))", 
        "10011000101xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=memubh(Rx++I:circ(Mu))", 
        "10011000101xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 2, MuV);\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=membh(Rx++#s4:2:circ(Mu))", 
        "10011000111xxxxxPPu0--0iiiiddddd", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rdd=membh(Rx++I:circ(Mu))", 
        "10011000111xxxxxPPu0--1-0--ddddd", 
        "EA = Rx;\nRx = circ_add(Rx, I << 2, MuV);\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=membh(Re=#U6)", 
        "10011010001eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.b[i];\n}\n\nRe = imm_U;"
    ], 
    [
        "Rd=membh(Rx++#s4:1)", 
        "10011010001xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=memubh(Re=#U6)", 
        "10011010011eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.ub[i];\n}\n\nRe = imm_U;"
    ], 
    [
        "Rd=memubh(Rx++#s4:1)", 
        "10011010011xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=memubh(Re=#U6)", 
        "10011010101eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.ub[i];\n}\n\nRe = imm_U;"
    ], 
    [
        "Rdd=memubh(Rx++#s4:2)", 
        "10011010101xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=membh(Re=#U6)", 
        "10011010111eeeeePP01IIII-IIddddd", 
        "apply_extension(imm_U);\nEA = imm_U;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.b[i];\n}\n\nRe = imm_U;"
    ], 
    [
        "Rdd=membh(Rx++#s4:2)", 
        "10011010111xxxxxPP00---iiiiddddd", 
        "EA = Rx;\nRx = Rx + imm_s;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=membh(Rt<<#u2+#U6)", 
        "10011100001tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=membh(Rx++Mu)", 
        "10011100001xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=memubh(Rt<<#u2+#U6)", 
        "10011100011tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rd=memubh(Rx++Mu)", 
        "10011100011xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=memubh(Rt<<#u2+#U6)", 
        "10011100101tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=memubh(Rx++Mu)", 
        "10011100101xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=membh(Rt<<#u2+#U6)", 
        "10011100111tttttPPi1IIIIiIIddddd", 
        "apply_extension(imm_U);\nEA = imm_U + (Rt << imm_u);\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rdd=membh(Rx++Mu)", 
        "10011100111xxxxxPPu0----0--ddddd", 
        "EA = Rx;\nRx = Rx + MuV;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=membh(Rx++Mu:brev)", 
        "10011110001xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "Rd=memubh(Rx++Mu:brev)", 
        "10011110011xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\ntmpV = *EA;\nfor (i = 0; i < 2; i++) {\n    Rd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=memubh(Rx++Mu:brev)", 
        "10011110101xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.ub[i];\n}"
    ], 
    [
        "Rdd=membh(Rx++Mu:brev)", 
        "10011110111xxxxxPPu0----0--ddddd", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\ntmpV = *EA;\nfor (i = 0; i < 4; i++) {\n    Rdd.h[i] = tmpV.b[i];\n}"
    ], 
    [
        "memb(Rs+#u6:0)+=Rt", 
        "00111110-00sssssPP0iiiiii00ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp += Rt;\n*EA = tmp;"
    ], 
    [
        "memb(Rs+#u6:0)-=Rt", 
        "00111110-00sssssPP0iiiiii01ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp -= Rt;\n*EA = tmp;"
    ], 
    [
        "memb(Rs+#u6:0)&=Rt", 
        "00111110-00sssssPP0iiiiii10ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp &= Rt;\n*EA = tmp;"
    ], 
    [
        "memb(Rs+#u6:0)|=Rt", 
        "00111110-00sssssPP0iiiiii11ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp |= Rt;\n*EA = tmp;"
    ], 
    [
        "memb(Rs+#u6:0)+=#U5", 
        "00111111-00sssssPP0iiiiii00IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp += imm_U;\n*EA = tmp;"
    ], 
    [
        "memb(Rs+#u6:0)-=#U5", 
        "00111111-00sssssPP0iiiiii01IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp -= imm_U;\n*EA = tmp;"
    ], 
    [
        "memb(Rs+#u6:0)=clrbit(#U5)", 
        "00111111-00sssssPP0iiiiii10IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp &= (~(1 << imm_U));\n*EA = tmp;"
    ], 
    [
        "memb(Rs+#u6:0)=setbit(#U5)", 
        "00111111-00sssssPP0iiiiii11IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp |= (1 << imm_U);\n*EA = tmp;"
    ], 
    [
        "memh(Rs+#u6:1)+=Rt", 
        "00111110-01sssssPP0iiiiii00ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp += Rt;\n*EA = tmp;"
    ], 
    [
        "memh(Rs+#u6:1)-=Rt", 
        "00111110-01sssssPP0iiiiii01ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp -= Rt;\n*EA = tmp;"
    ], 
    [
        "memh(Rs+#u6:1)&=Rt", 
        "00111110-01sssssPP0iiiiii10ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp &= Rt;\n*EA = tmp;"
    ], 
    [
        "memh(Rs+#u6:1)|=Rt", 
        "00111110-01sssssPP0iiiiii11ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp |= Rt;\n*EA = tmp;"
    ], 
    [
        "memh(Rs+#u6:1)+=#U5", 
        "00111111-01sssssPP0iiiiii00IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp += imm_U;\n*EA = tmp;"
    ], 
    [
        "memh(Rs+#u6:1)-=#U5", 
        "00111111-01sssssPP0iiiiii01IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp -= imm_U;\n*EA = tmp;"
    ], 
    [
        "memh(Rs+#u6:1)=clrbit(#U5)", 
        "00111111-01sssssPP0iiiiii10IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp &= (~(1 << imm_U));\n*EA = tmp;"
    ], 
    [
        "memh(Rs+#u6:1)=setbit(#U5)", 
        "00111111-01sssssPP0iiiiii11IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp |= (1 << imm_U);\n*EA = tmp;"
    ], 
    [
        "memw(Rs+#u6:2)+=Rt", 
        "00111110-10sssssPP0iiiiii00ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp += Rt;\n*EA = tmp;"
    ], 
    [
        "memw(Rs+#u6:2)-=Rt", 
        "00111110-10sssssPP0iiiiii01ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp -= Rt;\n*EA = tmp;"
    ], 
    [
        "memw(Rs+#u6:2)&=Rt", 
        "00111110-10sssssPP0iiiiii10ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp &= Rt;\n*EA = tmp;"
    ], 
    [
        "memw(Rs+#u6:2)|=Rt", 
        "00111110-10sssssPP0iiiiii11ttttt", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp |= Rt;\n*EA = tmp;"
    ], 
    [
        "memw(Rs+#u6:2)+=#U5", 
        "00111111-10sssssPP0iiiiii00IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp += imm_U;\n*EA = tmp;"
    ], 
    [
        "memw(Rs+#u6:2)-=#U5", 
        "00111111-10sssssPP0iiiiii01IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp -= imm_U;\n*EA = tmp;"
    ], 
    [
        "memw(Rs+#u6:2)=clrbit(#U5)", 
        "00111111-10sssssPP0iiiiii10IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp &= (~(1 << imm_U));\n*EA = tmp;"
    ], 
    [
        "memw(Rs+#u6:2)=setbit(#U5)", 
        "00111111-10sssssPP0iiiiii11IIIII", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\ntmp = *EA;\ntmp |= (1 << imm_U);\n*EA = tmp;"
    ], 
    [
        "if (cmp.eq(Ns.new,Rt)) jump:nt #r9:2", 
        "0010000000ii-sssPP0tttttiiiiiii-", 
        "if ((Ns.new == Rt)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.eq(Ns.new,Rt)) jump:t #r9:2", 
        "0010000000ii-sssPP1tttttiiiiiii-", 
        "if ((Ns.new == Rt)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.eq(Ns.new,Rt)) jump:nt #r9:2", 
        "0010000001ii-sssPP0tttttiiiiiii-", 
        "if ((Ns.new != Rt)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.eq(Ns.new,Rt)) jump:t #r9:2", 
        "0010000001ii-sssPP1tttttiiiiiii-", 
        "if ((Ns.new != Rt)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gt(Ns.new,Rt)) jump:nt #r9:2", 
        "0010000010ii-sssPP0tttttiiiiiii-", 
        "if ((Ns.new > Rt)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gt(Ns.new,Rt)) jump:t #r9:2", 
        "0010000010ii-sssPP1tttttiiiiiii-", 
        "if ((Ns.new > Rt)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gt(Ns.new,Rt)) jump:nt #r9:2", 
        "0010000011ii-sssPP0tttttiiiiiii-", 
        "if (!(Ns.new > Rt)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gt(Ns.new,Rt)) jump:t #r9:2", 
        "0010000011ii-sssPP1tttttiiiiiii-", 
        "if (!(Ns.new > Rt)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gtu(Ns.new,Rt)) jump:nt #r9:2", 
        "0010000100ii-sssPP0tttttiiiiiii-", 
        "if ((Ns.new.uw[0] > Rt.uw[0])) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gtu(Ns.new,Rt)) jump:t #r9:2", 
        "0010000100ii-sssPP1tttttiiiiiii-", 
        "if ((Ns.new.uw[0] > Rt.uw[0])) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gtu(Ns.new,Rt)) jump:nt #r9:2", 
        "0010000101ii-sssPP0tttttiiiiiii-", 
        "if (!(Ns.new.uw[0] > Rt.uw[0])) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gtu(Ns.new,Rt)) jump:t #r9:2", 
        "0010000101ii-sssPP1tttttiiiiiii-", 
        "if (!(Ns.new.uw[0] > Rt.uw[0])) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gt(Rt,Ns.new)) jump:nt #r9:2", 
        "0010000110ii-sssPP0tttttiiiiiii-", 
        "if ((Rt > Ns.new)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gt(Rt,Ns.new)) jump:t #r9:2", 
        "0010000110ii-sssPP1tttttiiiiiii-", 
        "if ((Rt > Ns.new)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gt(Rt,Ns.new)) jump:nt #r9:2", 
        "0010000111ii-sssPP0tttttiiiiiii-", 
        "if (!(Rt > Ns.new)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gt(Rt,Ns.new)) jump:t #r9:2", 
        "0010000111ii-sssPP1tttttiiiiiii-", 
        "if (!(Rt > Ns.new)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gtu(Rt,Ns.new)) jump:nt #r9:2", 
        "0010001000ii-sssPP0tttttiiiiiii-", 
        "if ((Rt.uw[0] > Ns.new.uw[0])) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gtu(Rt,Ns.new)) jump:t #r9:2", 
        "0010001000ii-sssPP1tttttiiiiiii-", 
        "if ((Rt.uw[0] > Ns.new.uw[0])) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gtu(Rt,Ns.new)) jump:nt #r9:2", 
        "0010001001ii-sssPP0tttttiiiiiii-", 
        "if (!(Rt.uw[0] > Ns.new.uw[0])) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gtu(Rt,Ns.new)) jump:t #r9:2", 
        "0010001001ii-sssPP1tttttiiiiiii-", 
        "if (!(Rt.uw[0] > Ns.new.uw[0])) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.eq(Ns.new,#U5)) jump:nt #r9:2", 
        "0010010000ii-sssPP0IIIIIiiiiiii-", 
        "if ((Ns.new == (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.eq(Ns.new,#U5)) jump:t #r9:2", 
        "0010010000ii-sssPP1IIIIIiiiiiii-", 
        "if ((Ns.new == (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.eq(Ns.new,#U5)) jump:nt #r9:2", 
        "0010010001ii-sssPP0IIIIIiiiiiii-", 
        "if ((Ns.new != (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.eq(Ns.new,#U5)) jump:t #r9:2", 
        "0010010001ii-sssPP1IIIIIiiiiiii-", 
        "if ((Ns.new != (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gt(Ns.new,#U5)) jump:nt #r9:2", 
        "0010010010ii-sssPP0IIIIIiiiiiii-", 
        "if ((Ns.new > (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gt(Ns.new,#U5)) jump:t #r9:2", 
        "0010010010ii-sssPP1IIIIIiiiiiii-", 
        "if ((Ns.new > (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gt(Ns.new,#U5)) jump:nt #r9:2", 
        "0010010011ii-sssPP0IIIIIiiiiiii-", 
        "if (!(Ns.new > (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gt(Ns.new,#U5)) jump:t #r9:2", 
        "0010010011ii-sssPP1IIIIIiiiiiii-", 
        "if (!(Ns.new > (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gtu(Ns.new,#U5)) jump:nt #r9:2", 
        "0010010100ii-sssPP0IIIIIiiiiiii-", 
        "if ((Ns.new.uw[0] > (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gtu(Ns.new,#U5)) jump:t #r9:2", 
        "0010010100ii-sssPP1IIIIIiiiiiii-", 
        "if ((Ns.new.uw[0] > (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gtu(Ns.new,#U5)) jump:nt #r9:2", 
        "0010010101ii-sssPP0IIIIIiiiiiii-", 
        "if (!(Ns.new.uw[0] > (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gtu(Ns.new,#U5)) jump:t #r9:2", 
        "0010010101ii-sssPP1IIIIIiiiiiii-", 
        "if (!(Ns.new.uw[0] > (imm_U))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (tstbit(Ns.new,#0)) jump:nt #r9:2", 
        "0010010110ii-sssPP0-----iiiiiii-", 
        "if (((Ns.new) & 1)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (tstbit(Ns.new,#0)) jump:t #r9:2", 
        "0010010110ii-sssPP1-----iiiiiii-", 
        "if (((Ns.new) & 1)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!tstbit(Ns.new,#0)) jump:nt #r9:2", 
        "0010010111ii-sssPP0-----iiiiiii-", 
        "if (!((Ns.new) & 1)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!tstbit(Ns.new,#0)) jump:t #r9:2", 
        "0010010111ii-sssPP1-----iiiiiii-", 
        "if (!((Ns.new) & 1)) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.eq(Ns.new,#-1)) jump:nt #r9:2", 
        "0010011000ii-sssPP0-----iiiiiii-", 
        "if ((Ns.new == (-1))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.eq(Ns.new,#-1)) jump:t #r9:2", 
        "0010011000ii-sssPP1-----iiiiiii-", 
        "if ((Ns.new == (-1))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.eq(Ns.new,#-1)) jump:nt #r9:2", 
        "0010011001ii-sssPP0-----iiiiiii-", 
        "if ((Ns.new != (-1))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.eq(Ns.new,#-1)) jump:t #r9:2", 
        "0010011001ii-sssPP1-----iiiiiii-", 
        "if ((Ns.new != (-1))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gt(Ns.new,#-1)) jump:nt #r9:2", 
        "0010011010ii-sssPP0-----iiiiiii-", 
        "if ((Ns.new > (-1))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (cmp.gt(Ns.new,#-1)) jump:t #r9:2", 
        "0010011010ii-sssPP1-----iiiiiii-", 
        "if ((Ns.new > (-1))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gt(Ns.new,#-1)) jump:nt #r9:2", 
        "0010011011ii-sssPP0-----iiiiiii-", 
        "if (!(Ns.new > (-1))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "if (!cmp.gt(Ns.new,#-1)) jump:t #r9:2", 
        "0010011011ii-sssPP1-----iiiiiii-", 
        "if (!(Ns.new > (-1))) {\n    apply_extension(imm_r);\n    imm_r = imm_r & ~0x3;\n    PC = PC + imm_r;\n}"
    ], 
    [
        "memb(Rs+Ru<<#u2)=Nt.new", 
        "00111011101sssssPPiuuuuui--00ttt", 
        "EA = Rs + (Ru << imm_u);\n*EA = Nt.new & 0xff;"
    ], 
    [
        "memb(gp+#u16:0)=Nt.new", 
        "01001ii0101iiiiiPPi00tttiiiiiiii", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\n*EA = Nt.new & 0xff;"
    ], 
    [
        "memb(Rs+#s11:0)=Nt.new", 
        "10100ii1101sssssPPi00tttiiiiiiii", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\n*EA = Nt.new & 0xff;"
    ], 
    [
        "memb(Rx++I:circ(Mu))=Nt.new", 
        "10101001101xxxxxPPu00ttt0-----1-", 
        "EA = Rx;\nRx = circ_add(Rx, I << 0, MuV);\n*EA = Nt.new & 0xff;"
    ], 
    [
        "memb(Rx++#s4:0:circ(Mu))=Nt.new", 
        "10101001101xxxxxPPu00ttt0iiii-0-", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\n*EA = Nt.new & 0xff;"
    ], 
    [
        "memb(Re=#U6)=Nt.new", 
        "10101011101eeeeePP000ttt1-IIIIII", 
        "apply_extension(imm_U);\nEA = imm_U;\n*EA = Nt.new & 0xff;\nRe = imm_U;"
    ], 
    [
        "memb(Rx++#s4:0)=Nt.new", 
        "10101011101xxxxxPP000ttt0iiii-0-", 
        "EA = Rx;\nRx = Rx + imm_s;\n*EA = Nt.new & 0xff;"
    ], 
    [
        "memb(Ru<<#u2+#U6)=Nt.new", 
        "10101101101uuuuuPPi00ttt1iIIIIII", 
        "apply_extension(imm_U);\nEA = imm_U + (Ru << imm_u);\n*EA = Nt.new & 0xff;"
    ], 
    [
        "memb(Rx++Mu)=Nt.new", 
        "10101101101xxxxxPPu00ttt0-------", 
        "EA = Rx;\nRx = Rx + MuV;\n*EA = Nt.new & 0xff;"
    ], 
    [
        "memb(Rx++Mu:brev)=Nt.new", 
        "10101111101xxxxxPPu00ttt0-------", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\n*EA = Nt.new & 0xff;"
    ], 
    [
        "if (Pv) memb(Rs+Ru<<#u2)=Nt.new", 
        "00110100101sssssPPiuuuuuivv00ttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memb(Rs+Ru<<#u2)=Nt.new", 
        "00110101101sssssPPiuuuuuivv00ttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memb(Rs+Ru<<#u2)=Nt.new", 
        "00110110101sssssPPiuuuuuivv00ttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv.new[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memb(Rs+Ru<<#u2)=Nt.new", 
        "00110111101sssssPPiuuuuuivv00ttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv.new[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memb(Rs+#u6:0)=Nt.new", 
        "01000000101sssssPPi00tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memb(Rs+#u6:0)=Nt.new", 
        "01000010101sssssPPi00tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv.new[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memb(Rs+#u6:0)=Nt.new", 
        "01000100101sssssPPi00tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memb(Rs+#u6:0)=Nt.new", 
        "01000110101sssssPPi00tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv.new[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memb(Rx++#s4:0)=Nt.new", 
        "10101011101xxxxxPP100ttt0iiii0vv", 
        "EA = Rx;\nif (Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memb(Rx++#s4:0)=Nt.new", 
        "10101011101xxxxxPP100ttt0iiii1vv", 
        "EA = Rx;\nif (!Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memb(Rx++#s4:0)=Nt.new", 
        "10101011101xxxxxPP100ttt1iiii0vv", 
        "EA = Rx;\nif (Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memb(Rx++#s4:0)=Nt.new", 
        "10101011101xxxxxPP100ttt1iiii1vv", 
        "EA = Rx;\nif (!Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memb(#u6)=Nt.new", 
        "10101111101---iiPP000ttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memb(#u6)=Nt.new", 
        "10101111101---iiPP000ttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memb(#u6)=Nt.new", 
        "10101111101---iiPP100ttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv.new[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memb(#u6)=Nt.new", 
        "10101111101---iiPP100ttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv.new[0]) {\n    *EA = Nt.new & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "memh(Rs+Ru<<#u2)=Nt.new", 
        "00111011101sssssPPiuuuuui--01ttt", 
        "EA = Rs + (Ru << imm_u);\n*EA = Nt.new.h[0];"
    ], 
    [
        "memh(gp+#u16:1)=Nt.new", 
        "01001ii0101iiiiiPPi01tttiiiiiiii", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\n*EA = Nt.new.h[0];"
    ], 
    [
        "memh(Rs+#s11:1)=Nt.new", 
        "10100ii1101sssssPPi01tttiiiiiiii", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\n*EA = Nt.new.h[0];"
    ], 
    [
        "memh(Rx++I:circ(Mu))=Nt.new", 
        "10101001101xxxxxPPu01ttt0-----1-", 
        "EA = Rx;\nRx = circ_add(Rx, I << 1, MuV);\n*EA = Nt.new.h[0];"
    ], 
    [
        "memh(Rx++#s4:1:circ(Mu))=Nt.new", 
        "10101001101xxxxxPPu01ttt0iiii-0-", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\n*EA = Nt.new.h[0];"
    ], 
    [
        "memh(Re=#U6)=Nt.new", 
        "10101011101eeeeePP001ttt1-IIIIII", 
        "apply_extension(imm_U);\nEA = imm_U;\n*EA = Nt.new.h[0];\nRe = imm_U;"
    ], 
    [
        "memh(Rx++#s4:1)=Nt.new", 
        "10101011101xxxxxPP001ttt0iiii-0-", 
        "EA = Rx;\nRx = Rx + imm_s;\n*EA = Nt.new.h[0];"
    ], 
    [
        "memh(Ru<<#u2+#U6)=Nt.new", 
        "10101101101uuuuuPPi01ttt1iIIIIII", 
        "apply_extension(imm_U);\nEA = imm_U + (Ru << imm_u);\n*EA = Nt.new.h[0];"
    ], 
    [
        "memh(Rx++Mu)=Nt.new", 
        "10101101101xxxxxPPu01ttt0-------", 
        "EA = Rx;\nRx = Rx + MuV;\n*EA = Nt.new.h[0];"
    ], 
    [
        "memh(Rx++Mu:brev)=Nt.new", 
        "10101111101xxxxxPPu01ttt0-------", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\n*EA = Nt.new.h[0];"
    ], 
    [
        "if (Pv) memh(Rs+Ru<<#u2)=Nt.new", 
        "00110100101sssssPPiuuuuuivv01ttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rs+Ru<<#u2)=Nt.new", 
        "00110101101sssssPPiuuuuuivv01ttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rs+Ru<<#u2)=Nt.new", 
        "00110110101sssssPPiuuuuuivv01ttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv.new[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rs+Ru<<#u2)=Nt.new", 
        "00110111101sssssPPiuuuuuivv01ttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv.new[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(Rs+#u6:1)=Nt.new", 
        "01000000101sssssPPi01tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rs+#u6:1)=Nt.new", 
        "01000010101sssssPPi01tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv.new[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rs+#u6:1)=Nt.new", 
        "01000100101sssssPPi01tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rs+#u6:1)=Nt.new", 
        "01000110101sssssPPi01tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv.new[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(Rx++#s4:1)=Nt.new", 
        "10101011101xxxxxPP101ttt0iiii0vv", 
        "EA = Rx;\nif (Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rx++#s4:1)=Nt.new", 
        "10101011101xxxxxPP101ttt0iiii1vv", 
        "EA = Rx;\nif (!Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rx++#s4:1)=Nt.new", 
        "10101011101xxxxxPP101ttt1iiii0vv", 
        "EA = Rx;\nif (Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rx++#s4:1)=Nt.new", 
        "10101011101xxxxxPP101ttt1iiii1vv", 
        "EA = Rx;\nif (!Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(#u6)=Nt.new", 
        "10101111101---iiPP001ttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(#u6)=Nt.new", 
        "10101111101---iiPP001ttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(#u6)=Nt.new", 
        "10101111101---iiPP101ttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv.new[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(#u6)=Nt.new", 
        "10101111101---iiPP101ttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv.new[0]) {\n    *EA = Nt.new.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "memw(Rs+Ru<<#u2)=Nt.new", 
        "00111011101sssssPPiuuuuui--10ttt", 
        "EA = Rs + (Ru << imm_u);\n*EA = Nt.new;"
    ], 
    [
        "memw(gp+#u16:2)=Nt.new", 
        "01001ii0101iiiiiPPi10tttiiiiiiii", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\n*EA = Nt.new;"
    ], 
    [
        "memw(Rs+#s11:2)=Nt.new", 
        "10100ii1101sssssPPi10tttiiiiiiii", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\n*EA = Nt.new;"
    ], 
    [
        "memw(Rx++I:circ(Mu))=Nt.new", 
        "10101001101xxxxxPPu10ttt0-----1-", 
        "EA = Rx;\nRx = circ_add(Rx, I << 2, MuV);\n*EA = Nt.new;"
    ], 
    [
        "memw(Rx++#s4:2:circ(Mu))=Nt.new", 
        "10101001101xxxxxPPu10ttt0iiii-0-", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\n*EA = Nt.new;"
    ], 
    [
        "memw(Re=#U6)=Nt.new", 
        "10101011101eeeeePP010ttt1-IIIIII", 
        "apply_extension(imm_U);\nEA = imm_U;\n*EA = Nt.new;\nRe = imm_U;"
    ], 
    [
        "memw(Rx++#s4:2)=Nt.new", 
        "10101011101xxxxxPP010ttt0iiii-0-", 
        "EA = Rx;\nRx = Rx + imm_s;\n*EA = Nt.new;"
    ], 
    [
        "memw(Ru<<#u2+#U6)=Nt.new", 
        "10101101101uuuuuPPi10ttt1iIIIIII", 
        "apply_extension(imm_U);\nEA = imm_U + (Ru << imm_u);\n*EA = Nt.new;"
    ], 
    [
        "memw(Rx++Mu)=Nt.new", 
        "10101101101xxxxxPPu10ttt0-------", 
        "EA = Rx;\nRx = Rx + MuV;\n*EA = Nt.new;"
    ], 
    [
        "memw(Rx++Mu:brev)=Nt.new", 
        "10101111101xxxxxPPu10ttt0-------", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\n*EA = Nt.new;"
    ], 
    [
        "if (Pv) memw(Rs+Ru<<#u2)=Nt.new", 
        "00110100101sssssPPiuuuuuivv10ttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memw(Rs+Ru<<#u2)=Nt.new", 
        "00110101101sssssPPiuuuuuivv10ttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memw(Rs+Ru<<#u2)=Nt.new", 
        "00110110101sssssPPiuuuuuivv10ttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv.new[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memw(Rs+Ru<<#u2)=Nt.new", 
        "00110111101sssssPPiuuuuuivv10ttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv.new[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memw(Rs+#u6:2)=Nt.new", 
        "01000000101sssssPPi10tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memw(Rs+#u6:2)=Nt.new", 
        "01000010101sssssPPi10tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv.new[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memw(Rs+#u6:2)=Nt.new", 
        "01000100101sssssPPi10tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memw(Rs+#u6:2)=Nt.new", 
        "01000110101sssssPPi10tttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv.new[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memw(Rx++#s4:2)=Nt.new", 
        "10101011101xxxxxPP110ttt0iiii0vv", 
        "EA = Rx;\nif (Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memw(Rx++#s4:2)=Nt.new", 
        "10101011101xxxxxPP110ttt0iiii1vv", 
        "EA = Rx;\nif (!Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memw(Rx++#s4:2)=Nt.new", 
        "10101011101xxxxxPP110ttt1iiii0vv", 
        "EA = Rx;\nif (Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memw(Rx++#s4:2)=Nt.new", 
        "10101011101xxxxxPP110ttt1iiii1vv", 
        "EA = Rx;\nif (!Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memw(#u6)=Nt.new", 
        "10101111101---iiPP010ttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memw(#u6)=Nt.new", 
        "10101111101---iiPP010ttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memw(#u6)=Nt.new", 
        "10101111101---iiPP110ttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv.new[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memw(#u6)=Nt.new", 
        "10101111101---iiPP110ttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv.new[0]) {\n    *EA = Nt.new;\n} else {\n    NOP;\n}"
    ], 
    [
        "memd(Rs+Ru<<#u2)=Rtt", 
        "00111011110sssssPPiuuuuui--ttttt", 
        "EA = Rs + (Ru << imm_u);\n*EA = Rtt;"
    ], 
    [
        "memd(gp+#u16:3)=Rtt", 
        "01001ii0110iiiiiPPitttttiiiiiiii", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\n*EA = Rtt;"
    ], 
    [
        "memd(Rs+#s11:3)=Rtt", 
        "10100ii1110sssssPPitttttiiiiiiii", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\n*EA = Rtt;"
    ], 
    [
        "memd(Rx++I:circ(Mu))=Rtt", 
        "10101001110xxxxxPPuttttt0-----1-", 
        "EA = Rx;\nRx = circ_add(Rx, I << 3, MuV);\n*EA = Rtt;"
    ], 
    [
        "memd(Rx++#s4:3:circ(Mu))=Rtt", 
        "10101001110xxxxxPPuttttt0iiii-0-", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\n*EA = Rtt;"
    ], 
    [
        "memd(Re=#U6)=Rtt", 
        "10101011110eeeeePP0ttttt1-IIIIII", 
        "apply_extension(imm_U);\nEA = imm_U;\n*EA = Rtt;\nRe = imm_U;"
    ], 
    [
        "memd(Rx++#s4:3)=Rtt", 
        "10101011110xxxxxPP0ttttt0iiii-0-", 
        "EA = Rx;\nRx = Rx + imm_s;\n*EA = Rtt;"
    ], 
    [
        "memd(Ru<<#u2+#U6)=Rtt", 
        "10101101110uuuuuPPittttt1iIIIIII", 
        "apply_extension(imm_U);\nEA = imm_U + (Ru << imm_u);\n*EA = Rtt;"
    ], 
    [
        "memd(Rx++Mu)=Rtt", 
        "10101101110xxxxxPPuttttt0-------", 
        "EA = Rx;\nRx = Rx + MuV;\n*EA = Rtt;"
    ], 
    [
        "memd(Rx++Mu:brev)=Rtt", 
        "10101111110xxxxxPPuttttt0-------", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\n*EA = Rtt;"
    ], 
    [
        "if (Pv) memd(Rs+Ru<<#u2)=Rtt", 
        "00110100110sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memd(Rs+Ru<<#u2)=Rtt", 
        "00110101110sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memd(Rs+Ru<<#u2)=Rtt", 
        "00110110110sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv.new[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memd(Rs+Ru<<#u2)=Rtt", 
        "00110111110sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv.new[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memd(Rs+#u6:3)=Rtt", 
        "01000000110sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memd(Rs+#u6:3)=Rtt", 
        "01000010110sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv.new[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memd(Rs+#u6:3)=Rtt", 
        "01000100110sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memd(Rs+#u6:3)=Rtt", 
        "01000110110sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv.new[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memd(Rx++#s4:3)=Rtt", 
        "10101011110xxxxxPP1ttttt0iiii0vv", 
        "EA = Rx;\nif (Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memd(Rx++#s4:3)=Rtt", 
        "10101011110xxxxxPP1ttttt0iiii1vv", 
        "EA = Rx;\nif (!Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memd(Rx++#s4:3)=Rtt", 
        "10101011110xxxxxPP1ttttt1iiii0vv", 
        "EA = Rx;\nif (Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memd(Rx++#s4:3)=Rtt", 
        "10101011110xxxxxPP1ttttt1iiii1vv", 
        "EA = Rx;\nif (!Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memd(#u6)=Rtt", 
        "10101111110---iiPP0ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memd(#u6)=Rtt", 
        "10101111110---iiPP0ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memd(#u6)=Rtt", 
        "10101111110---iiPP1ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv.new[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memd(#u6)=Rtt", 
        "10101111110---iiPP1ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv.new[0]) {\n    *EA = Rtt;\n} else {\n    NOP;\n}"
    ], 
    [
        "memb(Rs+Ru<<#u2)=Rt", 
        "00111011000sssssPPiuuuuui--ttttt", 
        "EA = Rs + (Ru << imm_u);\n*EA = Rt & 0xff;"
    ], 
    [
        "memb(Rs+#u6:0)=#S8", 
        "0011110--00sssssPPIiiiiiiIIIIIII", 
        "EA = Rs + imm_u;\napply_extension(imm_S);\n*EA = imm_S;"
    ], 
    [
        "memb(gp+#u16:0)=Rt", 
        "01001ii0000iiiiiPPitttttiiiiiiii", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\n*EA = Rt & 0xff;"
    ], 
    [
        "memb(Rs+#s11:0)=Rt", 
        "10100ii1000sssssPPitttttiiiiiiii", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\n*EA = Rt & 0xff;"
    ], 
    [
        "memb(Rx++I:circ(Mu))=Rt", 
        "10101001000xxxxxPPuttttt0-----1-", 
        "EA = Rx;\nRx = circ_add(Rx, I << 0, MuV);\n*EA = Rt & 0xff;"
    ], 
    [
        "memb(Rx++#s4:0:circ(Mu))=Rt", 
        "10101001000xxxxxPPuttttt0iiii-0-", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\n*EA = Rt & 0xff;"
    ], 
    [
        "memb(Re=#U6)=Rt", 
        "10101011000eeeeePP0ttttt1-IIIIII", 
        "apply_extension(imm_U);\nEA = imm_U;\n*EA = Rt & 0xff;\nRe = imm_U;"
    ], 
    [
        "memb(Rx++#s4:0)=Rt", 
        "10101011000xxxxxPP0ttttt0iiii-0-", 
        "EA = Rx;\nRx = Rx + imm_s;\n*EA = Rt & 0xff;"
    ], 
    [
        "memb(Ru<<#u2+#U6)=Rt", 
        "10101101000uuuuuPPittttt1iIIIIII", 
        "apply_extension(imm_U);\nEA = imm_U + (Ru << imm_u);\n*EA = Rt & 0xff;"
    ], 
    [
        "memb(Rx++Mu)=Rt", 
        "10101101000xxxxxPPuttttt0-------", 
        "EA = Rx;\nRx = Rx + MuV;\n*EA = Rt & 0xff;"
    ], 
    [
        "memb(Rx++Mu:brev)=Rt", 
        "10101111000xxxxxPPuttttt0-------", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\n*EA = Rt & 0xff;"
    ], 
    [
        "if (Pv) memb(Rs+Ru<<#u2)=Rt", 
        "00110100000sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memb(Rs+Ru<<#u2)=Rt", 
        "00110101000sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memb(Rs+Ru<<#u2)=Rt", 
        "00110110000sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv.new[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memb(Rs+Ru<<#u2)=Rt", 
        "00110111000sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv.new[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memb(Rs+#u6:0)=#S6", 
        "00111000000sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (Pv[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memb(Rs+#u6:0)=#S6", 
        "00111000100sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (!Pv[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memb(Rs+#u6:0)=#S6", 
        "00111001000sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (Pv.new[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memb(Rs+#u6:0)=#S6", 
        "00111001100sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (!Pv.new[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memb(Rs+#u6:0)=Rt", 
        "01000000000sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memb(Rs+#u6:0)=Rt", 
        "01000010000sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv.new[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memb(Rs+#u6:0)=Rt", 
        "01000100000sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memb(Rs+#u6:0)=Rt", 
        "01000110000sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv.new[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memb(Rx++#s4:0)=Rt", 
        "10101011000xxxxxPP1ttttt0iiii0vv", 
        "EA = Rx;\nif (Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memb(Rx++#s4:0)=Rt", 
        "10101011000xxxxxPP1ttttt0iiii1vv", 
        "EA = Rx;\nif (!Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memb(Rx++#s4:0)=Rt", 
        "10101011000xxxxxPP1ttttt1iiii0vv", 
        "EA = Rx;\nif (Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memb(Rx++#s4:0)=Rt", 
        "10101011000xxxxxPP1ttttt1iiii1vv", 
        "EA = Rx;\nif (!Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memb(#u6)=Rt", 
        "10101111000---iiPP0ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memb(#u6)=Rt", 
        "10101111000---iiPP0ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memb(#u6)=Rt", 
        "10101111000---iiPP1ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv.new[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memb(#u6)=Rt", 
        "10101111000---iiPP1ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv.new[0]) {\n    *EA = Rt & 0xff;\n} else {\n    NOP;\n}"
    ], 
    [
        "memh(Rs+Ru<<#u2)=Rt", 
        "00111011010sssssPPiuuuuui--ttttt", 
        "EA = Rs + (Ru << imm_u);\n*EA = Rt.h[0];"
    ], 
    [
        "memh(Rs+Ru<<#u2)=Rt.H", 
        "00111011011sssssPPiuuuuui--ttttt", 
        "EA = Rs + (Ru << imm_u);\n*EA = Rt.h[1];"
    ], 
    [
        "memh(Rs+#u6:1)=#S8", 
        "0011110--01sssssPPIiiiiiiIIIIIII", 
        "EA = Rs + imm_u;\napply_extension(imm_S);\n*EA = imm_S;"
    ], 
    [
        "memh(gp+#u16:1)=Rt", 
        "01001ii0010iiiiiPPitttttiiiiiiii", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\n*EA = Rt.h[0];"
    ], 
    [
        "memh(gp+#u16:1)=Rt.H", 
        "01001ii0011iiiiiPPitttttiiiiiiii", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\n*EA = Rt.h[1];"
    ], 
    [
        "memh(Rs+#s11:1)=Rt", 
        "10100ii1010sssssPPitttttiiiiiiii", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\n*EA = Rt.h[0];"
    ], 
    [
        "memh(Rs+#s11:1)=Rt.H", 
        "10100ii1011sssssPPitttttiiiiiiii", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\n*EA = Rt.h[1];"
    ], 
    [
        "memh(Rx++I:circ(Mu))=Rt", 
        "10101001010xxxxxPPuttttt0-----1-", 
        "EA = Rx;\nRx = circ_add(Rx, I << 1, MuV);\n*EA = Rt.h[0];"
    ], 
    [
        "memh(Rx++#s4:1:circ(Mu))=Rt", 
        "10101001010xxxxxPPuttttt0iiii-0-", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\n*EA = Rt.h[0];"
    ], 
    [
        "memh(Rx++I:circ(Mu))=Rt.H", 
        "10101001011xxxxxPPuttttt0-----1-", 
        "EA = Rx;\nRx = circ_add(Rx, I << 1, MuV);\n*EA = Rt.h[1];"
    ], 
    [
        "memh(Rx++#s4:1:circ(Mu))=Rt.H", 
        "10101001011xxxxxPPuttttt0iiii-0-", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\n*EA = Rt.h[1];"
    ], 
    [
        "memh(Re=#U6)=Rt", 
        "10101011010eeeeePP0ttttt1-IIIIII", 
        "apply_extension(imm_U);\nEA = imm_U;\n*EA = Rt.h[0];\nRe = imm_U;"
    ], 
    [
        "memh(Rx++#s4:1)=Rt", 
        "10101011010xxxxxPP0ttttt0iiii-0-", 
        "EA = Rx;\nRx = Rx + imm_s;\n*EA = Rt.h[0];"
    ], 
    [
        "memh(Re=#U6)=Rt.H", 
        "10101011011eeeeePP0ttttt1-IIIIII", 
        "apply_extension(imm_U);\nEA = imm_U;\n*EA = Rt.h[1];\nRe = imm_U;"
    ], 
    [
        "memh(Rx++#s4:1)=Rt.H", 
        "10101011011xxxxxPP0ttttt0iiii-0-", 
        "EA = Rx;\nRx = Rx + imm_s;\n*EA = Rt.h[1];"
    ], 
    [
        "memh(Ru<<#u2+#U6)=Rt", 
        "10101101010uuuuuPPittttt1iIIIIII", 
        "apply_extension(imm_U);\nEA = imm_U + (Ru << imm_u);\n*EA = Rt.h[0];"
    ], 
    [
        "memh(Rx++Mu)=Rt", 
        "10101101010xxxxxPPuttttt0-------", 
        "EA = Rx;\nRx = Rx + MuV;\n*EA = Rt.h[0];"
    ], 
    [
        "memh(Ru<<#u2+#U6)=Rt.H", 
        "10101101011uuuuuPPittttt1iIIIIII", 
        "apply_extension(imm_U);\nEA = imm_U + (Ru << imm_u);\n*EA = Rt.h[1];"
    ], 
    [
        "memh(Rx++Mu)=Rt.H", 
        "10101101011xxxxxPPuttttt0-------", 
        "EA = Rx;\nRx = Rx + MuV;\n*EA = Rt.h[1];"
    ], 
    [
        "memh(Rx++Mu:brev)=Rt", 
        "10101111010xxxxxPPuttttt0-------", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\n*EA = Rt.h[0];"
    ], 
    [
        "memh(Rx++Mu:brev)=Rt.H", 
        "10101111011xxxxxPPuttttt0-------", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\n*EA = Rt.h[1];"
    ], 
    [
        "if (Pv) memh(Rs+Ru<<#u2)=Rt", 
        "00110100010sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(Rs+Ru<<#u2)=Rt.H", 
        "00110100011sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rs+Ru<<#u2)=Rt", 
        "00110101010sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rs+Ru<<#u2)=Rt.H", 
        "00110101011sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rs+Ru<<#u2)=Rt", 
        "00110110010sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv.new[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rs+Ru<<#u2)=Rt.H", 
        "00110110011sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv.new[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rs+Ru<<#u2)=Rt", 
        "00110111010sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv.new[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rs+Ru<<#u2)=Rt.H", 
        "00110111011sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv.new[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(Rs+#u6:1)=#S6", 
        "00111000001sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (Pv[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rs+#u6:1)=#S6", 
        "00111000101sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (!Pv[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rs+#u6:1)=#S6", 
        "00111001001sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (Pv.new[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rs+#u6:1)=#S6", 
        "00111001101sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (!Pv.new[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(Rs+#u6:1)=Rt", 
        "01000000010sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(Rs+#u6:1)=Rt.H", 
        "01000000011sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rs+#u6:1)=Rt", 
        "01000010010sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv.new[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rs+#u6:1)=Rt.H", 
        "01000010011sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv.new[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rs+#u6:1)=Rt", 
        "01000100010sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rs+#u6:1)=Rt.H", 
        "01000100011sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rs+#u6:1)=Rt", 
        "01000110010sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv.new[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rs+#u6:1)=Rt.H", 
        "01000110011sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv.new[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(Rx++#s4:1)=Rt", 
        "10101011010xxxxxPP1ttttt0iiii0vv", 
        "EA = Rx;\nif (Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rx++#s4:1)=Rt", 
        "10101011010xxxxxPP1ttttt0iiii1vv", 
        "EA = Rx;\nif (!Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rx++#s4:1)=Rt", 
        "10101011010xxxxxPP1ttttt1iiii0vv", 
        "EA = Rx;\nif (Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rx++#s4:1)=Rt", 
        "10101011010xxxxxPP1ttttt1iiii1vv", 
        "EA = Rx;\nif (!Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(Rx++#s4:1)=Rt.H", 
        "10101011011xxxxxPP1ttttt0iiii0vv", 
        "EA = Rx;\nif (Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(Rx++#s4:1)=Rt.H", 
        "10101011011xxxxxPP1ttttt0iiii1vv", 
        "EA = Rx;\nif (!Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(Rx++#s4:1)=Rt.H", 
        "10101011011xxxxxPP1ttttt1iiii0vv", 
        "EA = Rx;\nif (Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(Rx++#s4:1)=Rt.H", 
        "10101011011xxxxxPP1ttttt1iiii1vv", 
        "EA = Rx;\nif (!Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(#u6)=Rt", 
        "10101111010---iiPP0ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(#u6)=Rt", 
        "10101111010---iiPP0ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(#u6)=Rt", 
        "10101111010---iiPP1ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv.new[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(#u6)=Rt", 
        "10101111010---iiPP1ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv.new[0]) {\n    *EA = Rt.h[0];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memh(#u6)=Rt.H", 
        "10101111011---iiPP0ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memh(#u6)=Rt.H", 
        "10101111011---iiPP0ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memh(#u6)=Rt.H", 
        "10101111011---iiPP1ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv.new[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memh(#u6)=Rt.H", 
        "10101111011---iiPP1ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv.new[0]) {\n    *EA = Rt.h[1];\n} else {\n    NOP;\n}"
    ], 
    [
        "memw(Rs+Ru<<#u2)=Rt", 
        "00111011100sssssPPiuuuuui--ttttt", 
        "EA = Rs + (Ru << imm_u);\n*EA = Rt;"
    ], 
    [
        "memw(Rs+#u6:2)=#S8", 
        "0011110--10sssssPPIiiiiiiIIIIIII", 
        "EA = Rs + imm_u;\napply_extension(imm_S);\n*EA = imm_S;"
    ], 
    [
        "memw(gp+#u16:2)=Rt", 
        "01001ii0100iiiiiPPitttttiiiiiiii", 
        "apply_extension(imm_u);\nEA = (Constant_extended ? (0) : GP) + imm_u;\n*EA = Rt;"
    ], 
    [
        "memw(Rs+#s11:2)=Rt", 
        "10100ii1100sssssPPitttttiiiiiiii", 
        "apply_extension(imm_s);\nEA = Rs + imm_s;\n*EA = Rt;"
    ], 
    [
        "memw(Rx++I:circ(Mu))=Rt", 
        "10101001100xxxxxPPuttttt0-----1-", 
        "EA = Rx;\nRx = circ_add(Rx, I << 2, MuV);\n*EA = Rt;"
    ], 
    [
        "memw(Rx++#s4:2:circ(Mu))=Rt", 
        "10101001100xxxxxPPuttttt0iiii-0-", 
        "EA = Rx;\nRx = circ_add(Rx, imm_s, MuV);\n*EA = Rt;"
    ], 
    [
        "memw(Re=#U6)=Rt", 
        "10101011100eeeeePP0ttttt1-IIIIII", 
        "apply_extension(imm_U);\nEA = imm_U;\n*EA = Rt;\nRe = imm_U;"
    ], 
    [
        "memw(Rx++#s4:2)=Rt", 
        "10101011100xxxxxPP0ttttt0iiii-0-", 
        "EA = Rx;\nRx = Rx + imm_s;\n*EA = Rt;"
    ], 
    [
        "memw(Ru<<#u2+#U6)=Rt", 
        "10101101100uuuuuPPittttt1iIIIIII", 
        "apply_extension(imm_U);\nEA = imm_U + (Ru << imm_u);\n*EA = Rt;"
    ], 
    [
        "memw(Rx++Mu)=Rt", 
        "10101101100xxxxxPPuttttt0-------", 
        "EA = Rx;\nRx = Rx + MuV;\n*EA = Rt;"
    ], 
    [
        "memw(Rx++Mu:brev)=Rt", 
        "10101111100xxxxxPPuttttt0-------", 
        "EA = Rx.h[1] | brev(Rx.h[0]);\nRx = Rx + MuV;\n*EA = Rt;"
    ], 
    [
        "if (Pv) memw(Rs+Ru<<#u2)=Rt", 
        "00110100100sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memw(Rs+Ru<<#u2)=Rt", 
        "00110101100sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memw(Rs+Ru<<#u2)=Rt", 
        "00110110100sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (Pv.new[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memw(Rs+Ru<<#u2)=Rt", 
        "00110111100sssssPPiuuuuuivvttttt", 
        "EA = Rs + (Ru << imm_u);\nif (!Pv.new[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memw(Rs+#u6:2)=#S6", 
        "00111000010sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (Pv[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memw(Rs+#u6:2)=#S6", 
        "00111000110sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (!Pv[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memw(Rs+#u6:2)=#S6", 
        "00111001010sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (Pv.new[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memw(Rs+#u6:2)=#S6", 
        "00111001110sssssPPIiiiiiivvIIIII", 
        "EA = Rs + imm_u;\nif (!Pv.new[0]) {\n    apply_extension(imm_S);\n    *EA = imm_S;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memw(Rs+#u6:2)=Rt", 
        "01000000100sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memw(Rs+#u6:2)=Rt", 
        "01000010100sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (Pv.new[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memw(Rs+#u6:2)=Rt", 
        "01000100100sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memw(Rs+#u6:2)=Rt", 
        "01000110100sssssPPitttttiiiii0vv", 
        "apply_extension(imm_u);\nEA = Rs + imm_u;\nif (!Pv.new[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memw(Rx++#s4:2)=Rt", 
        "10101011100xxxxxPP1ttttt0iiii0vv", 
        "EA = Rx;\nif (Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memw(Rx++#s4:2)=Rt", 
        "10101011100xxxxxPP1ttttt0iiii1vv", 
        "EA = Rx;\nif (!Pv[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memw(Rx++#s4:2)=Rt", 
        "10101011100xxxxxPP1ttttt1iiii0vv", 
        "EA = Rx;\nif (Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memw(Rx++#s4:2)=Rt", 
        "10101011100xxxxxPP1ttttt1iiii1vv", 
        "EA = Rx;\nif (!Pv.new[0]) {\n    Rx = Rx + imm_s;\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv) memw(#u6)=Rt", 
        "10101111100---iiPP0ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv) memw(#u6)=Rt", 
        "10101111100---iiPP0ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (Pv.new) memw(#u6)=Rt", 
        "10101111100---iiPP1ttttt1iiii0vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (Pv.new[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "if (!Pv.new) memw(#u6)=Rt", 
        "10101111100---iiPP1ttttt1iiii1vv", 
        "apply_extension(imm_u);\nEA = imm_u;\nif (!Pv.new[0]) {\n    *EA = Rt;\n} else {\n    NOP;\n}"
    ], 
    [
        "allocframe(Rx,#u11:3):raw", 
        "10100000100xxxxxPP000iiiiiiiiiii", 
        "EA = Rx + -8;\n*EA = frame_scramble((LR << 32) | FP);\nFP = EA;\nframe_check_limit(EA - imm_u);\nRx = EA - imm_u;"
    ], 
    [
        "Gd=Rs", 
        "01100010000sssssPP---------ddddd", 
        "Gd = Rs;"
    ], 
    [
        "Gdd=Rss", 
        "01100011000sssssPP---------ddddd", 
        "Gdd = Rss;"
    ], 
    [
        "Rdd=Gss", 
        "01101000001sssssPP---------ddddd", 
        "Rdd = Gss;"
    ], 
    [
        "Rd=Gs", 
        "01101010001sssssPP---------ddddd", 
        "Rd = Gs;"
    ], 
    [
        "ciad(Rs)", 
        "01100100000sssssPP------011-----", 
        "IAD &= ~Rs;"
    ], 
    [
        "crswap(Rx,sgp0)", 
        "01100101000xxxxxPP--------------", 
        "tmp = Rx;\nRx = SGP0;\nSGP0 = tmp;"
    ], 
    [
        "crswap(Rx,sgp1)", 
        "01100101001xxxxxPP--------------", 
        "tmp = Rx;\nRx = SGP1;\nSGP1 = tmp;"
    ], 
    [
        "crswap(Rxx,sgp1:0)", 
        "0110110110-xxxxxPP---------00000", 
        "tmp = Rxx;\nRxx = SGP;\nSGP = tmp;"
    ], 
    [
        "cswi(Rs)", 
        "01100100000sssssPP------001-----", 
        "IPEND &= ~Rs;"
    ], 
    [
        "dckill", 
        "10100010000-----PP--------------", 
        "dcache_inv_all();"
    ], 
    [
        "dccleanidx(Rs)", 
        "10100010001sssssPP--------------", 
        "dcache_clean_idx(Rs);"
    ], 
    [
        "dcinvidx(Rs)", 
        "10100010010sssssPP--------------", 
        "dcache_inv_idx(Rs);"
    ], 
    [
        "dccleaninvidx(Rs)", 
        "10100010011sssssPP--------------", 
        "dcache_clean_idx(Rs);\ndcache_inv_idx(Rs);"
    ], 
    [
        "dctagw(Rs,Rt)", 
        "10100100000sssssPP-ttttt--------", 
        "dcache_tag_write(Rs, Rt);"
    ], 
    [
        "Rd=dctagr(Rs)", 
        "10100100001sssssPP---------ddddd", 
        "dcache_tag_read(Rs);"
    ], 
    [
        "Rd=getimask(Rs)", 
        "01100110000sssssPP---------ddddd", 
        "Rd = IMASK[Rs & 0x7];"
    ], 
    [
        "tlblock", 
        "01101100001-----PP------001-----", 
        "if (can_aquire_tlb_lock) {\n    SYSCFG.TLBLOCK = 1;\n} else {\n    sleep_until_available;\n}"
    ], 
    [
        "k0lock", 
        "01101100001-----PP------011-----", 
        "if (can_aquire_k0_lock) {\n    SYSCFG.K0LOCK = 1;\n} else {\n    sleep_until_available;\n}"
    ], 
    [
        "tlbunlock", 
        "01101100001-----PP------010-----", 
        "SYSCFG.TLBLOCK = 0;"
    ], 
    [
        "k0unlock", 
        "01101100001-----PP------100-----", 
        "SYSCFG.K0LOCK = 0;"
    ], 
    [
        "Rd=iassignr(Rs)", 
        "01100110011sssssPP---------ddddd", 
        "Rd = IASSIGNR(Rs);"
    ], 
    [
        "iassignw(Rs)", 
        "01100100000sssssPP------010-----", 
        "IASSIGNW(Rs);"
    ], 
    [
        "Rd=icdatar(Rs)", 
        "01010101101sssssPP---------ddddd", 
        "icache_data_read(Rs);"
    ], 
    [
        "Rd=ictagr(Rs)", 
        "01010101111sssssPP---------ddddd", 
        "icache_tag_read(Rs);"
    ], 
    [
        "icinvidx(Rs)", 
        "01010110110sssssPP001-----------", 
        "icache_inv_idx(Rs);"
    ], 
    [
        "ictagw(Rs,Rt)", 
        "01010101110sssssPP-ttttt--------", 
        "icache_tag_write(Rs, Rt);"
    ], 
    [
        "ickill", 
        "01010110110-----PP010-----------", 
        "icache_inv_all();"
    ], 
    [
        "l2cleanidx(Rs)", 
        "10100110001sssssPP--------------", 
        "l2cache_clean_idx(Rs);"
    ], 
    [
        "l2invidx(Rs)", 
        "10100110010sssssPP--------------", 
        "l2cache_inv_idx(Rs);"
    ], 
    [
        "l2cleaninvidx(Rs)", 
        "10101000011sssssPP--------------", 
        "l2cache_clean_invalidate_idx(Rs);"
    ], 
    [
        "l2gclean(Rtt)", 
        "10100110101-----PP-ttttt--------", 
        "l2cache_global_clean_range(Rtt);"
    ], 
    [
        "l2gcleaninv(Rtt)", 
        "10100110110-----PP-ttttt--------", 
        "l2cache_global_clean_inv_range(Rtt);"
    ], 
    [
        "l2kill", 
        "10101000001-----PP-000----------", 
        "l2cache_inv_all();"
    ], 
    [
        "l2gunlock", 
        "10101000001-----PP-010----------", 
        "l2cache_global_unlock();"
    ], 
    [
        "l2gclean", 
        "10101000001-----PP-100----------", 
        "l2cache_global_clean();"
    ], 
    [
        "l2gcleaninv", 
        "10101000001-----PP-110----------", 
        "l2cache_global_clean_inv();"
    ], 
    [
        "Pd=l2locka(Rs)", 
        "10100000111sssssPP1-----------dd", 
        "EA = Rs;\nPd = l2locka(EA);"
    ], 
    [
        "l2unlocka(Rs)", 
        "10100110011sssssPP--------------", 
        "EA = Rs;\nl2unlocka(EA);"
    ], 
    [
        "l2tagw(Rs,Rt)", 
        "10100100010sssssPP0ttttt--------", 
        "l2cache_tag_write(Rs, Rt);"
    ], 
    [
        "Rd=l2tagr(Rs)", 
        "10100100011sssssPP---------ddddd", 
        "l2cache_tag_read(Rs);"
    ], 
    [
        "Rd=memw_phys(Rs,Rt)", 
        "10010010000sssssPP1ttttt--0ddddd", 
        "Rd = *((Rs & 0x7ff) | (Rt << 11));"
    ], 
    [
        "nmi(Rs)", 
        "01100100011sssssPP------010-----", 
        "// Raise NMI on threads"
    ], 
    [
        "resume(Rs)", 
        "01100100010sssssPP------001-----", 
        "resume(Rs);"
    ], 
    [
        "rte", 
        "01010111111-----PP00----000-----", 
        "SSR.SSR_EX = 0;\nPC = ELR;"
    ], 
    [
        "setimask(Pt,Rs)", 
        "01100100100sssssPP----tt000-----", 
        "PREDUSE_TIMING;\nIMASK[Pt & 0x7] = Rs;"
    ], 
    [
        "siad(Rs)", 
        "01100100100sssssPP------011-----", 
        "IAD |= Rs;"
    ], 
    [
        "start(Rs)", 
        "01100100011sssssPP------001-----", 
        "start(Rs);"
    ], 
    [
        "stop(Rs)", 
        "01100100011sssssPP------000-----", 
        "if (!in_debug_mode)\n    modectl[TNUM] = 0;"
    ], 
    [
        "swi(Rs)", 
        "01100100000sssssPP------000-----", 
        "IPEND |= Rs;"
    ], 
    [
        "tlbw(Rss,Rt)", 
        "01101100000sssssPP0ttttt--------", 
        "TLB[Rt] = Rss;"
    ], 
    [
        "Rdd=tlbr(Rs)", 
        "01101100010sssssPP---------ddddd", 
        "Rdd = TLB[Rs];"
    ], 
    [
        "Rd=tlbp(Rs)", 
        "01101100100sssssPP---------ddddd", 
        "Rd = search_TLB(Rs);"
    ], 
    [
        "tlbinvasid(Rs)", 
        "01101100101sssssPP--------------", 
        "for (i = 0; i < NUM_TLB_ENTRIES; i++) {\n    if ((TLB[i].PTE_G == 0) && (TLB[i].PTE_ASID == bitrange(Rs, 26, 20))) {\n        TLB[i] = TLB[i] & ~(1ULL << 63);\n    }\n}"
    ], 
    [
        "Rd=ctlbw(Rss,Rt)", 
        "01101100110sssssPP0ttttt---ddddd", 
        "if (CHECK_TLB_OVERLAP((1LL << 63) | Rss)) {\n    Rd = GET_OVERLAPPING_IDX((1LL << 63) | Rss);\n} else {\n    TLB[Rt] = Rss;\n    Rd = 0x80000000;\n}"
    ], 
    [
        "Rd=tlboc(Rss)", 
        "01101100111sssssPP---------ddddd", 
        "if (CHECK_TLB_OVERLAP((1LL << 63) | Rss)) {\n    Rd = GET_OVERLAPPING_IDX((1LL << 63) | Rss);\n} else {\n    Rd = 0x80000000;\n}"
    ], 
    [
        "Sd=Rs", 
        "0110011100-sssssPP--------dddddd", 
        "Sd = Rs;"
    ], 
    [
        "Sdd=Rss", 
        "0110110100-sssssPP--------dddddd", 
        "Sdd = Rss;"
    ], 
    [
        "Rd=Ss", 
        "011011101-ssssssPP---------ddddd", 
        "Rd = Ss;"
    ], 
    [
        "Rdd=Sss", 
        "011011110-ssssssPP---------ddddd", 
        "Rdd = Sss;"
    ], 
    [
        "Rd=memw_locked(Rs)", 
        "10010010000sssssPP00------0ddddd", 
        "EA = Rs;\nRd = *EA;"
    ], 
    [
        "Rdd=memd_locked(Rs)", 
        "10010010000sssssPP01------0ddddd", 
        "EA = Rs;\nRdd = *EA;"
    ], 
    [
        "memw_locked(Rs,Pd)=Rt", 
        "10100000101sssssPP-ttttt------dd", 
        "EA = Rs;\nif (lock_valid) {\n    *EA = Rt;\n    Pd = 0xff;\n    lock_valid = 0;\n} else {\n    Pd = 0;\n}"
    ], 
    [
        "memd_locked(Rs,Pd)=Rtt", 
        "10100000111sssssPP0ttttt------dd", 
        "EA = Rs;\nif (lock_valid) {\n    *EA = Rtt;\n    Pd = 0xff;\n    lock_valid = 0;\n} else {\n    Pd = 0;\n}"
    ], 
    [
        "dczeroa(Rs)", 
        "10100000110sssssPP0-------------", 
        "EA = Rs;\ndcache_zero_addr(EA);"
    ], 
    [
        "barrier", 
        "10101000000-----PP------000-----", 
        "memory_barrier;"
    ], 
    [
        "brkpt", 
        "01101100001-----PP------000-----", 
        "// Enter Debug mode"
    ], 
    [
        "dcfetch(Rs+#u11:3)", 
        "10010100000sssssPP0--iiiiiiiiiii", 
        "EA = Rs + imm_u;\ndcache_fetch(EA);"
    ], 
    [
        "dccleana(Rs)", 
        "10100000000sssssPP--------------", 
        "EA = Rs;\ndcache_clean_addr(EA);"
    ], 
    [
        "dcinva(Rs)", 
        "10100000001sssssPP--------------", 
        "EA = Rs;\ndcache_cleaninv_addr(EA);"
    ], 
    [
        "dccleaninva(Rs)", 
        "10100000010sssssPP--------------", 
        "EA = Rs;\ndcache_cleaninv_addr(EA);"
    ], 
    [
        "icinva(Rs)", 
        "01010110110sssssPP000-----------", 
        "EA = Rs;\nicache_inv_addr(EA);"
    ], 
    [
        "isync", 
        "0101011111000000PP0---0000000010", 
        "instruction_sync;"
    ], 
    [
        "l2fetch(Rs,Rt)", 
        "10100110000sssssPP-ttttt000-----", 
        "l2fetch(Rs, INFO);"
    ], 
    [
        "l2fetch(Rs,Rtt)", 
        "10100110100sssssPP-ttttt--------", 
        "l2fetch(Rs, INFO);"
    ], 
    [
        "pause(#u8)", 
        "0101010001------PP-iiiii---iii--", 
        "// Pause for imm_u cycles"
    ], 
    [
        "syncht", 
        "10101000010-----PP--------------", 
        "memory_synch;"
    ], 
    [
        "trace(Rs)", 
        "01100010010sssssPP--------------", 
        "// Send value to ETM trace"
    ], 
    [
        "trap0(#u8)", 
        "0101010000------PP-iiiii---iii--", 
        "SSR.CAUSE = imm_u;\n// TRAP \"0\""
    ], 
    [
        "trap1(Rx,#u8)", 
        "0101010010-xxxxxPP-iiiii---iii--", 
        "if (!can_handle_trap1_virtinsn(imm_u)) {\n    SSR.CAUSE = imm_u;\n    // TRAP \"1\"\n} else if (imm_u == 1) {\n    VMRTE;\n} else if (imm_u == 3) {\n    VMSETIE;\n} else if (imm_u == 4) {\n    VMGETIE;\n} else if (imm_u == 6) {\n    VMSPSWAP;\n}"
    ], 
    [
        "wait(Rs)", 
        "01100100010sssssPP------000-----", 
        "if (!in_debug_mode)\n    modectl[(TNUM + 16)] = 1;"
    ], 
    [
        "Rdd=abs(Rss)", 
        "10000000100sssssPP------110ddddd", 
        "Rdd = ABS(Rss);"
    ], 
    [
        "Rd=abs(Rs)", 
        "10001100100sssssPP------100ddddd", 
        "Rd = (ABS(sxt(32, 64, Rs)));"
    ], 
    [
        "Rd=abs(Rs):sat", 
        "10001100100sssssPP------101ddddd", 
        "Rd = sat(32, ABS(sxt(32, 64, Rs)));"
    ], 
    [
        "Rd=add(Rs,add(Ru,#s6))", 
        "110110110iisssssPPidddddiiiuuuuu", 
        "Rd = Rs + Ru + apply_extension(imm_s);"
    ], 
    [
        "Rd=add(Rs,sub(#s6,Ru))", 
        "110110111iisssssPPidddddiiiuuuuu", 
        "Rd = Rs - Ru + apply_extension(imm_s);"
    ], 
    [
        "Rx+=add(Rs,#s8)", 
        "111000100--sssssPP0iiiiiiiixxxxx", 
        "apply_extension(imm_s);\nRx = Rx + Rs + imm_s;"
    ], 
    [
        "Rx-=add(Rs,#s8)", 
        "111000101--sssssPP0iiiiiiiixxxxx", 
        "apply_extension(imm_s);\nRx = Rx - (Rs + imm_s);"
    ], 
    [
        "Rx+=add(Rs,Rt)", 
        "11101111000sssssPP0ttttt001xxxxx", 
        "Rx = Rx + Rs + Rt;"
    ], 
    [
        "Rx-=add(Rs,Rt)", 
        "11101111100sssssPP0ttttt001xxxxx", 
        "Rx = Rx - (Rs + Rt);"
    ], 
    [
        "Rdd=add(Rss,Rtt)", 
        "11010011000sssssPP-ttttt111ddddd", 
        "Rdd = Rss + Rtt;"
    ], 
    [
        "Rdd=add(Rss,Rtt):sat", 
        "11010011011sssssPP-ttttt101ddddd", 
        "Rdd = sat64(Rss + Rtt);"
    ], 
    [
        "Rdd=add(Rss,Rtt):raw:lo", 
        "11010011011sssssPP-ttttt110ddddd", 
        "Rdd = Rtt + sxt(32, 64, Rss.w[0]);"
    ], 
    [
        "Rdd=add(Rss,Rtt):raw:hi", 
        "11010011011sssssPP-ttttt111ddddd", 
        "Rdd = Rtt + sxt(32, 64, Rss.w[1]);"
    ], 
    [
        "Rd=add(Rs,Rt):sat:deprecated", 
        "11010101100sssssPP-ttttt0--ddddd", 
        "Rd = sat(32, Rs + Rt);"
    ], 
    [
        "Rd=add(Rt.L,Rs.L)", 
        "11010101000sssssPP-ttttt00-ddddd", 
        "Rd = (Rt.h[0] + Rs.h[0]);"
    ], 
    [
        "Rd=add(Rt.L,Rs.H)", 
        "11010101000sssssPP-ttttt01-ddddd", 
        "Rd = (Rt.h[0] + Rs.h[1]);"
    ], 
    [
        "Rd=add(Rt.L,Rs.L):sat", 
        "11010101000sssssPP-ttttt10-ddddd", 
        "Rd = sat(16, Rt.h[0] + Rs.h[0]);"
    ], 
    [
        "Rd=add(Rt.L,Rs.H):sat", 
        "11010101000sssssPP-ttttt11-ddddd", 
        "Rd = sat(16, Rt.h[0] + Rs.h[1]);"
    ], 
    [
        "Rd=add(Rt.L,Rs.L):<<16", 
        "11010101010sssssPP-ttttt000ddddd", 
        "Rd = ((Rt.h[0] + Rs.h[0])) << 16;"
    ], 
    [
        "Rd=add(Rt.L,Rs.H):<<16", 
        "11010101010sssssPP-ttttt001ddddd", 
        "Rd = ((Rt.h[0] + Rs.h[1])) << 16;"
    ], 
    [
        "Rd=add(Rt.H,Rs.L):<<16", 
        "11010101010sssssPP-ttttt010ddddd", 
        "Rd = ((Rt.h[1] + Rs.h[0])) << 16;"
    ], 
    [
        "Rd=add(Rt.H,Rs.H):<<16", 
        "11010101010sssssPP-ttttt011ddddd", 
        "Rd = ((Rt.h[1] + Rs.h[1])) << 16;"
    ], 
    [
        "Rd=add(Rt.L,Rs.L):sat:<<16", 
        "11010101010sssssPP-ttttt100ddddd", 
        "Rd = (sat(16, Rt.h[0] + Rs.h[0])) << 16;"
    ], 
    [
        "Rd=add(Rt.L,Rs.H):sat:<<16", 
        "11010101010sssssPP-ttttt101ddddd", 
        "Rd = (sat(16, Rt.h[0] + Rs.h[1])) << 16;"
    ], 
    [
        "Rd=add(Rt.H,Rs.L):sat:<<16", 
        "11010101010sssssPP-ttttt110ddddd", 
        "Rd = (sat(16, Rt.h[1] + Rs.h[0])) << 16;"
    ], 
    [
        "Rd=add(Rt.H,Rs.H):sat:<<16", 
        "11010101010sssssPP-ttttt111ddddd", 
        "Rd = (sat(16, Rt.h[1] + Rs.h[1])) << 16;"
    ], 
    [
        "Rdd=add(Rss,Rtt,Px):carry", 
        "11000010110sssssPP-ttttt-xxddddd", 
        "PREDUSE_TIMING;\nRdd = Rss + Rtt + Px[0];\nPx = carry_from_add(Rss, Rtt, Px[0]) ? 0xff : 0x00;"
    ], 
    [
        "Rdd=sub(Rss,Rtt,Px):carry", 
        "11000010111sssssPP-ttttt-xxddddd", 
        "PREDUSE_TIMING;\nRdd = Rss + ~Rtt + Px[0];\nPx = carry_from_add(Rss, ~Rtt, Px[0]) ? 0xff : 0x00;"
    ], 
    [
        "Rdd=not(Rss)", 
        "10000000100sssssPP------100ddddd", 
        "Rdd = ~Rss;"
    ], 
    [
        "Rdd=and(Rss,Rtt)", 
        "11010011111sssssPP-ttttt000ddddd", 
        "Rdd = Rss & Rtt;"
    ], 
    [
        "Rdd=and(Rtt,~Rss)", 
        "11010011111sssssPP-ttttt001ddddd", 
        "Rdd = (Rtt & ~Rss);"
    ], 
    [
        "Rdd=or(Rss,Rtt)", 
        "11010011111sssssPP-ttttt010ddddd", 
        "Rdd = Rss | Rtt;"
    ], 
    [
        "Rdd=or(Rtt,~Rss)", 
        "11010011111sssssPP-ttttt011ddddd", 
        "Rdd = (Rtt | ~Rss);"
    ], 
    [
        "Rdd=xor(Rss,Rtt)", 
        "11010011111sssssPP-ttttt100ddddd", 
        "Rdd = Rss ^ Rtt;"
    ], 
    [
        "Rxx^=xor(Rss,Rtt)", 
        "1100101010-sssssPP0ttttt000xxxxx", 
        "Rxx ^= Rss ^ Rtt;"
    ], 
    [
        "Rx|=and(Rs,#s10)", 
        "1101101000isssssPPiiiiiiiiixxxxx", 
        "Rx = Rx | (Rs & apply_extension(imm_s));"
    ], 
    [
        "Rx=or(Ru,and(Rx,#s10))", 
        "1101101001ixxxxxPPiiiiiiiiiuuuuu", 
        "Rx = Ru | (Rx & apply_extension(imm_s));"
    ], 
    [
        "Rx|=or(Rs,#s10)", 
        "1101101010isssssPPiiiiiiiiixxxxx", 
        "Rx = Rx | (Rs | apply_extension(imm_s));"
    ], 
    [
        "Rx|=and(Rs,~Rt)", 
        "11101111001sssssPP0ttttt000xxxxx", 
        "Rx |= (Rs & ~Rt);"
    ], 
    [
        "Rx&=and(Rs,~Rt)", 
        "11101111001sssssPP0ttttt001xxxxx", 
        "Rx &= (Rs & ~Rt);"
    ], 
    [
        "Rx^=and(Rs,~Rt)", 
        "11101111001sssssPP0ttttt010xxxxx", 
        "Rx ^= (Rs & ~Rt);"
    ], 
    [
        "Rx&=and(Rs,Rt)", 
        "11101111010sssssPP0ttttt000xxxxx", 
        "Rx &= (Rs & Rt);"
    ], 
    [
        "Rx&=or(Rs,Rt)", 
        "11101111010sssssPP0ttttt001xxxxx", 
        "Rx &= (Rs | Rt);"
    ], 
    [
        "Rx&=xor(Rs,Rt)", 
        "11101111010sssssPP0ttttt010xxxxx", 
        "Rx &= Rs ^ Rt;"
    ], 
    [
        "Rx|=and(Rs,Rt)", 
        "11101111010sssssPP0ttttt011xxxxx", 
        "Rx |= (Rs & Rt);"
    ], 
    [
        "Rx^=xor(Rs,Rt)", 
        "11101111100sssssPP0ttttt011xxxxx", 
        "Rx ^= Rs ^ Rt;"
    ], 
    [
        "Rx|=or(Rs,Rt)", 
        "11101111110sssssPP0ttttt000xxxxx", 
        "Rx |= (Rs | Rt);"
    ], 
    [
        "Rx|=xor(Rs,Rt)", 
        "11101111110sssssPP0ttttt001xxxxx", 
        "Rx |= Rs ^ Rt;"
    ], 
    [
        "Rx^=and(Rs,Rt)", 
        "11101111110sssssPP0ttttt010xxxxx", 
        "Rx ^= (Rs & Rt);"
    ], 
    [
        "Rx^=or(Rs,Rt)", 
        "11101111110sssssPP0ttttt011xxxxx", 
        "Rx ^= (Rs | Rt);"
    ], 
    [
        "Rd=max(Rs,Rt)", 
        "11010101110sssssPP-ttttt0--ddddd", 
        "Rd = max(Rs, Rt);"
    ], 
    [
        "Rd=maxu(Rs,Rt)", 
        "11010101110sssssPP-ttttt1--ddddd", 
        "Rd = max(Rs.uw[0], Rt.uw[0]);"
    ], 
    [
        "Rdd=max(Rss,Rtt)", 
        "11010011110sssssPP-ttttt100ddddd", 
        "Rdd = max(Rss, Rtt);"
    ], 
    [
        "Rdd=maxu(Rss,Rtt)", 
        "11010011110sssssPP-ttttt101ddddd", 
        "Rdd = max(Rss.u64, Rtt.u64);"
    ], 
    [
        "Rd=min(Rt,Rs)", 
        "11010101101sssssPP-ttttt0--ddddd", 
        "Rd = min(Rt, Rs);"
    ], 
    [
        "Rd=minu(Rt,Rs)", 
        "11010101101sssssPP-ttttt1--ddddd", 
        "Rd = min(Rt.uw[0], Rs.uw[0]);"
    ], 
    [
        "Rdd=min(Rtt,Rss)", 
        "11010011101sssssPP-ttttt110ddddd", 
        "Rdd = min(Rtt, Rss);"
    ], 
    [
        "Rdd=minu(Rtt,Rss)", 
        "11010011101sssssPP-ttttt111ddddd", 
        "Rdd = min(Rtt.u64, Rss.u64);"
    ], 
    [
        "Rd=modwrap(Rs,Rt)", 
        "11010011111sssssPP-ttttt111ddddd", 
        "if (Rs < 0) {\n    Rd = Rs + Rt.uw[0];\n} else if (Rs.uw[0] >= Rt.uw[0]) {\n    Rd = Rs - Rt.uw[0];\n} else {\n    Rd = Rs;\n}"
    ], 
    [
        "Rdd=neg(Rss)", 
        "10000000100sssssPP------101ddddd", 
        "Rdd = -Rss;"
    ], 
    [
        "Rd=neg(Rs):sat", 
        "10001100100sssssPP------110ddddd", 
        "Rd = sat(32, -Rs.s64);"
    ], 
    [
        "Rd=round(Rss):sat", 
        "10001000110sssssPP------001ddddd", 
        "tmp = sat64(Rss + 0x080000000ULL);\nRd = tmp.w[1];"
    ], 
    [
        "Rd=cround(Rs,#u5)", 
        "10001100111sssssPP0iiiii00-ddddd", 
        "Rd = (imm_u == 0) ? Rs : convround(Rs, 2 ** (imm_u - 1)) >> imm_u;"
    ], 
    [
        "Rd=round(Rs,#u5)", 
        "10001100111sssssPP0iiiii10-ddddd", 
        "Rd = (((imm_u == 0) ? (Rs) : round(Rs, 2 ** (imm_u - 1)))) >> imm_u;"
    ], 
    [
        "Rd=round(Rs,#u5):sat", 
        "10001100111sssssPP0iiiii11-ddddd", 
        "Rd = (sat(32, (imm_u == 0) ? (Rs) : round(Rs, 2 ** (imm_u - 1)))) >> imm_u;"
    ], 
    [
        "Rd=cround(Rs,Rt)", 
        "1100011011-sssssPP-ttttt00-ddddd", 
        "Rd = (zxt(5, 32, Rt) == 0) ? Rs : convround(Rs, 2 ** (zxt(5, 32, Rt) - 1)) >> zxt(5, 32, Rt);"
    ], 
    [
        "Rd=round(Rs,Rt)", 
        "1100011011-sssssPP-ttttt10-ddddd", 
        "Rd = (((zxt(5, 32, Rt) == 0) ? (Rs) : round(Rs, 2 ** (zxt(5, 32, Rt) - 1)))) >> zxt(5, 32, Rt);"
    ], 
    [
        "Rd=round(Rs,Rt):sat", 
        "1100011011-sssssPP-ttttt11-ddddd", 
        "Rd = (sat(32, (zxt(5, 32, Rt) == 0) ? (Rs) : round(Rs, 2 ** (zxt(5, 32, Rt) - 1)))) >> zxt(5, 32, Rt);"
    ], 
    [
        "Rdd=sub(Rtt,Rss)", 
        "11010011001sssssPP-ttttt111ddddd", 
        "Rdd = Rtt - Rss;"
    ], 
    [
        "Rd=sub(Rt,Rs):sat:deprecated", 
        "11010101100sssssPP-ttttt1--ddddd", 
        "Rd = sat(32, Rt - Rs);"
    ], 
    [
        "Rx+=sub(Rt,Rs)", 
        "11101111000sssssPP0ttttt011xxxxx", 
        "Rx = Rx + Rt - Rs;"
    ], 
    [
        "Rd=sub(Rt.L,Rs.L)", 
        "11010101001sssssPP-ttttt00-ddddd", 
        "Rd = (Rt.h[0] - Rs.h[0]);"
    ], 
    [
        "Rd=sub(Rt.L,Rs.H)", 
        "11010101001sssssPP-ttttt01-ddddd", 
        "Rd = (Rt.h[0] - Rs.h[1]);"
    ], 
    [
        "Rd=sub(Rt.L,Rs.L):sat", 
        "11010101001sssssPP-ttttt10-ddddd", 
        "Rd = sat(16, Rt.h[0] - Rs.h[0]);"
    ], 
    [
        "Rd=sub(Rt.L,Rs.H):sat", 
        "11010101001sssssPP-ttttt11-ddddd", 
        "Rd = sat(16, Rt.h[0] - Rs.h[1]);"
    ], 
    [
        "Rd=sub(Rt.L,Rs.L):<<16", 
        "11010101011sssssPP-ttttt000ddddd", 
        "Rd = ((Rt.h[0] - Rs.h[0])) << 16;"
    ], 
    [
        "Rd=sub(Rt.L,Rs.H):<<16", 
        "11010101011sssssPP-ttttt001ddddd", 
        "Rd = ((Rt.h[0] - Rs.h[1])) << 16;"
    ], 
    [
        "Rd=sub(Rt.H,Rs.L):<<16", 
        "11010101011sssssPP-ttttt010ddddd", 
        "Rd = ((Rt.h[1] - Rs.h[0])) << 16;"
    ], 
    [
        "Rd=sub(Rt.H,Rs.H):<<16", 
        "11010101011sssssPP-ttttt011ddddd", 
        "Rd = ((Rt.h[1] - Rs.h[1])) << 16;"
    ], 
    [
        "Rd=sub(Rt.L,Rs.L):sat:<<16", 
        "11010101011sssssPP-ttttt100ddddd", 
        "Rd = (sat(16, Rt.h[0] - Rs.h[0])) << 16;"
    ], 
    [
        "Rd=sub(Rt.L,Rs.H):sat:<<16", 
        "11010101011sssssPP-ttttt101ddddd", 
        "Rd = (sat(16, Rt.h[0] - Rs.h[1])) << 16;"
    ], 
    [
        "Rd=sub(Rt.H,Rs.L):sat:<<16", 
        "11010101011sssssPP-ttttt110ddddd", 
        "Rd = (sat(16, Rt.h[1] - Rs.h[0])) << 16;"
    ], 
    [
        "Rd=sub(Rt.H,Rs.H):sat:<<16", 
        "11010101011sssssPP-ttttt111ddddd", 
        "Rd = (sat(16, Rt.h[1] - Rs.h[1])) << 16;"
    ], 
    [
        "Rdd=sxtw(Rs)", 
        "1000010001-sssssPP------00-ddddd", 
        "Rdd = sxt(32, 64, Rs);"
    ], 
    [
        "Rdd=vabsh(Rss)", 
        "10000000010sssssPP------100ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = ABS(Rss.h[i]);\n}"
    ], 
    [
        "Rdd=vabsh(Rss):sat", 
        "10000000010sssssPP------101ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = sat(16, ABS(Rss.h[i]));\n}"
    ], 
    [
        "Rdd=vabsw(Rss)", 
        "10000000010sssssPP------110ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = ABS(Rss.w[i]);\n}"
    ], 
    [
        "Rdd=vabsw(Rss):sat", 
        "10000000010sssssPP------111ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = sat(32, ABS(Rss.w[i]));\n}"
    ], 
    [
        "Rdd=vabsdiffub(Rtt,Rss)", 
        "11101000101sssssPP0ttttt000ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = ABS(Rtt.ub[i] - Rss.ub[i]);\n}"
    ], 
    [
        "Rdd=vabsdiffb(Rtt,Rss)", 
        "11101000111sssssPP0ttttt000ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = ABS(Rtt.b[i] - Rss.b[i]);\n}"
    ], 
    [
        "Rdd=vabsdiffh(Rtt,Rss)", 
        "11101000011sssssPP0ttttt000ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = ABS(Rtt.h[i] - Rss.h[i]);\n}"
    ], 
    [
        "Rdd=vabsdiffw(Rtt,Rss)", 
        "11101000001sssssPP0ttttt000ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = ABS(Rtt.w[i] - Rss.w[i]);\n}"
    ], 
    [
        "Rxx,Pe=vacsh(Rss,Rtt)", 
        "11101010101sssssPP0ttttt0eexxxxx", 
        "for (i = 0; i < 4; i++) {\n    xv = (int)Rxx.h[i];\n    sv = (int)Rss.h[i];\n    tv = (int)Rtt.h[i];\n    xv = xv + tv;\n    sv = sv - tv;\n    bitrange(Pe, i * 2, i * 2) = (xv > sv);\n    bitrange(Pe, i * 2 + 1, i * 2 + 1) = (xv > sv);\n    Rxx.h[i] = sat(16, max(xv, sv));\n}"
    ], 
    [
        "Rdd=vaddh(Rss,Rtt)", 
        "11010011000sssssPP-ttttt010ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rss.h[i] + Rtt.h[i]);\n}"
    ], 
    [
        "Rdd=vaddh(Rss,Rtt):sat", 
        "11010011000sssssPP-ttttt011ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = sat(16, Rss.h[i] + Rtt.h[i]);\n}"
    ], 
    [
        "Rdd=vadduh(Rss,Rtt):sat", 
        "11010011000sssssPP-ttttt100ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = usat(16, Rss.uh[i] + Rtt.uh[i]);\n}"
    ], 
    [
        "Rd=vaddhub(Rss,Rtt):sat", 
        "1100000101-sssssPP-ttttt001ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rd.b[i] = usat(8, Rss.h[i] + Rtt.h[i]);\n}"
    ], 
    [
        "Rdd=vraddub(Rss,Rtt)", 
        "11101000010sssssPP0ttttt001ddddd", 
        "Rdd = 0;\nfor (i = 0; i < 4; i++) {\n    Rdd.w[0] = (Rdd.w[0] + (Rss.ub[i] + Rtt.ub[i]));\n}\n\nfor (i = 4; i < 8; i++) {\n    Rdd.w[1] = (Rdd.w[1] + (Rss.ub[i] + Rtt.ub[i]));\n}"
    ], 
    [
        "Rxx+=vraddub(Rss,Rtt)", 
        "11101010010sssssPP0ttttt001xxxxx", 
        "for (i = 0; i < 4; i++) {\n    Rxx.w[0] = (Rxx.w[0] + (Rss.ub[i] + Rtt.ub[i]));\n}\n\nfor (i = 4; i < 8; i++) {\n    Rxx.w[1] = (Rxx.w[1] + (Rss.ub[i] + Rtt.ub[i]));\n}"
    ], 
    [
        "Rd=vradduh(Rss,Rtt)", 
        "111010010--sssssPP0ttttt-01ddddd", 
        "Rd = 0;\nfor (i = 0; i < 4; i++) {\n    Rd += (Rss.uh[i] + Rtt.uh[i]);\n}"
    ], 
    [
        "Rd=vraddh(Rss,Rtt)", 
        "111010010-1sssssPP0ttttt111ddddd", 
        "Rd = 0;\nfor (i = 0; i < 4; i++) {\n    Rd += (Rss.h[i] + Rtt.h[i]);\n}"
    ], 
    [
        "Rdd=vaddub(Rss,Rtt)", 
        "11010011000sssssPP-ttttt000ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = (Rss.ub[i] + Rtt.ub[i]);\n}"
    ], 
    [
        "Rdd=vaddub(Rss,Rtt):sat", 
        "11010011000sssssPP-ttttt001ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = usat(8, Rss.ub[i] + Rtt.ub[i]);\n}"
    ], 
    [
        "Rdd=vaddw(Rss,Rtt)", 
        "11010011000sssssPP-ttttt101ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (Rss.w[i] + Rtt.w[i]);\n}"
    ], 
    [
        "Rdd=vaddw(Rss,Rtt):sat", 
        "11010011000sssssPP-ttttt110ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = sat(32, Rss.w[i] + Rtt.w[i]);\n}"
    ], 
    [
        "Rdd=vavgh(Rss,Rtt)", 
        "11010011010sssssPP-ttttt010ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rss.h[i] + Rtt.h[i]) >> 1;\n}"
    ], 
    [
        "Rdd=vavgh(Rss,Rtt):rnd", 
        "11010011010sssssPP-ttttt011ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rss.h[i] + Rtt.h[i] + 1) >> 1;\n}"
    ], 
    [
        "Rdd=vavgh(Rss,Rtt):crnd", 
        "11010011010sssssPP-ttttt100ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = convround(Rss.h[i] + Rtt.h[i]) >> 1;\n}"
    ], 
    [
        "Rdd=vavguh(Rss,Rtt)", 
        "11010011010sssssPP-ttttt101ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rss.uh[i] + Rtt.uh[i]) >> 1;\n}"
    ], 
    [
        "Rdd=vavguh(Rss,Rtt):rnd", 
        "11010011010sssssPP-ttttt11-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rss.uh[i] + Rtt.uh[i] + 1) >> 1;\n}"
    ], 
    [
        "Rdd=vnavgh(Rtt,Rss)", 
        "11010011100sssssPP-ttttt000ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rtt.h[i] - Rss.h[i]) >> 1;\n}"
    ], 
    [
        "Rdd=vnavgh(Rtt,Rss):rnd:sat", 
        "11010011100sssssPP-ttttt001ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = sat(16, (Rtt.h[i] - Rss.h[i] + 1) >> 1);\n}"
    ], 
    [
        "Rdd=vnavgh(Rtt,Rss):crnd:sat", 
        "11010011100sssssPP-ttttt010ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = sat(16, convround(Rtt.h[i] - Rss.h[i]) >> 1);\n}"
    ], 
    [
        "Rdd=vavgub(Rss,Rtt)", 
        "11010011010sssssPP-ttttt000ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = ((Rss.ub[i] + Rtt.ub[i]) >> 1);\n}"
    ], 
    [
        "Rdd=vavgub(Rss,Rtt):rnd", 
        "11010011010sssssPP-ttttt001ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = ((Rss.ub[i] + Rtt.ub[i] + 1) >> 1);\n}"
    ], 
    [
        "Rdd=vavgw(Rss,Rtt)", 
        "11010011011sssssPP-ttttt000ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (sxt(32, 33, Rss.w[i]) + sxt(32, 33, Rtt.w[i])) >> 1;\n}"
    ], 
    [
        "Rdd=vavgw(Rss,Rtt):rnd", 
        "11010011011sssssPP-ttttt001ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (sxt(32, 33, Rss.w[i]) + sxt(32, 33, Rtt.w[i]) + 1) >> 1;\n}"
    ], 
    [
        "Rdd=vavgw(Rss,Rtt):crnd", 
        "11010011011sssssPP-ttttt010ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (convround(sxt(32, 33, Rss.w[i]) + sxt(32, 33, Rtt.w[i])) >> 1);\n}"
    ], 
    [
        "Rdd=vavguw(Rss,Rtt)", 
        "11010011011sssssPP-ttttt011ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (zxt(32, 33, Rss.uw[i]) + zxt(32, 33, Rtt.uw[i])) >> 1;\n}"
    ], 
    [
        "Rdd=vavguw(Rss,Rtt):rnd", 
        "11010011011sssssPP-ttttt100ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (zxt(32, 33, Rss.uw[i]) + zxt(32, 33, Rtt.uw[i]) + 1) >> 1;\n}"
    ], 
    [
        "Rdd=vnavgw(Rtt,Rss)", 
        "11010011100sssssPP-ttttt011ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (sxt(32, 33, Rtt.w[i]) - sxt(32, 33, Rss.w[i])) >> 1;\n}"
    ], 
    [
        "Rdd=vnavgw(Rtt,Rss):rnd:sat", 
        "11010011100sssssPP-ttttt10-ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = sat(32, (sxt(32, 33, Rtt.w[i]) - sxt(32, 33, Rss.w[i]) + 1) >> 1);\n}"
    ], 
    [
        "Rdd=vnavgw(Rtt,Rss):crnd:sat", 
        "11010011100sssssPP-ttttt11-ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = sat(32, convround(sxt(32, 33, Rtt.w[i]) - sxt(32, 33, Rss.w[i])) >> 1);\n}"
    ], 
    [
        "Rdd=vcnegh(Rss,Rt)", 
        "1100001111-sssssPP-ttttt01-ddddd", 
        "for (i = 0; i < 4; i++) {\n    if (Rt.i) {\n        Rdd.h[i] = sat(16, -Rss.h[i]);\n    } else {\n        Rdd.h[i] = Rss.h[i];\n    }\n}"
    ], 
    [
        "Rxx+=vrcnegh(Rss,Rt)", 
        "11001011001sssssPP1ttttt111xxxxx", 
        "for (i = 0; i < 4; i++) {\n    if (Rt.i) {\n        Rxx += -Rss.h[i];\n    } else {\n        Rxx += Rss.h[i];\n    }\n}"
    ], 
    [
        "Rdd=vmaxub(Rtt,Rss)", 
        "11010011110sssssPP-ttttt000ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = max(Rtt.ub[i], Rss.ub[i]);\n}"
    ], 
    [
        "Rdd=vmaxb(Rtt,Rss)", 
        "11010011110sssssPP-ttttt110ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = max(Rtt.b[i], Rss.b[i]);\n}"
    ], 
    [
        "Rdd=vmaxh(Rtt,Rss)", 
        "11010011110sssssPP-ttttt001ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = max(Rtt.h[i], Rss.h[i]);\n}"
    ], 
    [
        "Rdd=vmaxuh(Rtt,Rss)", 
        "11010011110sssssPP-ttttt010ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = max(Rtt.uh[i], Rss.uh[i]);\n}"
    ], 
    [
        "Rxx=vrmaxh(Rss,Ru)", 
        "11001011001sssssPP0xxxxx001uuuuu", 
        "max = Rxx.h[0];\naddr = Rxx.w[1];\nfor (i = 0; i < 4; i++) {\n    if (max < Rss.h[i]) {\n        max = Rss.h[i];\n        addr = Ru | i << 1;\n    }\n}\n\nRxx.w[0] = max;\nRxx.w[1] = addr;"
    ], 
    [
        "Rxx=vrmaxuh(Rss,Ru)", 
        "11001011001sssssPP1xxxxx001uuuuu", 
        "max = Rxx.uh[0];\naddr = Rxx.w[1];\nfor (i = 0; i < 4; i++) {\n    if (max < Rss.uh[i]) {\n        max = Rss.uh[i];\n        addr = Ru | i << 1;\n    }\n}\n\nRxx.w[0] = max;\nRxx.w[1] = addr;"
    ], 
    [
        "Rxx=vrmaxw(Rss,Ru)", 
        "11001011001sssssPP0xxxxx010uuuuu", 
        "max = Rxx.w[0];\naddr = Rxx.w[1];\nfor (i = 0; i < 2; i++) {\n    if (max < Rss.w[i]) {\n        max = Rss.w[i];\n        addr = Ru | i << 2;\n    }\n}\n\nRxx.w[0] = max;\nRxx.w[1] = addr;"
    ], 
    [
        "Rxx=vrmaxuw(Rss,Ru)", 
        "11001011001sssssPP1xxxxx010uuuuu", 
        "max = Rxx.uw[0];\naddr = Rxx.w[1];\nfor (i = 0; i < 2; i++) {\n    if (max < Rss.uw[i]) {\n        max = Rss.uw[i];\n        addr = Ru | i << 2;\n    }\n}\n\nRxx.w[0] = max;\nRxx.w[1] = addr;"
    ], 
    [
        "Rdd=vmaxuw(Rtt,Rss)", 
        "11010011101sssssPP-ttttt101ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = max(Rtt.uw[i], Rss.uw[i]);\n}"
    ], 
    [
        "Rdd=vmaxw(Rtt,Rss)", 
        "11010011110sssssPP-ttttt011ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = max(Rtt.w[i], Rss.w[i]);\n}"
    ], 
    [
        "Rdd=vminub(Rtt,Rss)", 
        "11010011101sssssPP-ttttt000ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = min(Rtt.ub[i], Rss.ub[i]);\n}"
    ], 
    [
        "Rdd=vminb(Rtt,Rss)", 
        "11010011110sssssPP-ttttt111ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = min(Rtt.b[i], Rss.b[i]);\n}"
    ], 
    [
        "Rdd,Pe=vminub(Rtt,Rss)", 
        "11101010111sssssPP0ttttt0eeddddd", 
        "for (i = 0; i < 8; i++) {\n    Pe.i = (Rtt.ub[i] > Rss.ub[i]);\n    Rdd.b[i] = min(Rtt.ub[i], Rss.ub[i]);\n}"
    ], 
    [
        "Rdd=vminh(Rtt,Rss)", 
        "11010011101sssssPP-ttttt001ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = min(Rtt.h[i], Rss.h[i]);\n}"
    ], 
    [
        "Rdd=vminuh(Rtt,Rss)", 
        "11010011101sssssPP-ttttt010ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = min(Rtt.uh[i], Rss.uh[i]);\n}"
    ], 
    [
        "Rxx=vrminh(Rss,Ru)", 
        "11001011001sssssPP0xxxxx101uuuuu", 
        "min = Rxx.h[0];\naddr = Rxx.w[1];\nfor (i = 0; i < 4; i++) {\n    if (min > Rss.h[i]) {\n        min = Rss.h[i];\n        addr = Ru | i << 1;\n    }\n}\n\nRxx.w[0] = min;\nRxx.w[1] = addr;"
    ], 
    [
        "Rxx=vrminuh(Rss,Ru)", 
        "11001011001sssssPP1xxxxx101uuuuu", 
        "min = Rxx.uh[0];\naddr = Rxx.w[1];\nfor (i = 0; i < 4; i++) {\n    if (min > Rss.uh[i]) {\n        min = Rss.uh[i];\n        addr = Ru | i << 1;\n    }\n}\n\nRxx.w[0] = min;\nRxx.w[1] = addr;"
    ], 
    [
        "Rxx=vrminw(Rss,Ru)", 
        "11001011001sssssPP0xxxxx110uuuuu", 
        "min = Rxx.w[0];\naddr = Rxx.w[1];\nfor (i = 0; i < 2; i++) {\n    if (min > Rss.w[i]) {\n        min = Rss.w[i];\n        addr = Ru | i << 2;\n    }\n}\n\nRxx.w[0] = min;\nRxx.w[1] = addr;"
    ], 
    [
        "Rxx=vrminuw(Rss,Ru)", 
        "11001011001sssssPP1xxxxx110uuuuu", 
        "min = Rxx.uw[0];\naddr = Rxx.w[1];\nfor (i = 0; i < 2; i++) {\n    if (min > Rss.uw[i]) {\n        min = Rss.uw[i];\n        addr = Ru | i << 2;\n    }\n}\n\nRxx.w[0] = min;\nRxx.w[1] = addr;"
    ], 
    [
        "Rdd=vminw(Rtt,Rss)", 
        "11010011101sssssPP-ttttt011ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = min(Rtt.w[i], Rss.w[i]);\n}"
    ], 
    [
        "Rdd=vminuw(Rtt,Rss)", 
        "11010011101sssssPP-ttttt100ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = min(Rtt.uw[i], Rss.uw[i]);\n}"
    ], 
    [
        "Rdd=vrsadub(Rss,Rtt)", 
        "11101000010sssssPP0ttttt010ddddd", 
        "Rdd = 0;\nfor (i = 0; i < 4; i++) {\n    Rdd.w[0] = (Rdd.w[0] + ABS((Rss.ub[i] - Rtt.ub[i])));\n}\n\nfor (i = 4; i < 8; i++) {\n    Rdd.w[1] = (Rdd.w[1] + ABS((Rss.ub[i] - Rtt.ub[i])));\n}"
    ], 
    [
        "Rxx+=vrsadub(Rss,Rtt)", 
        "11101010010sssssPP0ttttt010xxxxx", 
        "for (i = 0; i < 4; i++) {\n    Rxx.w[0] = (Rxx.w[0] + ABS((Rss.ub[i] - Rtt.ub[i])));\n}\n\nfor (i = 4; i < 8; i++) {\n    Rxx.w[1] = (Rxx.w[1] + ABS((Rss.ub[i] - Rtt.ub[i])));\n}"
    ], 
    [
        "Rdd=vsubh(Rtt,Rss)", 
        "11010011001sssssPP-ttttt010ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rtt.h[i] - Rss.h[i]);\n}"
    ], 
    [
        "Rdd=vsubh(Rtt,Rss):sat", 
        "11010011001sssssPP-ttttt011ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = sat(16, Rtt.h[i] - Rss.h[i]);\n}"
    ], 
    [
        "Rdd=vsubuh(Rtt,Rss):sat", 
        "11010011001sssssPP-ttttt100ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = usat(16, Rtt.uh[i] - Rss.uh[i]);\n}"
    ], 
    [
        "Rdd=vsubub(Rtt,Rss)", 
        "11010011001sssssPP-ttttt000ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = (Rtt.ub[i] - Rss.ub[i]);\n}"
    ], 
    [
        "Rdd=vsubub(Rtt,Rss):sat", 
        "11010011001sssssPP-ttttt001ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = usat(8, Rtt.ub[i] - Rss.ub[i]);\n}"
    ], 
    [
        "Rdd=vsubw(Rtt,Rss)", 
        "11010011001sssssPP-ttttt101ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (Rtt.w[i] - Rss.w[i]);\n}"
    ], 
    [
        "Rdd=vsubw(Rtt,Rss):sat", 
        "11010011001sssssPP-ttttt110ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = sat(32, Rtt.w[i] - Rss.w[i]);\n}"
    ], 
    [
        "Rd=clb(Rss)", 
        "10001000010sssssPP------000ddddd", 
        "Rd = max(count_leading_ones(Rss), count_leading_ones(~Rss));"
    ], 
    [
        "Rd=cl0(Rss)", 
        "10001000010sssssPP------010ddddd", 
        "Rd = count_leading_ones(~Rss);"
    ], 
    [
        "Rd=cl1(Rss)", 
        "10001000010sssssPP------100ddddd", 
        "Rd = count_leading_ones(Rss);"
    ], 
    [
        "Rd=normamt(Rss)", 
        "10001000011sssssPP------000ddddd", 
        "if (Rss == 0) {\n    Rd = 0;\n} else {\n    Rd = (max(count_leading_ones(Rss), count_leading_ones(~Rss))) - 1;\n}"
    ], 
    [
        "Rd=add(clb(Rss),#s6)", 
        "10001000011sssssPPiiiiii010ddddd", 
        "Rd = (max(count_leading_ones(Rss), count_leading_ones(~Rss))) + imm_s;"
    ], 
    [
        "Rd=add(clb(Rs),#s6)", 
        "10001100001sssssPPiiiiii000ddddd", 
        "Rd = (max(count_leading_ones(Rs), count_leading_ones(~Rs))) + imm_s;"
    ], 
    [
        "Rd=clb(Rs)", 
        "10001100000sssssPP------100ddddd", 
        "Rd = max(count_leading_ones(Rs), count_leading_ones(~Rs));"
    ], 
    [
        "Rd=cl0(Rs)", 
        "10001100000sssssPP------101ddddd", 
        "Rd = count_leading_ones(~Rs);"
    ], 
    [
        "Rd=cl1(Rs)", 
        "10001100000sssssPP------110ddddd", 
        "Rd = count_leading_ones(Rs);"
    ], 
    [
        "Rd=normamt(Rs)", 
        "10001100000sssssPP------111ddddd", 
        "if (Rs == 0) {\n    Rd = 0;\n} else {\n    Rd = (max(count_leading_ones(Rs), count_leading_ones(~Rs))) - 1;\n}"
    ], 
    [
        "Rd=popcount(Rss)", 
        "10001000011sssssPP------011ddddd", 
        "Rd = count_ones(Rss);"
    ], 
    [
        "Rd=ct0(Rss)", 
        "10001000111sssssPP------010ddddd", 
        "Rd = count_leading_ones(~reverse_bits(Rss));"
    ], 
    [
        "Rd=ct1(Rss)", 
        "10001000111sssssPP------100ddddd", 
        "Rd = count_leading_ones(reverse_bits(Rss));"
    ], 
    [
        "Rd=ct0(Rs)", 
        "10001100010sssssPP------100ddddd", 
        "Rd = count_leading_ones(~reverse_bits(Rs));"
    ], 
    [
        "Rd=ct1(Rs)", 
        "10001100010sssssPP------101ddddd", 
        "Rd = count_leading_ones(reverse_bits(Rs));"
    ], 
    [
        "Rdd=extractu(Rss,#u6,#U6)", 
        "10000001IIIsssssPPiiiiiiIIIddddd", 
        "width = imm_u;\noffset = imm_U;\nRdd = zxt(width, 64, (Rss >> offset));"
    ], 
    [
        "Rdd=extract(Rss,#u6,#U6)", 
        "10001010IIIsssssPPiiiiiiIIIddddd", 
        "width = imm_u;\noffset = imm_U;\nRdd = sxt(width, 64, (Rss >> offset));"
    ], 
    [
        "Rd=extractu(Rs,#u5,#U5)", 
        "100011010IIsssssPP0iiiiiIIIddddd", 
        "width = imm_u;\noffset = imm_U;\nRd = zxt(width, 32, (Rs >> offset));"
    ], 
    [
        "Rd=extract(Rs,#u5,#U5)", 
        "100011011IIsssssPP0iiiiiIIIddddd", 
        "width = imm_u;\noffset = imm_U;\nRd = sxt(width, 32, (Rs >> offset));"
    ], 
    [
        "Rdd=extractu(Rss,Rtt)", 
        "1100000100-sssssPP-ttttt00-ddddd", 
        "width = zxt(6, 32, (Rtt.w[1]));\noffset = sxt(7, 32, (Rtt.w[0]));\nRdd = zxt(width, 64, (offset > 0) ? lsr(Rss, offset) : (Rss << offset));"
    ], 
    [
        "Rdd=extract(Rss,Rtt)", 
        "1100000111-sssssPP-ttttt10-ddddd", 
        "width = zxt(6, 32, (Rtt.w[1]));\noffset = sxt(7, 32, (Rtt.w[0]));\nRdd = sxt(width, 64, (offset > 0) ? lsr(Rss, offset) : (Rss << offset));"
    ], 
    [
        "Rd=extractu(Rs,Rtt)", 
        "1100100100-sssssPP-ttttt00-ddddd", 
        "width = zxt(6, 32, (Rtt.w[1]));\noffset = sxt(7, 32, (Rtt.w[0]));\nRd = zxt(width, 64, (offset > 0) ? lsr(zxt(32, 64, zxt(32, 64, Rs)), offset) : (zxt(32, 64, zxt(32, 64, Rs)) << offset));"
    ], 
    [
        "Rd=extract(Rs,Rtt)", 
        "1100100100-sssssPP-ttttt01-ddddd", 
        "width = zxt(6, 32, (Rtt.w[1]));\noffset = sxt(7, 32, (Rtt.w[0]));\nRd = sxt(width, 64, (offset > 0) ? lsr(zxt(32, 64, zxt(32, 64, Rs)), offset) : (zxt(32, 64, zxt(32, 64, Rs)) << offset));"
    ], 
    [
        "Rxx=insert(Rss,#u6,#U6)", 
        "10000011IIIsssssPPiiiiiiIIIxxxxx", 
        "width = imm_u;\noffset = imm_U;\nRxx &= ~(((1 << width) - 1) << offset);\nRxx |= ((Rss & ((1 << width) - 1)) << offset);"
    ], 
    [
        "Rx=insert(Rs,#u5,#U5)", 
        "100011110IIsssssPP0iiiiiIIIxxxxx", 
        "width = imm_u;\noffset = imm_U;\nRx &= ~(((1 << width) - 1) << offset);\nRx |= ((Rs & ((1 << width) - 1)) << offset);"
    ], 
    [
        "Rx=insert(Rs,Rtt)", 
        "11001000---sssssPP-ttttt---xxxxx", 
        "width = zxt(6, 32, (Rtt.w[1]));\noffset = sxt(7, 32, (Rtt.w[0]));\nmask = ((1 << width) - 1);\nif (offset < 0) {\n    Rx = 0;\n} else {\n    Rx &= ~(mask << offset);\n    Rx |= ((Rs & mask) << offset);\n}"
    ], 
    [
        "Rxx=insert(Rss,Rtt)", 
        "110010100--sssssPP0ttttt---xxxxx", 
        "width = zxt(6, 32, (Rtt.w[1]));\noffset = sxt(7, 32, (Rtt.w[0]));\nmask = ((1 << width) - 1);\nif (offset < 0) {\n    Rxx = 0;\n} else {\n    Rxx &= ~(mask << offset);\n    Rxx |= ((Rss & mask) << offset);\n}"
    ], 
    [
        "Rdd=deinterleave(Rss)", 
        "10000000110sssssPP------100ddddd", 
        "Rdd = deinterleave(ODD, EVEN);"
    ], 
    [
        "Rdd=interleave(Rss)", 
        "10000000110sssssPP------101ddddd", 
        "Rdd = interleave(Rss.w[1], Rss.w[0]);"
    ], 
    [
        "Rdd=lfs(Rss,Rtt)", 
        "1100000110-sssssPP-ttttt110ddddd", 
        "Rdd = (Rss.u64 >> 1) | ((1 & count_ones(Rss & Rtt)).u64 << 63);"
    ], 
    [
        "Rd=parity(Rss,Rtt)", 
        "11010000---sssssPP-ttttt---ddddd", 
        "Rd = 1 & count_ones(Rss & Rtt);"
    ], 
    [
        "Rd=parity(Rs,Rt)", 
        "11010101111sssssPP-ttttt---ddddd", 
        "Rd = 1 & count_ones(Rs & Rt);"
    ], 
    [
        "Rdd=brev(Rss)", 
        "10000000110sssssPP------110ddddd", 
        "Rdd = reverse_bits(Rss);"
    ], 
    [
        "Rd=brev(Rs)", 
        "10001100010sssssPP------110ddddd", 
        "Rd = reverse_bits(Rs);"
    ], 
    [
        "Rd=setbit(Rs,#u5)", 
        "10001100110sssssPP0iiiii000ddddd", 
        "Rd = (Rs | (1 << imm_u));"
    ], 
    [
        "Rd=clrbit(Rs,#u5)", 
        "10001100110sssssPP0iiiii001ddddd", 
        "Rd = (Rs & (~(1 << imm_u)));"
    ], 
    [
        "Rd=togglebit(Rs,#u5)", 
        "10001100110sssssPP0iiiii010ddddd", 
        "Rd = (Rs ^ (1 << imm_u));"
    ], 
    [
        "Rd=setbit(Rs,Rt)", 
        "1100011010-sssssPP-ttttt00-ddddd", 
        "Rd = (Rs | (sxt(7, 32, Rt) > 0) ? (zxt(32, 64, 1) << sxt(7, 32, Rt)) : lsr(zxt(32, 64, 1), sxt(7, 32, Rt)));"
    ], 
    [
        "Rd=clrbit(Rs,Rt)", 
        "1100011010-sssssPP-ttttt01-ddddd", 
        "Rd = (Rs & (~((sxt(7, 32, Rt) > 0) ? (zxt(32, 64, 1) << sxt(7, 32, Rt)) : lsr(zxt(32, 64, 1), sxt(7, 32, Rt)))));"
    ], 
    [
        "Rd=togglebit(Rs,Rt)", 
        "1100011010-sssssPP-ttttt10-ddddd", 
        "Rd = (Rs ^ (sxt(7, 32, Rt) > 0) ? (zxt(32, 64, 1) << sxt(7, 32, Rt)) : lsr(zxt(32, 64, 1), sxt(7, 32, Rt)));"
    ], 
    [
        "Rdd=bitsplit(Rs,#u5)", 
        "10001000110sssssPP0iiiii100ddddd", 
        "Rdd.w[1] = (Rs >> imm_u);\nRdd.w[0] = zxt(imm_u, 32, Rs);"
    ], 
    [
        "Rdd=bitsplit(Rs,Rt)", 
        "11010100--1sssssPP-ttttt---ddddd", 
        "shamt = zxt(5, 32, Rt);\nRdd.w[1] = (Rs >> shamt);\nRdd.w[0] = zxt(shamt, 32, Rs);"
    ], 
    [
        "Rx=tableidxb(Rs,#u4,#S6):raw", 
        "1000011100isssssPPIIIIIIiiixxxxx", 
        "width = imm_u;\noffset = imm_S;\nfield = bitrange(Rs, (width + offset - 1), offset);\nbitrange(Rx, (width - 1 + 0), 0) = field;"
    ], 
    [
        "Rx=tableidxh(Rs,#u4,#S6):raw", 
        "1000011101isssssPPIIIIIIiiixxxxx", 
        "width = imm_u;\noffset = imm_S + 1;\nfield = bitrange(Rs, (width + offset - 1), offset);\nbitrange(Rx, (width - 1 + 1), 1) = field;"
    ], 
    [
        "Rx=tableidxw(Rs,#u4,#S6):raw", 
        "1000011110isssssPPIIIIIIiiixxxxx", 
        "width = imm_u;\noffset = imm_S + 2;\nfield = bitrange(Rs, (width + offset - 1), offset);\nbitrange(Rx, (width - 1 + 2), 2) = field;"
    ], 
    [
        "Rx=tableidxd(Rs,#u4,#S6):raw", 
        "1000011111isssssPPIIIIIIiiixxxxx", 
        "width = imm_u;\noffset = imm_S + 3;\nfield = bitrange(Rs, (width + offset - 1), offset);\nbitrange(Rx, (width - 1 + 3), 3) = field;"
    ], 
    [
        "Rdd=vxaddsubh(Rss,Rtt):sat", 
        "1100000101-sssssPP-ttttt100ddddd", 
        "Rdd.h[0] = sat(16, Rss.h[0] + Rtt.h[1]);\nRdd.h[1] = sat(16, Rss.h[1] - Rtt.h[0]);\nRdd.h[2] = sat(16, Rss.h[2] + Rtt.h[3]);\nRdd.h[3] = sat(16, Rss.h[3] - Rtt.h[2]);"
    ], 
    [
        "Rdd=vxsubaddh(Rss,Rtt):sat", 
        "1100000101-sssssPP-ttttt110ddddd", 
        "Rdd.h[0] = sat(16, Rss.h[0] - Rtt.h[1]);\nRdd.h[1] = sat(16, Rss.h[1] + Rtt.h[0]);\nRdd.h[2] = sat(16, Rss.h[2] - Rtt.h[3]);\nRdd.h[3] = sat(16, Rss.h[3] + Rtt.h[2]);"
    ], 
    [
        "Rdd=vxaddsubh(Rss,Rtt):rnd:>>1:sat", 
        "1100000111-sssssPP-ttttt00-ddddd", 
        "Rdd.h[0] = sat(16, (Rss.h[0] + Rtt.h[1] + 1) >> 1);\nRdd.h[1] = sat(16, (Rss.h[1] - Rtt.h[0] + 1) >> 1);\nRdd.h[2] = sat(16, (Rss.h[2] + Rtt.h[3] + 1) >> 1);\nRdd.h[3] = sat(16, (Rss.h[3] - Rtt.h[2] + 1) >> 1);"
    ], 
    [
        "Rdd=vxsubaddh(Rss,Rtt):rnd:>>1:sat", 
        "1100000111-sssssPP-ttttt01-ddddd", 
        "Rdd.h[0] = sat(16, (Rss.h[0] - Rtt.h[1] + 1) >> 1);\nRdd.h[1] = sat(16, (Rss.h[1] + Rtt.h[0] + 1) >> 1);\nRdd.h[2] = sat(16, (Rss.h[2] - Rtt.h[3] + 1) >> 1);\nRdd.h[3] = sat(16, (Rss.h[3] + Rtt.h[2] + 1) >> 1);"
    ], 
    [
        "Rdd=vxaddsubw(Rss,Rtt):sat", 
        "1100000101-sssssPP-ttttt000ddddd", 
        "Rdd.w[0] = sat(32, Rss.w[0] + Rtt.w[1]);\nRdd.w[1] = sat(32, Rss.w[1] - Rtt.w[0]);"
    ], 
    [
        "Rdd=vxsubaddw(Rss,Rtt):sat", 
        "1100000101-sssssPP-ttttt010ddddd", 
        "Rdd.w[0] = sat(32, Rss.w[0] - Rtt.w[1]);\nRdd.w[1] = sat(32, Rss.w[1] + Rtt.w[0]);"
    ], 
    [
        "Rdd=cmpy(Rs,Rt)[:<<N]:sat", 
        "11100101N00sssssPP0ttttt110ddddd", 
        "Rdd.w[1] = sat(32, (Rs.h[1] * Rt.h[0]) << N + (Rs.h[0] * Rt.h[1]) << N);\nRdd.w[0] = sat(32, (Rs.h[0] * Rt.h[0]) << N - (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rdd=cmpy(Rs,Rt*)[:<<N]:sat", 
        "11100101N10sssssPP0ttttt110ddddd", 
        "Rdd.w[1] = sat(32, (Rs.h[1] * Rt.h[0]) << N - (Rs.h[0] * Rt.h[1]) << N);\nRdd.w[0] = sat(32, (Rs.h[0] * Rt.h[0]) << N + (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rxx+=cmpy(Rs,Rt)[:<<N]:sat", 
        "11100111N00sssssPP0ttttt110xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (Rs.h[1] * Rt.h[0]) << N + (Rs.h[0] * Rt.h[1]) << N);\nRxx.w[0] = sat(32, Rxx.w[0] + (Rs.h[0] * Rt.h[0]) << N - (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rxx-=cmpy(Rs,Rt)[:<<N]:sat", 
        "11100111N00sssssPP0ttttt111xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] - ((Rs.h[1] * Rt.h[0]) << N + (Rs.h[0] * Rt.h[1]) << N));\nRxx.w[0] = sat(32, Rxx.w[0] - ((Rs.h[0] * Rt.h[0]) << N - (Rs.h[1] * Rt.h[1]) << N));"
    ], 
    [
        "Rxx+=cmpy(Rs,Rt*)[:<<N]:sat", 
        "11100111N10sssssPP0ttttt110xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (Rs.h[1] * Rt.h[0]) << N - (Rs.h[0] * Rt.h[1]) << N);\nRxx.w[0] = sat(32, Rxx.w[0] + (Rs.h[0] * Rt.h[0]) << N + (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rxx-=cmpy(Rs,Rt*)[:<<N]:sat", 
        "11100111N10sssssPP0ttttt111xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] - ((Rs.h[1] * Rt.h[0]) << N - (Rs.h[0] * Rt.h[1]) << N));\nRxx.w[0] = sat(32, Rxx.w[0] - ((Rs.h[0] * Rt.h[0]) << N + (Rs.h[1] * Rt.h[1]) << N));"
    ], 
    [
        "Rdd=cmpyi(Rs,Rt)", 
        "11100101000sssssPP0ttttt001ddddd", 
        "Rdd = (Rs.h[1] * Rt.h[0]) + (Rs.h[0] * Rt.h[1]);"
    ], 
    [
        "Rdd=cmpyr(Rs,Rt)", 
        "11100101000sssssPP0ttttt010ddddd", 
        "Rdd = (Rs.h[0] * Rt.h[0]) - (Rs.h[1] * Rt.h[1]);"
    ], 
    [
        "Rxx+=cmpyi(Rs,Rt)", 
        "11100111000sssssPP0ttttt001xxxxx", 
        "Rxx = Rxx + (Rs.h[1] * Rt.h[0]) + (Rs.h[0] * Rt.h[1]);"
    ], 
    [
        "Rxx+=cmpyr(Rs,Rt)", 
        "11100111000sssssPP0ttttt010xxxxx", 
        "Rxx = Rxx + (Rs.h[0] * Rt.h[0]) - (Rs.h[1] * Rt.h[1]);"
    ], 
    [
        "Rd=cmpy(Rs,Rt)[:<<N]:rnd:sat", 
        "11101101N01sssssPP0ttttt110ddddd", 
        "Rd.h[1] = (sat(32, (Rs.h[1] * Rt.h[0]) << N + (Rs.h[0] * Rt.h[1]) << N + 0x8000)).h[1];\nRd.h[0] = (sat(32, (Rs.h[0] * Rt.h[0]) << N - (Rs.h[1] * Rt.h[1]) << N + 0x8000)).h[1];"
    ], 
    [
        "Rd=cmpy(Rs,Rt*)[:<<N]:rnd:sat", 
        "11101101N11sssssPP0ttttt110ddddd", 
        "Rd.h[1] = (sat(32, (Rs.h[1] * Rt.h[0]) << N - (Rs.h[0] * Rt.h[1]) << N + 0x8000)).h[1];\nRd.h[0] = (sat(32, (Rs.h[0] * Rt.h[0]) << N + (Rs.h[1] * Rt.h[1]) << N + 0x8000)).h[1];"
    ], 
    [
        "Rd=cmpyiwh(Rss,Rt):<<1:rnd:sat", 
        "11000101---sssssPP-ttttt100ddddd", 
        "Rd = sat(32, ((Rss.w[0] * Rt.h[1]) + (Rss.w[1] * Rt.h[0]) + 0x4000) >> 15);"
    ], 
    [
        "Rd=cmpyiwh(Rss,Rt*):<<1:rnd:sat", 
        "11000101---sssssPP-ttttt101ddddd", 
        "Rd = sat(32, ((Rss.w[1] * Rt.h[0]) - (Rss.w[0] * Rt.h[1]) + 0x4000) >> 15);"
    ], 
    [
        "Rd=cmpyrwh(Rss,Rt):<<1:rnd:sat", 
        "11000101---sssssPP-ttttt110ddddd", 
        "Rd = sat(32, ((Rss.w[0] * Rt.h[0]) - (Rss.w[1] * Rt.h[1]) + 0x4000) >> 15);"
    ], 
    [
        "Rd=cmpyrwh(Rss,Rt*):<<1:rnd:sat", 
        "11000101---sssssPP-ttttt111ddddd", 
        "Rd = sat(32, ((Rss.w[0] * Rt.h[0]) + (Rss.w[1] * Rt.h[1]) + 0x4000) >> 15);"
    ], 
    [
        "Rdd=vcmpyr(Rss,Rtt)[:<<N]:sat", 
        "11101000N01sssssPP0ttttt110ddddd", 
        "Rdd.w[0] = sat(32, (Rss.h[0] * Rtt.h[0]) - (Rss.h[1] * Rtt.h[1]) << N);\nRdd.w[1] = sat(32, (Rss.h[2] * Rtt.h[2]) - (Rss.h[3] * Rtt.h[3]) << N);"
    ], 
    [
        "Rdd=vcmpyi(Rss,Rtt)[:<<N]:sat", 
        "11101000N10sssssPP0ttttt110ddddd", 
        "Rdd.w[0] = sat(32, (Rss.h[1] * Rtt.h[0]) + (Rss.h[0] * Rtt.h[1]) << N);\nRdd.w[1] = sat(32, (Rss.h[3] * Rtt.h[2]) + (Rss.h[2] * Rtt.h[3]) << N);"
    ], 
    [
        "Rxx+=vcmpyr(Rss,Rtt):sat", 
        "11101010001sssssPP0ttttt100xxxxx", 
        "Rxx.w[0] = sat(32, Rxx.w[0] + (Rss.h[0] * Rtt.h[0]) - (Rss.h[1] * Rtt.h[1]) << 0);\nRxx.w[1] = sat(32, Rxx.w[1] + (Rss.h[2] * Rtt.h[2]) - (Rss.h[3] * Rtt.h[3]) << 0);"
    ], 
    [
        "Rxx+=vcmpyi(Rss,Rtt):sat", 
        "11101010010sssssPP0ttttt100xxxxx", 
        "Rxx.w[0] = sat(32, Rxx.w[0] + (Rss.h[1] * Rtt.h[0]) + (Rss.h[0] * Rtt.h[1]) << 0);\nRxx.w[1] = sat(32, Rxx.w[1] + (Rss.h[3] * Rtt.h[2]) + (Rss.h[2] * Rtt.h[3]) << 0);"
    ], 
    [
        "Rdd=vconj(Rss):sat", 
        "10000000100sssssPP------111ddddd", 
        "Rdd.h[1] = sat(16, -Rss.h[1]);\nRdd.h[0] = Rss.h[0];\nRdd.h[3] = sat(16, -Rss.h[3]);\nRdd.h[2] = Rss.h[2];"
    ], 
    [
        "Rdd=vcrotate(Rss,Rt)", 
        "1100001111-sssssPP-ttttt00-ddddd", 
        "tmp = bitrange(Rt, 1, 0);\nif (tmp == 0) {\n    Rdd.h[0] = Rss.h[0];\n    Rdd.h[1] = Rss.h[1];\n} else if (tmp == 1) {\n    Rdd.h[0] = Rss.h[1];\n    Rdd.h[1] = sat(16, -Rss.h[0]);\n} else if (tmp == 2) {\n    Rdd.h[0] = sat(16, -Rss.h[1]);\n    Rdd.h[1] = Rss.h[0];\n} else {\n    Rdd.h[0] = sat(16, -Rss.h[0]);\n    Rdd.h[1] = sat(16, -Rss.h[1]);\n}\n\ntmp = bitrange(Rt, 3, 2);\nif (tmp == 0) {\n    Rdd.h[2] = Rss.h[2];\n    Rdd.h[3] = Rss.h[3];\n} else if (tmp == 1) {\n    Rdd.h[2] = Rss.h[3];\n    Rdd.h[3] = sat(16, -Rss.h[2]);\n} else if (tmp == 2) {\n    Rdd.h[2] = sat(16, -Rss.h[3]);\n    Rdd.h[3] = Rss.h[2];\n} else {\n    Rdd.h[2] = sat(16, -Rss.h[2]);\n    Rdd.h[3] = sat(16, -Rss.h[3]);\n}"
    ], 
    [
        "Rdd=vrcmpyi(Rss,Rtt)", 
        "11101000000sssssPP0ttttt000ddddd", 
        "Rdd = (Rss.h[1] * Rtt.h[0]) + (Rss.h[0] * Rtt.h[1]) + (Rss.h[3] * Rtt.h[2]) + (Rss.h[2] * Rtt.h[3]);"
    ], 
    [
        "Rdd=vrcmpyr(Rss,Rtt)", 
        "11101000000sssssPP0ttttt001ddddd", 
        "Rdd = (Rss.h[0] * Rtt.h[0]) - (Rss.h[1] * Rtt.h[1]) + (Rss.h[2] * Rtt.h[2]) - (Rss.h[3] * Rtt.h[3]);"
    ], 
    [
        "Rdd=vrcmpyi(Rss,Rtt*)", 
        "11101000010sssssPP0ttttt000ddddd", 
        "Rdd = (Rss.h[1] * Rtt.h[0]) - (Rss.h[0] * Rtt.h[1]) + (Rss.h[3] * Rtt.h[2]) - (Rss.h[2] * Rtt.h[3]);"
    ], 
    [
        "Rdd=vrcmpyr(Rss,Rtt*)", 
        "11101000011sssssPP0ttttt001ddddd", 
        "Rdd = (Rss.h[0] * Rtt.h[0]) + (Rss.h[1] * Rtt.h[1]) + (Rss.h[2] * Rtt.h[2]) + (Rss.h[3] * Rtt.h[3]);"
    ], 
    [
        "Rxx+=vrcmpyi(Rss,Rtt)", 
        "11101010000sssssPP0ttttt000xxxxx", 
        "Rxx = Rxx + (Rss.h[1] * Rtt.h[0]) + (Rss.h[0] * Rtt.h[1]) + (Rss.h[3] * Rtt.h[2]) + (Rss.h[2] * Rtt.h[3]);"
    ], 
    [
        "Rxx+=vrcmpyr(Rss,Rtt)", 
        "11101010000sssssPP0ttttt001xxxxx", 
        "Rxx = Rxx + (Rss.h[0] * Rtt.h[0]) - (Rss.h[1] * Rtt.h[1]) + (Rss.h[2] * Rtt.h[2]) - (Rss.h[3] * Rtt.h[3]);"
    ], 
    [
        "Rxx+=vrcmpyi(Rss,Rtt*)", 
        "11101010010sssssPP0ttttt000xxxxx", 
        "Rxx = Rxx + (Rss.h[1] * Rtt.h[0]) - (Rss.h[0] * Rtt.h[1]) + (Rss.h[3] * Rtt.h[2]) - (Rss.h[2] * Rtt.h[3]);"
    ], 
    [
        "Rxx+=vrcmpyr(Rss,Rtt*)", 
        "11101010011sssssPP0ttttt001xxxxx", 
        "Rxx = Rxx + (Rss.h[0] * Rtt.h[0]) + (Rss.h[1] * Rtt.h[1]) + (Rss.h[2] * Rtt.h[2]) + (Rss.h[3] * Rtt.h[3]);"
    ], 
    [
        "Rdd=vrcmpys(Rss,Rtt):<<1:sat:raw:hi", 
        "11101000101sssssPP0ttttt100ddddd", 
        "Rdd.w[1] = sat(32, (Rss.h[1] * Rtt.w[1].h[0]) << 1 + (Rss.h[3] * Rtt.w[1].h[1]) << 1);\nRdd.w[0] = sat(32, (Rss.h[0] * Rtt.w[1].h[0]) << 1 + (Rss.h[2] * Rtt.w[1].h[1]) << 1);"
    ], 
    [
        "Rdd=vrcmpys(Rss,Rtt):<<1:sat:raw:lo", 
        "11101000111sssssPP0ttttt100ddddd", 
        "Rdd.w[1] = sat(32, (Rss.h[1] * Rtt.w[0].h[0]) << 1 + (Rss.h[3] * Rtt.w[0].h[1]) << 1);\nRdd.w[0] = sat(32, (Rss.h[0] * Rtt.w[0].h[0]) << 1 + (Rss.h[2] * Rtt.w[0].h[1]) << 1);"
    ], 
    [
        "Rxx+=vrcmpys(Rss,Rtt):<<1:sat:raw:hi", 
        "11101010101sssssPP0ttttt100xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (Rss.h[1] * Rtt.w[1].h[0]) << 1 + (Rss.h[3] * Rtt.w[1].h[1]) << 1);\nRxx.w[0] = sat(32, Rxx.w[0] + (Rss.h[0] * Rtt.w[1].h[0]) << 1 + (Rss.h[2] * Rtt.w[1].h[1]) << 1);"
    ], 
    [
        "Rxx+=vrcmpys(Rss,Rtt):<<1:sat:raw:lo", 
        "11101010111sssssPP0ttttt100xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (Rss.h[1] * Rtt.w[0].h[0]) << 1 + (Rss.h[3] * Rtt.w[0].h[1]) << 1);\nRxx.w[0] = sat(32, Rxx.w[0] + (Rss.h[0] * Rtt.w[0].h[0]) << 1 + (Rss.h[2] * Rtt.w[0].h[1]) << 1);"
    ], 
    [
        "Rd=vrcmpys(Rss,Rtt):<<1:rnd:sat:raw:hi", 
        "111010011-1sssssPP0ttttt110ddddd", 
        "Rd.h[1] = sat(32, (Rss.h[1] * Rtt.w[1].h[0]) << 1 + (Rss.h[3] * Rtt.w[1].h[1]) << 1 + 0x8000).h[1];\nRd.h[0] = sat(32, (Rss.h[0] * Rtt.w[1].h[0]) << 1 + (Rss.h[2] * Rtt.w[1].h[1]) << 1 + 0x8000).h[1];"
    ], 
    [
        "Rd=vrcmpys(Rss,Rtt):<<1:rnd:sat:raw:lo", 
        "111010011-1sssssPP0ttttt111ddddd", 
        "Rd.h[1] = sat(32, (Rss.h[1] * Rtt.w[0].h[0]) << 1 + (Rss.h[3] * Rtt.w[0].h[1]) << 1 + 0x8000).h[1];\nRd.h[0] = sat(32, (Rss.h[0] * Rtt.w[0].h[0]) << 1 + (Rss.h[2] * Rtt.w[0].h[1]) << 1 + 0x8000).h[1];"
    ], 
    [
        "Rdd=vrcrotate(Rss,Rt,#u2)", 
        "1100001111-sssssPPittttt11iddddd", 
        "sumr = 0;\nsumi = 0;\ncontrol = Rt.ub[imm_u];\nfor (i = 0; i < 8; i += 2) {\n    tmpr = Rss.b[i];\n    tmpi = Rss.b[i + 1];\n    switch (control & 3) {\n    case 0:\n        sumr += tmpr;\n        sumi += tmpi;\n        break;\n    case 1:\n        sumr += tmpi;\n        sumi -= tmpr;\n        break;\n    case 2:\n        sumr -= tmpi;\n        sumi += tmpr;\n        break;\n    case 3:\n        sumr -= tmpr;\n        sumi -= tmpi;\n        break;\n    }\n    control = control >> 2;\n}\n\nRdd.w[0] = sumr;\nRdd.w[1] = sumi;"
    ], 
    [
        "Rxx+=vrcrotate(Rss,Rt,#u2)", 
        "11001011101sssssPPittttt--ixxxxx", 
        "sumr = 0;\nsumi = 0;\ncontrol = Rt.ub[imm_u];\nfor (i = 0; i < 8; i += 2) {\n    tmpr = Rss.b[i];\n    tmpi = Rss.b[i + 1];\n    switch (control & 3) {\n    case 0:\n        sumr += tmpr;\n        sumi += tmpi;\n        break;\n    case 1:\n        sumr += tmpi;\n        sumi -= tmpr;\n        break;\n    case 2:\n        sumr -= tmpi;\n        sumi += tmpr;\n        break;\n    case 3:\n        sumr -= tmpr;\n        sumi -= tmpi;\n        break;\n    }\n    control = control >> 2;\n}\n\nRxx.w[0] = Rxx.w[0] + sumr;\nRxx.w[1] = Rxx.w[1] + sumi;"
    ], 
    [
        "Rd=sfadd(Rs,Rt)", 
        "11101011000sssssPP0ttttt000ddddd", 
        "Rd = Rs + Rt;"
    ], 
    [
        "Pd=sfclass(Rs,#u5)", 
        "10000101111sssssPP0iiiii------dd", 
        "Pd = 0;\nclass = fpclassify(Rs);\nif (bitrange(imm_u, 0, 0) && (class == FP_ZERO))\n    Pd = 0xff;\nif (bitrange(imm_u, 1, 1) && (class == FP_NORMAL))\n    Pd = 0xff;\nif (bitrange(imm_u, 2, 2) && (class == FP_SUBNORMAL))\n    Pd = 0xff;\nif (bitrange(imm_u, 3, 3) && (class == FP_INFINITE))\n    Pd = 0xff;\nif (bitrange(imm_u, 4, 4) && (class == FP_NAN))\n    Pd = 0xff;\ncancel_flags();"
    ], 
    [
        "Pd=dfclass(Rss,#u5)", 
        "11011100100sssssPP-000iiiii10-dd", 
        "Pd = 0;\nclass = fpclassify(Rss);\nif (bitrange(imm_u, 0, 0) && (class == FP_ZERO))\n    Pd = 0xff;\nif (bitrange(imm_u, 1, 1) && (class == FP_NORMAL))\n    Pd = 0xff;\nif (bitrange(imm_u, 2, 2) && (class == FP_SUBNORMAL))\n    Pd = 0xff;\nif (bitrange(imm_u, 3, 3) && (class == FP_INFINITE))\n    Pd = 0xff;\nif (bitrange(imm_u, 4, 4) && (class == FP_NAN))\n    Pd = 0xff;\ncancel_flags();"
    ], 
    [
        "Pd=sfcmp.ge(Rs,Rt)", 
        "11000111111sssssPP-ttttt000---dd", 
        "Pd = Rs >= Rt ? 0xff : 0x00;"
    ], 
    [
        "Pd=sfcmp.uo(Rs,Rt)", 
        "11000111111sssssPP-ttttt001---dd", 
        "Pd = isunordered(Rs, Rt) ? 0xff : 0x00;"
    ], 
    [
        "Pd=sfcmp.eq(Rs,Rt)", 
        "11000111111sssssPP-ttttt011---dd", 
        "Pd = Rs == Rt ? 0xff : 0x00;"
    ], 
    [
        "Pd=sfcmp.gt(Rs,Rt)", 
        "11000111111sssssPP-ttttt100---dd", 
        "Pd = Rs > Rt ? 0xff : 0x00;"
    ], 
    [
        "Pd=dfcmp.eq(Rss,Rtt)", 
        "11010010111sssssPP-ttttt000---dd", 
        "Pd = Rss == Rtt ? 0xff : 0x00;"
    ], 
    [
        "Pd=dfcmp.gt(Rss,Rtt)", 
        "11010010111sssssPP-ttttt001---dd", 
        "Pd = Rss > Rtt ? 0xff : 0x00;"
    ], 
    [
        "Pd=dfcmp.ge(Rss,Rtt)", 
        "11010010111sssssPP-ttttt010---dd", 
        "Pd = Rss >= Rtt ? 0xff : 0x00;"
    ], 
    [
        "Pd=dfcmp.uo(Rss,Rtt)", 
        "11010010111sssssPP-ttttt011---dd", 
        "Pd = isunordered(Rss, Rtt) ? 0xff : 0x00;"
    ], 
    [
        "Rdd=convert_sf2df(Rs)", 
        "100001001--sssssPP------000ddddd", 
        "Rdd = conv_sf->df(Rs);"
    ], 
    [
        "Rd=convert_df2sf(Rss)", 
        "10001000000sssssPP------001ddddd", 
        "Rd = conv_df->sf(Rss);"
    ], 
    [
        "Rdd=convert_ud2df(Rss)", 
        "10000000111sssssPP0-----010ddddd", 
        "Rdd = conv_8u->df(Rss.u64);"
    ], 
    [
        "Rdd=convert_d2df(Rss)", 
        "10000000111sssssPP0-----011ddddd", 
        "Rdd = conv_8s->df(Rss.s64);"
    ], 
    [
        "Rdd=convert_uw2df(Rs)", 
        "100001001--sssssPP------001ddddd", 
        "Rdd = conv_4u->df(Rs.uw[0]);"
    ], 
    [
        "Rdd=convert_w2df(Rs)", 
        "100001001--sssssPP------010ddddd", 
        "Rdd = conv_4s->df(Rs.s32);"
    ], 
    [
        "Rd=convert_ud2sf(Rss)", 
        "10001000001sssssPP------001ddddd", 
        "Rd = conv_8u->sf(Rss.u64);"
    ], 
    [
        "Rd=convert_d2sf(Rss)", 
        "10001000010sssssPP------001ddddd", 
        "Rd = conv_8s->sf(Rss.s64);"
    ], 
    [
        "Rd=convert_uw2sf(Rs)", 
        "10001011001sssssPP------000ddddd", 
        "Rd = conv_4u->sf(Rs.uw[0]);"
    ], 
    [
        "Rd=convert_w2sf(Rs)", 
        "10001011010sssssPP------000ddddd", 
        "Rd = conv_4s->sf(Rs.s32);"
    ], 
    [
        "Rdd=convert_df2d(Rss)", 
        "10000000111sssssPP0-----000ddddd", 
        "Rdd = conv_df(8, true, Rss).s64;"
    ], 
    [
        "Rdd=convert_df2ud(Rss)", 
        "10000000111sssssPP0-----001ddddd", 
        "Rdd = conv_df(8, false, Rss).u64;"
    ], 
    [
        "Rdd=convert_df2d(Rss):chop", 
        "10000000111sssssPP0-----110ddddd", 
        "round->zero();\nRdd = conv_df(8, true, Rss).s64;"
    ], 
    [
        "Rdd=convert_df2ud(Rss):chop", 
        "10000000111sssssPP0-----111ddddd", 
        "round->zero();\nRdd = conv_df(8, false, Rss).u64;"
    ], 
    [
        "Rdd=convert_sf2ud(Rs)", 
        "100001001--sssssPP------011ddddd", 
        "Rdd = conv_sf(8, false, Rs).u64;"
    ], 
    [
        "Rdd=convert_sf2d(Rs)", 
        "100001001--sssssPP------100ddddd", 
        "Rdd = conv_sf(8, true, Rs).s64;"
    ], 
    [
        "Rdd=convert_sf2ud(Rs):chop", 
        "100001001--sssssPP------101ddddd", 
        "round->zero();\nRdd = conv_sf(8, false, Rs).u64;"
    ], 
    [
        "Rdd=convert_sf2d(Rs):chop", 
        "100001001--sssssPP------110ddddd", 
        "round->zero();\nRdd = conv_sf(8, true, Rs).s64;"
    ], 
    [
        "Rd=convert_df2uw(Rss)", 
        "10001000011sssssPP------001ddddd", 
        "Rd = conv_df(4, false, Rss).uw[0];"
    ], 
    [
        "Rd=convert_df2w(Rss)", 
        "10001000100sssssPP------001ddddd", 
        "Rd = conv_df(4, true, Rss).s32;"
    ], 
    [
        "Rd=convert_df2uw(Rss):chop", 
        "10001000101sssssPP------001ddddd", 
        "round->zero();\nRd = conv_df(4, false, Rss).uw[0];"
    ], 
    [
        "Rd=convert_df2w(Rss):chop", 
        "10001000111sssssPP------001ddddd", 
        "round->zero();\nRd = conv_df(4, true, Rss).s32;"
    ], 
    [
        "Rd=convert_sf2uw(Rs)", 
        "10001011011sssssPP------000ddddd", 
        "Rd = conv_sf(4, false, Rs).uw[0];"
    ], 
    [
        "Rd=convert_sf2uw(Rs):chop", 
        "10001011011sssssPP------001ddddd", 
        "round->zero();\nRd = conv_sf(4, false, Rs).uw[0];"
    ], 
    [
        "Rd=convert_sf2w(Rs)", 
        "10001011100sssssPP------000ddddd", 
        "Rd = conv_sf(4, true, Rs).s32;"
    ], 
    [
        "Rd=convert_sf2w(Rs):chop", 
        "10001011100sssssPP------001ddddd", 
        "round->zero();\nRd = conv_sf(4, true, Rs).s32;"
    ], 
    [
        "Rd=sffixupr(Rs)", 
        "10001011101sssssPP------000ddddd", 
        "(Rs, Rd, adjust) = invsqrt_common(Rs);\nRd = Rs;"
    ], 
    [
        "Rd=sffixupn(Rs,Rt)", 
        "11101011110sssssPP0ttttt000ddddd", 
        "(Rs, Rt, Rd, adjust) = recip_common(Rs, Rt);\nRd = Rs;"
    ], 
    [
        "Rd=sffixupd(Rs,Rt)", 
        "11101011110sssssPP0ttttt001ddddd", 
        "(Rs, Rt, Rd, adjust) = recip_common(Rs, Rt);\nRd = Rt;"
    ], 
    [
        "Rx+=sfmpy(Rs,Rt)", 
        "11101111000sssssPP0ttttt100xxxxx", 
        "Rx = fmaf(Rs, Rt, Rx);"
    ], 
    [
        "Rx-=sfmpy(Rs,Rt)", 
        "11101111000sssssPP0ttttt101xxxxx", 
        "Rx = fmaf(-Rs, Rt, Rx);"
    ], 
    [
        "Rx+=sfmpy(Rs,Rt,Pu):scale", 
        "11101111011sssssPP0ttttt1uuxxxxx", 
        "PREDUSE_TIMING;\nif (isnan(Rx) || isnan(Rs) || isnan(Rt))\n    Rx = NaN;\ntmp = fmaf(Rs, Rt, Rx) * 2 ** (Pu);\nif (!((Rx == 0.0) && is_true_zero(Rs * Rt)))\n    Rx = tmp;"
    ], 
    [
        "Rd,Pe=sfinvsqrta(Rs)", 
        "10001011111sssssPP------0eeddddd", 
        "if ((Rs, Rd, adjust) = invsqrt_common(Rs)) {\n    Pe = adjust;\n    idx = (Rs >> 17) & 0x7f;\n    mant = (invsqrt_lut[idx] << 15);\n    exp = 127 - ((exponent(Rs) - 127) >> 1) - 1;\n    Rd = -1 ** bitrange(Rs, 31, 31) * MANT(1) * 2 ** (exp - BIAS);\n}"
    ], 
    [
        "Rx+=sfmpy(Rs,Rt):lib", 
        "11101111000sssssPP0ttttt110xxxxx", 
        "round->nearest();\ninfminusinf = ((isinf(Rx)) && (isinf(Rs * Rt)) && (Rs ^ Rx ^ bitrange(Rt, 31, 31) != 0));\ninfinp = (isinf(Rx)) || (isinf(Rt)) || (isinf(Rs));\nif (isnan(Rx) || isnan(Rs) || isnan(Rt))\n    Rx = NaN;\ntmp = fmaf(Rs, Rt, Rx);\nif (!((Rx == 0.0) && is_true_zero(Rs * Rt)))\n    Rx = tmp;\ncancel_flags();\nif (isinf(Rx) && !infinp)\n    Rx = Rx - 1;\nif (infminusinf)\n    Rx = 0;"
    ], 
    [
        "Rx-=sfmpy(Rs,Rt):lib", 
        "11101111000sssssPP0ttttt111xxxxx", 
        "round->nearest();\ninfminusinf = ((isinf(Rx)) && (isinf(Rs * Rt)) && (Rs ^ Rx ^ bitrange(Rt, 31, 31) == 0));\ninfinp = (isinf(Rx)) || (isinf(Rt)) || (isinf(Rs));\nif (isnan(Rx) || isnan(Rs) || isnan(Rt))\n    Rx = NaN;\ntmp = fmaf(-Rs, Rt, Rx);\nif (!((Rx == 0.0) && is_true_zero(Rs * Rt)))\n    Rx = tmp;\ncancel_flags();\nif (isinf(Rx) && !infinp)\n    Rx = Rx - 1;\nif (infminusinf)\n    Rx = 0;"
    ], 
    [
        "Rd=sfmake(#u10):pos", 
        "1101011000i-----PPiiiiiiiiiddddd", 
        "Rd = (127 - 6) << 23;\nRd += imm_u << 17;"
    ], 
    [
        "Rd=sfmake(#u10):neg", 
        "1101011001i-----PPiiiiiiiiiddddd", 
        "Rd = (127 - 6) << 23;\nRd += (imm_u << 17);\nRd |= (1 << 31);"
    ], 
    [
        "Rdd=dfmake(#u10):pos", 
        "1101100100i-----PPiiiiiiiiiddddd", 
        "Rdd = (1023ULL - 6) << 52;\nRdd += (imm_u) << 46;"
    ], 
    [
        "Rdd=dfmake(#u10):neg", 
        "1101100101i-----PPiiiiiiiiiddddd", 
        "Rdd = (1023ULL - 6) << 52;\nRdd += (imm_u) << 46;\nRdd |= ((1ULL) << 63);"
    ], 
    [
        "Rd=sfmax(Rs,Rt)", 
        "11101011100sssssPP0ttttt000ddddd", 
        "Rd = fmaxf(Rs, Rt);"
    ], 
    [
        "Rd=sfmin(Rs,Rt)", 
        "11101011100sssssPP0ttttt001ddddd", 
        "Rd = fmin(Rs, Rt);"
    ], 
    [
        "Rd=sfmpy(Rs,Rt)", 
        "11101011010sssssPP0ttttt000ddddd", 
        "Rd = Rs * Rt;"
    ], 
    [
        "Rd,Pe=sfrecipa(Rs,Rt)", 
        "11101011111sssssPP0ttttt1eeddddd", 
        "if ((Rs, Rt, Rd, adjust) = recip_common(Rs, Rt)) {\n    Pe = adjust;\n    idx = (Rt >> 16) & 0x7f;\n    mant = (recip_lut[idx] << 15) | 1;\n    exp = 127 - (exponent(Rt) - 127) - 1;\n    Rd = -1 ** bitrange(Rt, 31, 31) * MANT(1) * 2 ** (exp - BIAS);\n}"
    ], 
    [
        "Rd=sfsub(Rs,Rt)", 
        "11101011000sssssPP0ttttt001ddddd", 
        "Rd = Rs - Rt;"
    ], 
    [
        "Rd=add(#u6,mpyi(Rs,Rt))", 
        "110101110iisssssPPitttttiiiddddd", 
        "apply_extension(imm_u);\nRd = imm_u + Rs * Rt;"
    ], 
    [
        "Rd=add(#u6,mpyi(Rs,#U6))", 
        "11011000IiisssssPPidddddiiiIIIII", 
        "apply_extension(imm_u);\nRd = imm_u + Rs * imm_U;"
    ], 
    [
        "Rd=add(Ru,mpyi(#u6:2,Rs))", 
        "110111110iisssssPPidddddiiiuuuuu", 
        "Rd = Ru + Rs * imm_u;"
    ], 
    [
        "Rd=add(Ru,mpyi(Rs,#u6))", 
        "110111111iisssssPPidddddiiiuuuuu", 
        "apply_extension(imm_u);\nRd = Ru + Rs * imm_u;"
    ], 
    [
        "Ry=add(Ru,mpyi(Ry,Rs))", 
        "11100011000sssssPP-yyyyy---uuuuu", 
        "Ry = Ru + Rs * Ry;"
    ], 
    [
        "Rd=+mpyi(Rs,#u8)", 
        "111000000--sssssPP0iiiiiiiiddddd", 
        "apply_extension(imm_u);\nRd = Rs * imm_u;"
    ], 
    [
        "Rd=-mpyi(Rs,#u8)", 
        "111000001--sssssPP0iiiiiiiiddddd", 
        "Rd = Rs * -imm_u;"
    ], 
    [
        "Rx+=mpyi(Rs,#u8)", 
        "111000010--sssssPP0iiiiiiiixxxxx", 
        "apply_extension(imm_u);\nRx = Rx + (Rs * imm_u);"
    ], 
    [
        "Rx-=mpyi(Rs,#u8)", 
        "111000011--sssssPP0iiiiiiiixxxxx", 
        "apply_extension(imm_u);\nRx = Rx - (Rs * imm_u);"
    ], 
    [
        "Rd=mpyi(Rs,Rt)", 
        "11101101000sssssPP0ttttt000ddddd", 
        "Rd = Rs * Rt;"
    ], 
    [
        "Rx+=mpyi(Rs,Rt)", 
        "11101111000sssssPP0ttttt000xxxxx", 
        "Rx = Rx + Rs * Rt;"
    ], 
    [
        "Rdd=vmpyweh(Rss,Rtt)[:<<N]:sat", 
        "11101000N00sssssPP0ttttt101ddddd", 
        "Rdd.w[1] = sat(32, ((Rss.w[1] * Rtt.h[2]) << N) >> 16);\nRdd.w[0] = sat(32, ((Rss.w[0] * Rtt.h[0]) << N) >> 16);"
    ], 
    [
        "Rdd=vmpywoh(Rss,Rtt)[:<<N]:sat", 
        "11101000N00sssssPP0ttttt111ddddd", 
        "Rdd.w[1] = sat(32, ((Rss.w[1] * Rtt.h[3]) << N) >> 16);\nRdd.w[0] = sat(32, ((Rss.w[0] * Rtt.h[1]) << N) >> 16);"
    ], 
    [
        "Rdd=vmpyweh(Rss,Rtt)[:<<N]:rnd:sat", 
        "11101000N01sssssPP0ttttt101ddddd", 
        "Rdd.w[1] = sat(32, ((Rss.w[1] * Rtt.h[2]) << N + 0x8000) >> 16);\nRdd.w[0] = sat(32, ((Rss.w[0] * Rtt.h[0]) << N + 0x8000) >> 16);"
    ], 
    [
        "Rdd=vmpywoh(Rss,Rtt)[:<<N]:rnd:sat", 
        "11101000N01sssssPP0ttttt111ddddd", 
        "Rdd.w[1] = sat(32, ((Rss.w[1] * Rtt.h[3]) << N + 0x8000) >> 16);\nRdd.w[0] = sat(32, ((Rss.w[0] * Rtt.h[1]) << N + 0x8000) >> 16);"
    ], 
    [
        "Rxx+=vmpyweh(Rss,Rtt)[:<<N]:sat", 
        "11101010N00sssssPP0ttttt101xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (((Rss.w[1] * Rtt.h[2]) << N) >> 16));\nRxx.w[0] = sat(32, Rxx.w[0] + (((Rss.w[0] * Rtt.h[0]) << N) >> 16));"
    ], 
    [
        "Rxx+=vmpywoh(Rss,Rtt)[:<<N]:sat", 
        "11101010N00sssssPP0ttttt111xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (((Rss.w[1] * Rtt.h[3]) << N) >> 16));\nRxx.w[0] = sat(32, Rxx.w[0] + (((Rss.w[0] * Rtt.h[1]) << N) >> 16));"
    ], 
    [
        "Rxx+=vmpyweh(Rss,Rtt)[:<<N]:rnd:sat", 
        "11101010N01sssssPP0ttttt101xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (((Rss.w[1] * Rtt.h[2]) << N + 0x8000) >> 16));\nRxx.w[0] = sat(32, Rxx.w[0] + (((Rss.w[0] * Rtt.h[0]) << N + 0x8000) >> 16));"
    ], 
    [
        "Rxx+=vmpywoh(Rss,Rtt)[:<<N]:rnd:sat", 
        "11101010N01sssssPP0ttttt111xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (((Rss.w[1] * Rtt.h[3]) << N + 0x8000) >> 16));\nRxx.w[0] = sat(32, Rxx.w[0] + (((Rss.w[0] * Rtt.h[1]) << N + 0x8000) >> 16));"
    ], 
    [
        "Rdd=vmpyweuh(Rss,Rtt)[:<<N]:sat", 
        "11101000N10sssssPP0ttttt101ddddd", 
        "Rdd.w[1] = sat(32, ((Rss.w[1] * Rtt.uh[2]) << N) >> 16);\nRdd.w[0] = sat(32, ((Rss.w[0] * Rtt.uh[0]) << N) >> 16);"
    ], 
    [
        "Rdd=vmpywouh(Rss,Rtt)[:<<N]:sat", 
        "11101000N10sssssPP0ttttt111ddddd", 
        "Rdd.w[1] = sat(32, ((Rss.w[1] * Rtt.uh[3]) << N) >> 16);\nRdd.w[0] = sat(32, ((Rss.w[0] * Rtt.uh[1]) << N) >> 16);"
    ], 
    [
        "Rdd=vmpyweuh(Rss,Rtt)[:<<N]:rnd:sat", 
        "11101000N11sssssPP0ttttt101ddddd", 
        "Rdd.w[1] = sat(32, ((Rss.w[1] * Rtt.uh[2]) << N + 0x8000) >> 16);\nRdd.w[0] = sat(32, ((Rss.w[0] * Rtt.uh[0]) << N + 0x8000) >> 16);"
    ], 
    [
        "Rdd=vmpywouh(Rss,Rtt)[:<<N]:rnd:sat", 
        "11101000N11sssssPP0ttttt111ddddd", 
        "Rdd.w[1] = sat(32, ((Rss.w[1] * Rtt.uh[3]) << N + 0x8000) >> 16);\nRdd.w[0] = sat(32, ((Rss.w[0] * Rtt.uh[1]) << N + 0x8000) >> 16);"
    ], 
    [
        "Rxx+=vmpyweuh(Rss,Rtt)[:<<N]:sat", 
        "11101010N10sssssPP0ttttt101xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (((Rss.w[1] * Rtt.uh[2]) << N) >> 16));\nRxx.w[0] = sat(32, Rxx.w[0] + (((Rss.w[0] * Rtt.uh[0]) << N) >> 16));"
    ], 
    [
        "Rxx+=vmpywouh(Rss,Rtt)[:<<N]:sat", 
        "11101010N10sssssPP0ttttt111xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (((Rss.w[1] * Rtt.uh[3]) << N) >> 16));\nRxx.w[0] = sat(32, Rxx.w[0] + (((Rss.w[0] * Rtt.uh[1]) << N) >> 16));"
    ], 
    [
        "Rxx+=vmpyweuh(Rss,Rtt)[:<<N]:rnd:sat", 
        "11101010N11sssssPP0ttttt101xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (((Rss.w[1] * Rtt.uh[2]) << N + 0x8000) >> 16));\nRxx.w[0] = sat(32, Rxx.w[0] + (((Rss.w[0] * Rtt.uh[0]) << N + 0x8000) >> 16));"
    ], 
    [
        "Rxx+=vmpywouh(Rss,Rtt)[:<<N]:rnd:sat", 
        "11101010N11sssssPP0ttttt111xxxxx", 
        "Rxx.w[1] = sat(32, Rxx.w[1] + (((Rss.w[1] * Rtt.uh[3]) << N + 0x8000) >> 16));\nRxx.w[0] = sat(32, Rxx.w[0] + (((Rss.w[0] * Rtt.uh[1]) << N + 0x8000) >> 16));"
    ], 
    [
        "Rdd=mpy(Rs.L,Rt.L)[:<<N]", 
        "11100100N00sssssPP-ttttt-00ddddd", 
        "Rdd = ((Rs.h[0] * Rt.h[0]) << N);"
    ], 
    [
        "Rdd=mpy(Rs.L,Rt.H)[:<<N]", 
        "11100100N00sssssPP-ttttt-01ddddd", 
        "Rdd = ((Rs.h[0] * Rt.h[1]) << N);"
    ], 
    [
        "Rdd=mpy(Rs.H,Rt.L)[:<<N]", 
        "11100100N00sssssPP-ttttt-10ddddd", 
        "Rdd = ((Rs.h[1] * Rt.h[0]) << N);"
    ], 
    [
        "Rdd=mpy(Rs.H,Rt.H)[:<<N]", 
        "11100100N00sssssPP-ttttt-11ddddd", 
        "Rdd = ((Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rdd=mpy(Rs.L,Rt.L)[:<<N]:rnd", 
        "11100100N01sssssPP-ttttt-00ddddd", 
        "Rdd = round((Rs.h[0] * Rt.h[0]) << N);"
    ], 
    [
        "Rdd=mpy(Rs.L,Rt.H)[:<<N]:rnd", 
        "11100100N01sssssPP-ttttt-01ddddd", 
        "Rdd = round((Rs.h[0] * Rt.h[1]) << N);"
    ], 
    [
        "Rdd=mpy(Rs.H,Rt.L)[:<<N]:rnd", 
        "11100100N01sssssPP-ttttt-10ddddd", 
        "Rdd = round((Rs.h[1] * Rt.h[0]) << N);"
    ], 
    [
        "Rdd=mpy(Rs.H,Rt.H)[:<<N]:rnd", 
        "11100100N01sssssPP-ttttt-11ddddd", 
        "Rdd = round((Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rxx+=mpy(Rs.L,Rt.L)[:<<N]", 
        "11100110N00sssssPP-ttttt000xxxxx", 
        "Rxx = Rxx + (Rs.h[0] * Rt.h[0]) << N;"
    ], 
    [
        "Rxx+=mpy(Rs.L,Rt.H)[:<<N]", 
        "11100110N00sssssPP-ttttt001xxxxx", 
        "Rxx = Rxx + (Rs.h[0] * Rt.h[1]) << N;"
    ], 
    [
        "Rxx+=mpy(Rs.H,Rt.L)[:<<N]", 
        "11100110N00sssssPP-ttttt010xxxxx", 
        "Rxx = Rxx + (Rs.h[1] * Rt.h[0]) << N;"
    ], 
    [
        "Rxx+=mpy(Rs.H,Rt.H)[:<<N]", 
        "11100110N00sssssPP-ttttt011xxxxx", 
        "Rxx = Rxx + (Rs.h[1] * Rt.h[1]) << N;"
    ], 
    [
        "Rxx-=mpy(Rs.L,Rt.L)[:<<N]", 
        "11100110N01sssssPP-ttttt000xxxxx", 
        "Rxx = Rxx - (Rs.h[0] * Rt.h[0]) << N;"
    ], 
    [
        "Rxx-=mpy(Rs.L,Rt.H)[:<<N]", 
        "11100110N01sssssPP-ttttt001xxxxx", 
        "Rxx = Rxx - (Rs.h[0] * Rt.h[1]) << N;"
    ], 
    [
        "Rxx-=mpy(Rs.H,Rt.L)[:<<N]", 
        "11100110N01sssssPP-ttttt010xxxxx", 
        "Rxx = Rxx - (Rs.h[1] * Rt.h[0]) << N;"
    ], 
    [
        "Rxx-=mpy(Rs.H,Rt.H)[:<<N]", 
        "11100110N01sssssPP-ttttt011xxxxx", 
        "Rxx = Rxx - (Rs.h[1] * Rt.h[1]) << N;"
    ], 
    [
        "Rd=mpy(Rs.L,Rt.L)[:<<N]", 
        "11101100N00sssssPP-ttttt000ddddd", 
        "Rd = (((Rs.h[0] * Rt.h[0]) << N));"
    ], 
    [
        "Rd=mpy(Rs.L,Rt.H)[:<<N]", 
        "11101100N00sssssPP-ttttt001ddddd", 
        "Rd = (((Rs.h[0] * Rt.h[1]) << N));"
    ], 
    [
        "Rd=mpy(Rs.H,Rt.L)[:<<N]", 
        "11101100N00sssssPP-ttttt010ddddd", 
        "Rd = (((Rs.h[1] * Rt.h[0]) << N));"
    ], 
    [
        "Rd=mpy(Rs.H,Rt.H)[:<<N]", 
        "11101100N00sssssPP-ttttt011ddddd", 
        "Rd = (((Rs.h[1] * Rt.h[1]) << N));"
    ], 
    [
        "Rd=mpy(Rs.L,Rt.L)[:<<N]:sat", 
        "11101100N00sssssPP-ttttt100ddddd", 
        "Rd = sat(32, ((Rs.h[0] * Rt.h[0]) << N));"
    ], 
    [
        "Rd=mpy(Rs.L,Rt.H)[:<<N]:sat", 
        "11101100N00sssssPP-ttttt101ddddd", 
        "Rd = sat(32, ((Rs.h[0] * Rt.h[1]) << N));"
    ], 
    [
        "Rd=mpy(Rs.H,Rt.L)[:<<N]:sat", 
        "11101100N00sssssPP-ttttt110ddddd", 
        "Rd = sat(32, ((Rs.h[1] * Rt.h[0]) << N));"
    ], 
    [
        "Rd=mpy(Rs.H,Rt.H)[:<<N]:sat", 
        "11101100N00sssssPP-ttttt111ddddd", 
        "Rd = sat(32, ((Rs.h[1] * Rt.h[1]) << N));"
    ], 
    [
        "Rd=mpy(Rs.L,Rt.L)[:<<N]:rnd", 
        "11101100N01sssssPP-ttttt000ddddd", 
        "Rd = (round((Rs.h[0] * Rt.h[0]) << N));"
    ], 
    [
        "Rd=mpy(Rs.L,Rt.H)[:<<N]:rnd", 
        "11101100N01sssssPP-ttttt001ddddd", 
        "Rd = (round((Rs.h[0] * Rt.h[1]) << N));"
    ], 
    [
        "Rd=mpy(Rs.H,Rt.L)[:<<N]:rnd", 
        "11101100N01sssssPP-ttttt010ddddd", 
        "Rd = (round((Rs.h[1] * Rt.h[0]) << N));"
    ], 
    [
        "Rd=mpy(Rs.H,Rt.H)[:<<N]:rnd", 
        "11101100N01sssssPP-ttttt011ddddd", 
        "Rd = (round((Rs.h[1] * Rt.h[1]) << N));"
    ], 
    [
        "Rd=mpy(Rs.L,Rt.L)[:<<N]:rnd:sat", 
        "11101100N01sssssPP-ttttt100ddddd", 
        "Rd = sat(32, round((Rs.h[0] * Rt.h[0]) << N));"
    ], 
    [
        "Rd=mpy(Rs.L,Rt.H)[:<<N]:rnd:sat", 
        "11101100N01sssssPP-ttttt101ddddd", 
        "Rd = sat(32, round((Rs.h[0] * Rt.h[1]) << N));"
    ], 
    [
        "Rd=mpy(Rs.H,Rt.L)[:<<N]:rnd:sat", 
        "11101100N01sssssPP-ttttt110ddddd", 
        "Rd = sat(32, round((Rs.h[1] * Rt.h[0]) << N));"
    ], 
    [
        "Rd=mpy(Rs.H,Rt.H)[:<<N]:rnd:sat", 
        "11101100N01sssssPP-ttttt111ddddd", 
        "Rd = sat(32, round((Rs.h[1] * Rt.h[1]) << N));"
    ], 
    [
        "Rx+=mpy(Rs.L,Rt.L)[:<<N]", 
        "11101110N00sssssPP-ttttt000xxxxx", 
        "Rx = (Rx + (Rs.h[0] * Rt.h[0]) << N);"
    ], 
    [
        "Rx+=mpy(Rs.L,Rt.H)[:<<N]", 
        "11101110N00sssssPP-ttttt001xxxxx", 
        "Rx = (Rx + (Rs.h[0] * Rt.h[1]) << N);"
    ], 
    [
        "Rx+=mpy(Rs.H,Rt.L)[:<<N]", 
        "11101110N00sssssPP-ttttt010xxxxx", 
        "Rx = (Rx + (Rs.h[1] * Rt.h[0]) << N);"
    ], 
    [
        "Rx+=mpy(Rs.H,Rt.H)[:<<N]", 
        "11101110N00sssssPP-ttttt011xxxxx", 
        "Rx = (Rx + (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rx+=mpy(Rs.L,Rt.L)[:<<N]:sat", 
        "11101110N00sssssPP-ttttt100xxxxx", 
        "Rx = sat(32, Rx + (Rs.h[0] * Rt.h[0]) << N);"
    ], 
    [
        "Rx+=mpy(Rs.L,Rt.H)[:<<N]:sat", 
        "11101110N00sssssPP-ttttt101xxxxx", 
        "Rx = sat(32, Rx + (Rs.h[0] * Rt.h[1]) << N);"
    ], 
    [
        "Rx+=mpy(Rs.H,Rt.L)[:<<N]:sat", 
        "11101110N00sssssPP-ttttt110xxxxx", 
        "Rx = sat(32, Rx + (Rs.h[1] * Rt.h[0]) << N);"
    ], 
    [
        "Rx+=mpy(Rs.H,Rt.H)[:<<N]:sat", 
        "11101110N00sssssPP-ttttt111xxxxx", 
        "Rx = sat(32, Rx + (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rx-=mpy(Rs.L,Rt.L)[:<<N]", 
        "11101110N01sssssPP-ttttt000xxxxx", 
        "Rx = (Rx - (Rs.h[0] * Rt.h[0]) << N);"
    ], 
    [
        "Rx-=mpy(Rs.L,Rt.H)[:<<N]", 
        "11101110N01sssssPP-ttttt001xxxxx", 
        "Rx = (Rx - (Rs.h[0] * Rt.h[1]) << N);"
    ], 
    [
        "Rx-=mpy(Rs.H,Rt.L)[:<<N]", 
        "11101110N01sssssPP-ttttt010xxxxx", 
        "Rx = (Rx - (Rs.h[1] * Rt.h[0]) << N);"
    ], 
    [
        "Rx-=mpy(Rs.H,Rt.H)[:<<N]", 
        "11101110N01sssssPP-ttttt011xxxxx", 
        "Rx = (Rx - (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rx-=mpy(Rs.L,Rt.L)[:<<N]:sat", 
        "11101110N01sssssPP-ttttt100xxxxx", 
        "Rx = sat(32, Rx - (Rs.h[0] * Rt.h[0]) << N);"
    ], 
    [
        "Rx-=mpy(Rs.L,Rt.H)[:<<N]:sat", 
        "11101110N01sssssPP-ttttt101xxxxx", 
        "Rx = sat(32, Rx - (Rs.h[0] * Rt.h[1]) << N);"
    ], 
    [
        "Rx-=mpy(Rs.H,Rt.L)[:<<N]:sat", 
        "11101110N01sssssPP-ttttt110xxxxx", 
        "Rx = sat(32, Rx - (Rs.h[1] * Rt.h[0]) << N);"
    ], 
    [
        "Rx-=mpy(Rs.H,Rt.H)[:<<N]:sat", 
        "11101110N01sssssPP-ttttt111xxxxx", 
        "Rx = sat(32, Rx - (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rdd=mpyu(Rs.L,Rt.L)[:<<N]", 
        "11100100N10sssssPP-ttttt-00ddddd", 
        "Rdd = (Rs.uh[0] * Rt.uh[0]) << N;"
    ], 
    [
        "Rdd=mpyu(Rs.L,Rt.H)[:<<N]", 
        "11100100N10sssssPP-ttttt-01ddddd", 
        "Rdd = (Rs.uh[0] * Rt.uh[1]) << N;"
    ], 
    [
        "Rdd=mpyu(Rs.H,Rt.L)[:<<N]", 
        "11100100N10sssssPP-ttttt-10ddddd", 
        "Rdd = (Rs.uh[1] * Rt.uh[0]) << N;"
    ], 
    [
        "Rdd=mpyu(Rs.H,Rt.H)[:<<N]", 
        "11100100N10sssssPP-ttttt-11ddddd", 
        "Rdd = (Rs.uh[1] * Rt.uh[1]) << N;"
    ], 
    [
        "Rxx+=mpyu(Rs.L,Rt.L)[:<<N]", 
        "11100110N10sssssPP-ttttt000xxxxx", 
        "Rxx = Rxx + (Rs.uh[0] * Rt.uh[0]) << N;"
    ], 
    [
        "Rxx+=mpyu(Rs.L,Rt.H)[:<<N]", 
        "11100110N10sssssPP-ttttt001xxxxx", 
        "Rxx = Rxx + (Rs.uh[0] * Rt.uh[1]) << N;"
    ], 
    [
        "Rxx+=mpyu(Rs.H,Rt.L)[:<<N]", 
        "11100110N10sssssPP-ttttt010xxxxx", 
        "Rxx = Rxx + (Rs.uh[1] * Rt.uh[0]) << N;"
    ], 
    [
        "Rxx+=mpyu(Rs.H,Rt.H)[:<<N]", 
        "11100110N10sssssPP-ttttt011xxxxx", 
        "Rxx = Rxx + (Rs.uh[1] * Rt.uh[1]) << N;"
    ], 
    [
        "Rxx-=mpyu(Rs.L,Rt.L)[:<<N]", 
        "11100110N11sssssPP-ttttt000xxxxx", 
        "Rxx = Rxx - (Rs.uh[0] * Rt.uh[0]) << N;"
    ], 
    [
        "Rxx-=mpyu(Rs.L,Rt.H)[:<<N]", 
        "11100110N11sssssPP-ttttt001xxxxx", 
        "Rxx = Rxx - (Rs.uh[0] * Rt.uh[1]) << N;"
    ], 
    [
        "Rxx-=mpyu(Rs.H,Rt.L)[:<<N]", 
        "11100110N11sssssPP-ttttt010xxxxx", 
        "Rxx = Rxx - (Rs.uh[1] * Rt.uh[0]) << N;"
    ], 
    [
        "Rxx-=mpyu(Rs.H,Rt.H)[:<<N]", 
        "11100110N11sssssPP-ttttt011xxxxx", 
        "Rxx = Rxx - (Rs.uh[1] * Rt.uh[1]) << N;"
    ], 
    [
        "Rd=mpyu(Rs.L,Rt.L)[:<<N]", 
        "11101100N10sssssPP-ttttt000ddddd", 
        "Rd = (Rs.uh[0] * Rt.uh[0]) << N;"
    ], 
    [
        "Rd=mpyu(Rs.L,Rt.H)[:<<N]", 
        "11101100N10sssssPP-ttttt001ddddd", 
        "Rd = (Rs.uh[0] * Rt.uh[1]) << N;"
    ], 
    [
        "Rd=mpyu(Rs.H,Rt.L)[:<<N]", 
        "11101100N10sssssPP-ttttt010ddddd", 
        "Rd = (Rs.uh[1] * Rt.uh[0]) << N;"
    ], 
    [
        "Rd=mpyu(Rs.H,Rt.H)[:<<N]", 
        "11101100N10sssssPP-ttttt011ddddd", 
        "Rd = (Rs.uh[1] * Rt.uh[1]) << N;"
    ], 
    [
        "Rx+=mpyu(Rs.L,Rt.L)[:<<N]", 
        "11101110N10sssssPP-ttttt000xxxxx", 
        "Rx = Rx + (Rs.uh[0] * Rt.uh[0]) << N;"
    ], 
    [
        "Rx+=mpyu(Rs.L,Rt.H)[:<<N]", 
        "11101110N10sssssPP-ttttt001xxxxx", 
        "Rx = Rx + (Rs.uh[0] * Rt.uh[1]) << N;"
    ], 
    [
        "Rx+=mpyu(Rs.H,Rt.L)[:<<N]", 
        "11101110N10sssssPP-ttttt010xxxxx", 
        "Rx = Rx + (Rs.uh[1] * Rt.uh[0]) << N;"
    ], 
    [
        "Rx+=mpyu(Rs.H,Rt.H)[:<<N]", 
        "11101110N10sssssPP-ttttt011xxxxx", 
        "Rx = Rx + (Rs.uh[1] * Rt.uh[1]) << N;"
    ], 
    [
        "Rx-=mpyu(Rs.L,Rt.L)[:<<N]", 
        "11101110N11sssssPP-ttttt000xxxxx", 
        "Rx = Rx - (Rs.uh[0] * Rt.uh[0]) << N;"
    ], 
    [
        "Rx-=mpyu(Rs.L,Rt.H)[:<<N]", 
        "11101110N11sssssPP-ttttt001xxxxx", 
        "Rx = Rx - (Rs.uh[0] * Rt.uh[1]) << N;"
    ], 
    [
        "Rx-=mpyu(Rs.H,Rt.L)[:<<N]", 
        "11101110N11sssssPP-ttttt010xxxxx", 
        "Rx = Rx - (Rs.uh[1] * Rt.uh[0]) << N;"
    ], 
    [
        "Rx-=mpyu(Rs.H,Rt.H)[:<<N]", 
        "11101110N11sssssPP-ttttt011xxxxx", 
        "Rx = Rx - (Rs.uh[1] * Rt.uh[1]) << N;"
    ], 
    [
        "Rdd=pmpyw(Rs,Rt)", 
        "11100101010sssssPP0ttttt111ddddd", 
        "x = Rs.uw[0];\ny = Rt.uw[0];\nprod = 0;\nfor (i = 0; i < 32; i++) {\n    if ((y >> i) & 1)\n        prod ^= (x << i);\n}\n\nRdd = prod;"
    ], 
    [
        "Rxx^=pmpyw(Rs,Rt)", 
        "11100111001sssssPP0ttttt111xxxxx", 
        "x = Rs.uw[0];\ny = Rt.uw[0];\nprod = 0;\nfor (i = 0; i < 32; i++) {\n    if ((y >> i) & 1)\n        prod ^= (x << i);\n}\n\nRxx ^= prod;"
    ], 
    [
        "Rdd=vrmpywoh(Rss,Rtt)[:<<N]", 
        "11101000N01sssssPP0ttttt010ddddd", 
        "Rdd = (Rss.w[1] * Rtt.h[3]) << N + (Rss.w[0] * Rtt.h[1]) << N;"
    ], 
    [
        "Rdd=vrmpyweh(Rss,Rtt)[:<<N]", 
        "11101000N10sssssPP0ttttt100ddddd", 
        "Rdd = (Rss.w[1] * Rtt.h[2]) << N + (Rss.w[0] * Rtt.h[0]) << N;"
    ], 
    [
        "Rxx+=vrmpyweh(Rss,Rtt)[:<<N]", 
        "11101010N01sssssPP0ttttt110xxxxx", 
        "Rxx += (Rss.w[1] * Rtt.h[2]) << N + (Rss.w[0] * Rtt.h[0]) << N;"
    ], 
    [
        "Rxx+=vrmpywoh(Rss,Rtt)[:<<N]", 
        "11101010N11sssssPP0ttttt110xxxxx", 
        "Rxx += (Rss.w[1] * Rtt.h[3]) << N + (Rss.w[0] * Rtt.h[1]) << N;"
    ], 
    [
        "Rd=mpy(Rs,Rt):rnd", 
        "11101101001sssssPP0ttttt001ddddd", 
        "Rd = ((Rs * Rt) + 0x80000000) >> 32;"
    ], 
    [
        "Rd=mpyu(Rs,Rt)", 
        "11101101010sssssPP0ttttt001ddddd", 
        "Rd = (Rs.uw[0] * Rt.uw[0]) >> 32;"
    ], 
    [
        "Rd=mpysu(Rs,Rt)", 
        "11101101011sssssPP0ttttt001ddddd", 
        "Rd = (Rs * Rt.uw[0]) >> 32;"
    ], 
    [
        "Rd=mpy(Rs,Rt.H):<<1:sat", 
        "11101101101sssssPP0ttttt000ddddd", 
        "Rd = sat(32, ((Rs * Rt.h[1]) << 1) >> 16);"
    ], 
    [
        "Rd=mpy(Rs,Rt.L):<<1:sat", 
        "11101101101sssssPP0ttttt001ddddd", 
        "Rd = sat(32, ((Rs * Rt.h[0]) << 1) >> 16);"
    ], 
    [
        "Rd=mpy(Rs,Rt.H):<<1:rnd:sat", 
        "11101101101sssssPP0ttttt100ddddd", 
        "Rd = sat(32, ((Rs * Rt.h[1]) << 1 + 0x8000) >> 16);"
    ], 
    [
        "Rd=mpy(Rs,Rt):<<1:sat", 
        "11101101111sssssPP0ttttt000ddddd", 
        "Rd = sat(32, (Rs * Rt) >> 31);"
    ], 
    [
        "Rd=mpy(Rs,Rt.L):<<1:rnd:sat", 
        "11101101111sssssPP0ttttt100ddddd", 
        "Rd = sat(32, ((Rs * Rt.h[0]) << 1 + 0x8000) >> 16);"
    ], 
    [
        "Rd=mpy(Rs,Rt)[:<<N]", 
        "11101101N0NsssssPP0ttttt0NNddddd", 
        "Rd = (Rs * Rt) >> 31;"
    ], 
    [
        "Rx+=mpy(Rs,Rt):<<1:sat", 
        "11101111011sssssPP0ttttt000xxxxx", 
        "Rx = sat(32, (Rx) + ((Rs * Rt) >> 31));"
    ], 
    [
        "Rx-=mpy(Rs,Rt):<<1:sat", 
        "11101111011sssssPP0ttttt001xxxxx", 
        "Rx = sat(32, (Rx) - ((Rs * Rt) >> 31));"
    ], 
    [
        "Rdd=mpy(Rs,Rt)", 
        "11100101000sssssPP0ttttt000ddddd", 
        "Rdd = (Rs * Rt);"
    ], 
    [
        "Rdd=mpyu(Rs,Rt)", 
        "11100101010sssssPP0ttttt000ddddd", 
        "Rdd = (Rs.uw[0] * Rt.uw[0]);"
    ], 
    [
        "Rxx+=mpy(Rs,Rt)", 
        "11100111000sssssPP0ttttt000xxxxx", 
        "Rxx = Rxx + (Rs * Rt);"
    ], 
    [
        "Rxx-=mpy(Rs,Rt)", 
        "11100111001sssssPP0ttttt000xxxxx", 
        "Rxx = Rxx - (Rs * Rt);"
    ], 
    [
        "Rxx+=mpyu(Rs,Rt)", 
        "11100111010sssssPP0ttttt000xxxxx", 
        "Rxx = Rxx + (Rs.uw[0] * Rt.uw[0]);"
    ], 
    [
        "Rxx-=mpyu(Rs,Rt)", 
        "11100111011sssssPP0ttttt000xxxxx", 
        "Rxx = Rxx - (Rs.uw[0] * Rt.uw[0]);"
    ], 
    [
        "Rdd=vdmpy(Rss,Rtt)[:<<N]:sat", 
        "11101000N00sssssPP0ttttt100ddddd", 
        "Rdd.w[0] = sat(32, (Rss.h[0] * Rtt.h[0]) << 1 + (Rss.h[1] * Rtt.h[1]) << 1);\nRdd.w[1] = sat(32, (Rss.h[2] * Rtt.h[2]) << 1 + (Rss.h[3] * Rtt.h[3]) << 1);"
    ], 
    [
        "Rxx+=vdmpy(Rss,Rtt)[:<<N]:sat", 
        "11101010N00sssssPP0ttttt100xxxxx", 
        "Rxx.w[0] = sat(32, Rxx.w[0] + (Rss.h[0] * Rtt.h[0]) << 1 + (Rss.h[1] * Rtt.h[1]) << 1);\nRxx.w[1] = sat(32, Rxx.w[1] + (Rss.h[2] * Rtt.h[2]) << 1 + (Rss.h[3] * Rtt.h[3]) << 1);"
    ], 
    [
        "Rd=vdmpy(Rss,Rtt)[:<<N]:rnd:sat", 
        "11101001N--sssssPP0ttttt-00ddddd", 
        "Rd.h[0] = (sat(32, (Rss.h[0] * Rtt.h[0]) << N + (Rss.h[1] * Rtt.h[1]) << N + 0x8000)).h[1];\nRd.h[1] = (sat(32, (Rss.h[2] * Rtt.h[2]) << N + (Rss.h[3] * Rtt.h[3]) << N + 0x8000)).h[1];"
    ], 
    [
        "Rdd=vrmpybu(Rss,Rtt)", 
        "11101000100sssssPP0ttttt001ddddd", 
        "Rdd.w[0] = ((Rss.ub[0] * Rtt.ub[0]) + (Rss.ub[1] * Rtt.ub[1]) + (Rss.ub[2] * Rtt.ub[2]) + (Rss.ub[3] * Rtt.ub[3]));\nRdd.w[1] = ((Rss.ub[4] * Rtt.ub[4]) + (Rss.ub[5] * Rtt.ub[5]) + (Rss.ub[6] * Rtt.ub[6]) + (Rss.ub[7] * Rtt.ub[7]));"
    ], 
    [
        "Rdd=vrmpybsu(Rss,Rtt)", 
        "11101000110sssssPP0ttttt001ddddd", 
        "Rdd.w[0] = ((Rss.b[0] * Rtt.ub[0]) + (Rss.b[1] * Rtt.ub[1]) + (Rss.b[2] * Rtt.ub[2]) + (Rss.b[3] * Rtt.ub[3]));\nRdd.w[1] = ((Rss.b[4] * Rtt.ub[4]) + (Rss.b[5] * Rtt.ub[5]) + (Rss.b[6] * Rtt.ub[6]) + (Rss.b[7] * Rtt.ub[7]));"
    ], 
    [
        "Rxx+=vrmpybu(Rss,Rtt)", 
        "11101010100sssssPP0ttttt001xxxxx", 
        "Rxx.w[0] = (Rxx.w[0] + (Rss.ub[0] * Rtt.ub[0]) + (Rss.ub[1] * Rtt.ub[1]) + (Rss.ub[2] * Rtt.ub[2]) + (Rss.ub[3] * Rtt.ub[3]));\nRxx.w[1] = (Rxx.w[1] + (Rss.ub[4] * Rtt.ub[4]) + (Rss.ub[5] * Rtt.ub[5]) + (Rss.ub[6] * Rtt.ub[6]) + (Rss.ub[7] * Rtt.ub[7]));"
    ], 
    [
        "Rxx+=vrmpybsu(Rss,Rtt)", 
        "11101010110sssssPP0ttttt001xxxxx", 
        "Rxx.w[0] = (Rxx.w[0] + (Rss.b[0] * Rtt.ub[0]) + (Rss.b[1] * Rtt.ub[1]) + (Rss.b[2] * Rtt.ub[2]) + (Rss.b[3] * Rtt.ub[3]));\nRxx.w[1] = (Rxx.w[1] + (Rss.b[4] * Rtt.ub[4]) + (Rss.b[5] * Rtt.ub[5]) + (Rss.b[6] * Rtt.ub[6]) + (Rss.b[7] * Rtt.ub[7]));"
    ], 
    [
        "Rdd=vdmpybsu(Rss,Rtt):sat", 
        "11101000101sssssPP0ttttt001ddddd", 
        "Rdd.h[0] = sat(16, ((Rss.b[0] * Rtt.ub[0]) + (Rss.b[1] * Rtt.ub[1])));\nRdd.h[1] = sat(16, ((Rss.b[2] * Rtt.ub[2]) + (Rss.b[3] * Rtt.ub[3])));\nRdd.h[2] = sat(16, ((Rss.b[4] * Rtt.ub[4]) + (Rss.b[5] * Rtt.ub[5])));\nRdd.h[3] = sat(16, ((Rss.b[6] * Rtt.ub[6]) + (Rss.b[7] * Rtt.ub[7])));"
    ], 
    [
        "Rxx+=vdmpybsu(Rss,Rtt):sat", 
        "11101010001sssssPP0ttttt001xxxxx", 
        "Rxx.h[0] = sat(16, (Rxx.h[0] + (Rss.b[0] * Rtt.ub[0]) + (Rss.b[1] * Rtt.ub[1])));\nRxx.h[1] = sat(16, (Rxx.h[1] + (Rss.b[2] * Rtt.ub[2]) + (Rss.b[3] * Rtt.ub[3])));\nRxx.h[2] = sat(16, (Rxx.h[2] + (Rss.b[4] * Rtt.ub[4]) + (Rss.b[5] * Rtt.ub[5])));\nRxx.h[3] = sat(16, (Rxx.h[3] + (Rss.b[6] * Rtt.ub[6]) + (Rss.b[7] * Rtt.ub[7])));"
    ], 
    [
        "Rdd=vmpyeh(Rss,Rtt)[:<<N]:sat", 
        "11101000N00sssssPP0ttttt110ddddd", 
        "Rdd.w[0] = sat(32, (Rss.h[0] * Rtt.h[0]) << 1);\nRdd.w[1] = sat(32, (Rss.h[2] * Rtt.h[2]) << 1);"
    ], 
    [
        "Rxx+=vmpyeh(Rss,Rtt)", 
        "11101010001sssssPP0ttttt010xxxxx", 
        "Rxx.w[0] = Rxx.w[0] + (Rss.h[0] * Rtt.h[0]);\nRxx.w[1] = Rxx.w[1] + (Rss.h[2] * Rtt.h[2]);"
    ], 
    [
        "Rxx+=vmpyeh(Rss,Rtt)[:<<N]:sat", 
        "11101010N00sssssPP0ttttt110xxxxx", 
        "Rxx.w[0] = sat(32, Rxx.w[0] + (Rss.h[0] * Rtt.h[0]) << 1);\nRxx.w[1] = sat(32, Rxx.w[1] + (Rss.h[2] * Rtt.h[2]) << 1);"
    ], 
    [
        "Rdd=vmpyh(Rs,Rt)[:<<N]:sat", 
        "11100101N00sssssPP0ttttt101ddddd", 
        "Rdd.w[0] = sat(32, (Rs.h[0] * Rt.h[0]) << N);\nRdd.w[1] = sat(32, (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rxx+=vmpyh(Rs,Rt)", 
        "11100111001sssssPP0ttttt001xxxxx", 
        "Rxx.w[0] = Rxx.w[0] + (Rs.h[0] * Rt.h[0]);\nRxx.w[1] = Rxx.w[1] + (Rs.h[1] * Rt.h[1]);"
    ], 
    [
        "Rxx+=vmpyh(Rs,Rt)[:<<N]:sat", 
        "11100111N00sssssPP0ttttt101xxxxx", 
        "Rxx.w[0] = sat(32, Rxx.w[0] + (Rs.h[0] * Rt.h[0]) << N);\nRxx.w[1] = sat(32, Rxx.w[1] + (Rs.h[1] * Rt.h[1]) << N);"
    ], 
    [
        "Rd=vmpyh(Rs,Rt)[:<<N]:rnd:sat", 
        "11101101N01sssssPP0ttttt111ddddd", 
        "Rd.h[1] = (sat(32, (Rs.h[1] * Rt.h[1]) << N + 0x8000)).h[1];\nRd.h[0] = (sat(32, (Rs.h[0] * Rt.h[0]) << N + 0x8000)).h[1];"
    ], 
    [
        "Rdd=vmpyhsu(Rs,Rt)[:<<N]:sat", 
        "11100101N00sssssPP0ttttt111ddddd", 
        "Rdd.w[0] = sat(32, (Rs.h[0] * Rt.uh[0]) << N);\nRdd.w[1] = sat(32, (Rs.h[1] * Rt.uh[1]) << N);"
    ], 
    [
        "Rxx+=vmpyhsu(Rs,Rt)[:<<N]:sat", 
        "11100111N11sssssPP0ttttt101xxxxx", 
        "Rxx.w[0] = sat(32, Rxx.w[0] + (Rs.h[0] * Rt.uh[0]) << N);\nRxx.w[1] = sat(32, Rxx.w[1] + (Rs.h[1] * Rt.uh[1]) << N);"
    ], 
    [
        "Rdd=vrmpyh(Rss,Rtt)", 
        "11101000000sssssPP0ttttt010ddddd", 
        "Rdd = (Rss.h[0] * Rtt.h[0]) + (Rss.h[1] * Rtt.h[1]) + (Rss.h[2] * Rtt.h[2]) + (Rss.h[3] * Rtt.h[3]);"
    ], 
    [
        "Rxx+=vrmpyh(Rss,Rtt)", 
        "11101010000sssssPP0ttttt010xxxxx", 
        "Rxx = Rxx + (Rss.h[0] * Rtt.h[0]) + (Rss.h[1] * Rtt.h[1]) + (Rss.h[2] * Rtt.h[2]) + (Rss.h[3] * Rtt.h[3]);"
    ], 
    [
        "Rdd=vmpybsu(Rs,Rt)", 
        "11100101010sssssPP0ttttt001ddddd", 
        "Rdd.h[0] = ((Rs.b[0] * Rt.ub[0]));\nRdd.h[1] = ((Rs.b[1] * Rt.ub[1]));\nRdd.h[2] = ((Rs.b[2] * Rt.ub[2]));\nRdd.h[3] = ((Rs.b[3] * Rt.ub[3]));"
    ], 
    [
        "Rdd=vmpybu(Rs,Rt)", 
        "11100101100sssssPP0ttttt001ddddd", 
        "Rdd.h[0] = ((Rs.ub[0] * Rt.ub[0]));\nRdd.h[1] = ((Rs.ub[1] * Rt.ub[1]));\nRdd.h[2] = ((Rs.ub[2] * Rt.ub[2]));\nRdd.h[3] = ((Rs.ub[3] * Rt.ub[3]));"
    ], 
    [
        "Rxx+=vmpybu(Rs,Rt)", 
        "11100111100sssssPP0ttttt001xxxxx", 
        "Rxx.h[0] = (Rxx.h[0] + (Rs.ub[0] * Rt.ub[0]));\nRxx.h[1] = (Rxx.h[1] + (Rs.ub[1] * Rt.ub[1]));\nRxx.h[2] = (Rxx.h[2] + (Rs.ub[2] * Rt.ub[2]));\nRxx.h[3] = (Rxx.h[3] + (Rs.ub[3] * Rt.ub[3]));"
    ], 
    [
        "Rxx+=vmpybsu(Rs,Rt)", 
        "11100111110sssssPP0ttttt001xxxxx", 
        "Rxx.h[0] = (Rxx.h[0] + (Rs.b[0] * Rt.ub[0]));\nRxx.h[1] = (Rxx.h[1] + (Rs.b[1] * Rt.ub[1]));\nRxx.h[2] = (Rxx.h[2] + (Rs.b[2] * Rt.ub[2]));\nRxx.h[3] = (Rxx.h[3] + (Rs.b[3] * Rt.ub[3]));"
    ], 
    [
        "Rdd=vpmpyh(Rs,Rt)", 
        "11100101110sssssPP0ttttt111ddddd", 
        "x0 = Rs.uh[0];\nx1 = Rs.uh[1];\ny0 = Rt.uh[0];\ny1 = Rt.uh[1];\nprod0 = prod1 = 0;\nfor (i = 0; i < 16; i++) {\n    if ((y0 >> i) & 1)\n        prod0 ^= (x0 << i);\n    if ((y1 >> i) & 1)\n        prod1 ^= (x1 << i);\n}\n\nRdd.h[0] = prod0.uh[0];\nRdd.h[1] = prod1.uh[0];\nRdd.h[2] = prod0.uh[1];\nRdd.h[3] = prod1.uh[1];"
    ], 
    [
        "Rxx^=vpmpyh(Rs,Rt)", 
        "11100111101sssssPP0ttttt111xxxxx", 
        "x0 = Rs.uh[0];\nx1 = Rs.uh[1];\ny0 = Rt.uh[0];\ny1 = Rt.uh[1];\nprod0 = prod1 = 0;\nfor (i = 0; i < 16; i++) {\n    if ((y0 >> i) & 1)\n        prod0 ^= (x0 << i);\n    if ((y1 >> i) & 1)\n        prod1 ^= (x1 << i);\n}\n\nRxx.h[0] = Rxx.uh[0] ^ prod0.uh[0];\nRxx.h[1] = Rxx.uh[1] ^ prod1.uh[0];\nRxx.h[2] = Rxx.uh[2] ^ prod0.uh[1];\nRxx.h[3] = Rxx.uh[3] ^ prod1.uh[1];"
    ], 
    [
        "Rdd=decbin(Rss,Rtt)", 
        "1100000111-sssssPP-ttttt11-ddddd", 
        "state = bitrange(Rtt.w[1], 5, 0);\nvalMPS = bitrange(Rtt.w[1], 8, 8);\nbitpos = bitrange(Rtt.w[0], 4, 0);\nrange = Rss.w[0];\noffset = Rss.w[1];\nrange <<= bitpos;\noffset <<= bitpos;\nrLPS = rLPS_table_64x4[state][(range >> 29) & 3];\nrLPS = rLPS << 23;\nrMPS = (range & 0xff800000) - rLPS;\nif (offset < rMPS) {\n    Rdd = AC_next_state_MPS_64[state];\n    bitrange(Rdd, 8, 8) = valMPS;\n    bitrange(Rdd, 31, 23) = (rMPS >> 23);\n    Rdd.w[1] = offset;\n    P0 = valMPS;\n} else {\n    Rdd = AC_next_state_LPS_64[state];\n    bitrange(Rdd, 8, 8) = ((!state) ? (1 - valMPS) : (valMPS));\n    bitrange(Rdd, 31, 23) = (rLPS >> 23);\n    Rdd.w[1] = (offset - rMPS);\n    P0 = (valMPS ^ 1);\n}"
    ], 
    [
        "Rd=sat(Rss)", 
        "10001000110sssssPP------000ddddd", 
        "Rd = sat(32, Rss);"
    ], 
    [
        "Rd=sath(Rs)", 
        "10001100110sssssPP------100ddddd", 
        "Rd = sat(16, Rs);"
    ], 
    [
        "Rd=satuh(Rs)", 
        "10001100110sssssPP------101ddddd", 
        "Rd = usat(16, Rs);"
    ], 
    [
        "Rd=satub(Rs)", 
        "10001100110sssssPP------110ddddd", 
        "Rd = usat(8, Rs);"
    ], 
    [
        "Rd=satb(Rs)", 
        "10001100110sssssPP------111ddddd", 
        "Rd = sat(8, Rs);"
    ], 
    [
        "Rd=swiz(Rs)", 
        "10001100100sssssPP------111ddddd", 
        "Rd.b[0] = Rs.b[3];\nRd.b[1] = Rs.b[2];\nRd.b[2] = Rs.b[1];\nRd.b[3] = Rs.b[0];"
    ], 
    [
        "Rdd=valignb(Rtt,Rss,#u3)", 
        "110000000--sssssPP-tttttiiiddddd", 
        "Rdd = lsr(Rss, imm_u * 8) | (Rtt << ((8 - imm_u) * 8));"
    ], 
    [
        "Rdd=valignb(Rtt,Rss,Pu)", 
        "110000100--sssssPP-ttttt-uuddddd", 
        "PREDUSE_TIMING;\nRdd = lsr(Rss, (Pu & 0x7) * 8) | (Rtt << (8 - (Pu & 0x7)) * 8);"
    ], 
    [
        "Rd=vrndwh(Rss)", 
        "10001000100sssssPP------100ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = (Rss.w[i] + 0x08000).h[1];\n}"
    ], 
    [
        "Rd=vrndwh(Rss):sat", 
        "10001000100sssssPP------110ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = sat(32, Rss.w[i] + 0x08000).h[1];\n}"
    ], 
    [
        "Rd=vsathub(Rss)", 
        "10001000000sssssPP------000ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rd.b[i] = usat(8, Rss.h[i]);\n}"
    ], 
    [
        "Rd=vsatwh(Rss)", 
        "10001000000sssssPP------010ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = sat(16, Rss.w[i]);\n}"
    ], 
    [
        "Rd=vsatwuh(Rss)", 
        "10001000000sssssPP------100ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = usat(16, Rss.w[i]);\n}"
    ], 
    [
        "Rd=vsathb(Rss)", 
        "10001000000sssssPP------110ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rd.b[i] = sat(8, Rss.h[i]);\n}"
    ], 
    [
        "Rd=vsathb(Rs)", 
        "1000110010-sssssPP------00-ddddd", 
        "Rd.b[0] = sat(8, Rs.h[0]);\nRd.b[1] = sat(8, Rs.h[1]);\nRd.b[2] = 0;\nRd.b[3] = 0;"
    ], 
    [
        "Rd=vsathub(Rs)", 
        "1000110010-sssssPP------01-ddddd", 
        "Rd.b[0] = usat(8, Rs.h[0]);\nRd.b[1] = usat(8, Rs.h[1]);\nRd.b[2] = 0;\nRd.b[3] = 0;"
    ], 
    [
        "Rdd=vsathub(Rss)", 
        "10000000000sssssPP------100ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = usat(8, Rss.h[i]);\n}"
    ], 
    [
        "Rdd=vsatwuh(Rss)", 
        "10000000000sssssPP------101ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = usat(16, Rss.w[i]);\n}"
    ], 
    [
        "Rdd=vsatwh(Rss)", 
        "10000000000sssssPP------110ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = sat(16, Rss.w[i]);\n}"
    ], 
    [
        "Rdd=vsathb(Rss)", 
        "10000000000sssssPP------111ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = sat(8, Rss.h[i]);\n}"
    ], 
    [
        "Rdd=shuffeb(Rss,Rtt)", 
        "1100000100-sssssPP-ttttt01-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.b[i * 2] = Rtt.b[i * 2];\n    Rdd.b[i * 2 + 1] = Rss.b[i * 2];\n}"
    ], 
    [
        "Rdd=shuffob(Rtt,Rss)", 
        "1100000100-sssssPP-ttttt10-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.b[i * 2] = Rss.b[i * 2 + 1];\n    Rdd.b[i * 2 + 1] = Rtt.b[i * 2 + 1];\n}"
    ], 
    [
        "Rdd=shuffeh(Rss,Rtt)", 
        "1100000100-sssssPP-ttttt11-ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.h[i * 2] = Rtt.h[i * 2];\n    Rdd.h[i * 2 + 1] = Rss.h[i * 2];\n}"
    ], 
    [
        "Rdd=shuffoh(Rtt,Rss)", 
        "1100000110-sssssPP-ttttt000ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.h[i * 2] = Rss.h[i * 2 + 1];\n    Rdd.h[i * 2 + 1] = Rtt.h[i * 2 + 1];\n}"
    ], 
    [
        "Rdd=vsplatb(Rs)", 
        "1000010001-sssssPP------10-ddddd", 
        "for (i = 0; i < 8; i++) {\n    Rdd.b[i] = Rs.b[0];\n}"
    ], 
    [
        "Rd=vsplatb(Rs)", 
        "10001100010sssssPP------111ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rd.b[i] = Rs.b[0];\n}"
    ], 
    [
        "Rdd=vsplath(Rs)", 
        "1000010001-sssssPP------01-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = Rs.h[0];\n}"
    ], 
    [
        "Rdd=vspliceb(Rss,Rtt,#u3)", 
        "110000001--sssssPP-tttttiiiddddd", 
        "Rdd = Rtt << imm_u * 8 | zxt(imm_u * 8, 64, Rss);"
    ], 
    [
        "Rdd=vspliceb(Rss,Rtt,Pu)", 
        "11000010100sssssPP-ttttt-uuddddd", 
        "PREDUSE_TIMING;\nRdd = Rtt << (Pu & 7) * 8 | zxt((Pu & 7) * 8, 64, Rss);"
    ], 
    [
        "Rdd=vsxtbh(Rs)", 
        "1000010000-sssssPP------00-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = Rs.b[i];\n}"
    ], 
    [
        "Rdd=vsxthw(Rs)", 
        "1000010000-sssssPP------10-ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = Rs.h[i];\n}"
    ], 
    [
        "Rd=vtrunohb(Rss)", 
        "10001000100sssssPP------000ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rd.b[i] = Rss.b[i * 2 + 1];\n}"
    ], 
    [
        "Rd=vtrunehb(Rss)", 
        "10001000100sssssPP------010ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rd.b[i] = Rss.b[i * 2];\n}"
    ], 
    [
        "Rdd=vtrunewh(Rss,Rtt)", 
        "1100000110-sssssPP-ttttt010ddddd", 
        "Rdd.h[0] = Rtt.h[0];\nRdd.h[1] = Rtt.h[2];\nRdd.h[2] = Rss.h[0];\nRdd.h[3] = Rss.h[2];"
    ], 
    [
        "Rdd=vtrunehb(Rss,Rtt)", 
        "1100000110-sssssPP-ttttt011ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.b[i] = Rtt.b[i * 2];\n    Rdd.b[i + 4] = Rss.b[i * 2];\n}"
    ], 
    [
        "Rdd=vtrunowh(Rss,Rtt)", 
        "1100000110-sssssPP-ttttt100ddddd", 
        "Rdd.h[0] = Rtt.h[1];\nRdd.h[1] = Rtt.h[3];\nRdd.h[2] = Rss.h[1];\nRdd.h[3] = Rss.h[3];"
    ], 
    [
        "Rdd=vtrunohb(Rss,Rtt)", 
        "1100000110-sssssPP-ttttt101ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.b[i] = Rtt.b[i * 2 + 1];\n    Rdd.b[i + 4] = Rss.b[i * 2 + 1];\n}"
    ], 
    [
        "Rdd=vzxtbh(Rs)", 
        "1000010000-sssssPP------01-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = Rs.ub[i];\n}"
    ], 
    [
        "Rdd=vzxthw(Rs)", 
        "1000010000-sssssPP------11-ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = Rs.uh[i];\n}"
    ], 
    [
        "Pd=boundscheck(Rss,Rtt):raw:lo", 
        "110100100--sssssPP1ttttt100---dd", 
        "src = Rss.uw[0];\nPd = (src.uw[0] >= Rtt.uw[0]) && (src.uw[0] < Rtt.uw[1]) ? 0xff : 0x00;"
    ], 
    [
        "Pd=boundscheck(Rss,Rtt):raw:hi", 
        "110100100--sssssPP1ttttt101---dd", 
        "src = Rss.uw[1];\nPd = (src.uw[0] >= Rtt.uw[0]) && (src.uw[0] < Rtt.uw[1]) ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmpb.gt(Rs,Rt)", 
        "11000111110sssssPP-ttttt010---dd", 
        "Pd = Rs.b[0] > Rt.b[0] ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmpb.eq(Rs,Rt)", 
        "11000111110sssssPP-ttttt110---dd", 
        "Pd = Rs.b[0] == Rt.b[0] ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmpb.gtu(Rs,Rt)", 
        "11000111110sssssPP-ttttt111---dd", 
        "Pd = Rs.ub[0] > Rt.ub[0] ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmpb.eq(Rs,#u8)", 
        "11011101-00sssssPP-iiiiiiii00-dd", 
        "Pd = Rs.ub[0] == imm_u ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmpb.gt(Rs,#s8)", 
        "11011101-01sssssPP-iiiiiiii00-dd", 
        "Pd = Rs.b[0] > imm_s ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmpb.gtu(Rs,#u7)", 
        "11011101-10sssssPP-0iiiiiii00-dd", 
        "apply_extension(imm_u);\nPd = Rs.ub[0] > imm_u.uw[0] ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmph.eq(Rs,Rt)", 
        "11000111110sssssPP-ttttt011---dd", 
        "Pd = Rs.h[0] == Rt.h[0] ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmph.gt(Rs,Rt)", 
        "11000111110sssssPP-ttttt100---dd", 
        "Pd = Rs.h[0] > Rt.h[0] ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmph.gtu(Rs,Rt)", 
        "11000111110sssssPP-ttttt101---dd", 
        "Pd = Rs.uh[0] > Rt.uh[0] ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmph.eq(Rs,#s8)", 
        "11011101-00sssssPP-iiiiiiii01-dd", 
        "apply_extension(imm_s);\nPd = Rs.h[0] == imm_s ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmph.gt(Rs,#s8)", 
        "11011101-01sssssPP-iiiiiiii01-dd", 
        "apply_extension(imm_s);\nPd = Rs.h[0] > imm_s ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmph.gtu(Rs,#u7)", 
        "11011101-10sssssPP-0iiiiiii01-dd", 
        "apply_extension(imm_u);\nPd = Rs.uh[0] > imm_u.uw[0] ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmp.eq(Rss,Rtt)", 
        "11010010100sssssPP-ttttt000---dd", 
        "Pd = Rss == Rtt ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmp.gt(Rss,Rtt)", 
        "11010010100sssssPP-ttttt010---dd", 
        "Pd = Rss > Rtt ? 0xff : 0x00;"
    ], 
    [
        "Pd=cmp.gtu(Rss,Rtt)", 
        "11010010100sssssPP-ttttt100---dd", 
        "Pd = Rss.u64 > Rtt.u64 ? 0xff : 0x00;"
    ], 
    [
        "Pd=bitsclr(Rs,#u6)", 
        "10000101100sssssPPiiiiii------dd", 
        "Pd = (Rs & imm_u) == 0 ? 0xff : 0x00;"
    ], 
    [
        "Pd=!bitsclr(Rs,#u6)", 
        "10000101101sssssPPiiiiii------dd", 
        "Pd = (Rs & imm_u) != 0 ? 0xff : 0x00;"
    ], 
    [
        "Pd=bitsset(Rs,Rt)", 
        "11000111010sssssPP-ttttt------dd", 
        "Pd = (Rs & Rt) == Rt ? 0xff : 0x00;"
    ], 
    [
        "Pd=!bitsset(Rs,Rt)", 
        "11000111011sssssPP-ttttt------dd", 
        "Pd = (Rs & Rt) != Rt ? 0xff : 0x00;"
    ], 
    [
        "Pd=bitsclr(Rs,Rt)", 
        "11000111100sssssPP-ttttt------dd", 
        "Pd = (Rs & Rt) == 0 ? 0xff : 0x00;"
    ], 
    [
        "Pd=!bitsclr(Rs,Rt)", 
        "11000111101sssssPP-ttttt------dd", 
        "Pd = (Rs & Rt) != 0 ? 0xff : 0x00;"
    ], 
    [
        "Rdd=mask(Pt)", 
        "10000110--------PP----tt---ddddd", 
        "PREDUSE_TIMING;\nfor (i = 0; i < 8; i++) {\n    Rdd.b[i] = (Pt.i ? (0xff) : (0x00));\n}"
    ], 
    [
        "Pd=tlbmatch(Rss,Rt)", 
        "110100100--sssssPP1ttttt011---dd", 
        "MASK = 0x07ffffff;\nTLBLO = Rss.uw[0];\nTLBHI = Rss.uw[1];\nSIZE = min(6, count_leading_ones(~reverse_bits(TLBLO)));\nMASK &= (0xffffffff << 2 * SIZE);\nPd = bitrange(TLBHI, 31, 31) && ((TLBHI & MASK) == (Rt & MASK)) ? 0xff : 0x00;"
    ], 
    [
        "Pd=Rs", 
        "10000101010sssssPP------------dd", 
        "Pd = Rs.ub[0];"
    ], 
    [
        "Rd=Ps", 
        "10001001-1----ssPP---------ddddd", 
        "PREDUSE_TIMING;\nRd = zxt(8, 32, Ps);"
    ], 
    [
        "Pd=tstbit(Rs,#u5)", 
        "10000101000sssssPP0iiiii------dd", 
        "Pd = (Rs & (1 << imm_u)) != 0 ? 0xff : 0x00;"
    ], 
    [
        "Pd=!tstbit(Rs,#u5)", 
        "10000101001sssssPP0iiiii------dd", 
        "Pd = (Rs & (1 << imm_u)) == 0 ? 0xff : 0x00;"
    ], 
    [
        "Pd=tstbit(Rs,Rt)", 
        "11000111000sssssPP-ttttt------dd", 
        "Pd = (zxt(32, 64, Rs) & (sxt(7, 32, Rt) > 0) ? (zxt(32, 64, 1) << sxt(7, 32, Rt)) : lsr(zxt(32, 64, 1), sxt(7, 32, Rt))) !=\n    0 ? 0xff : 0x00;"
    ], 
    [
        "Pd=!tstbit(Rs,Rt)", 
        "11000111001sssssPP-ttttt------dd", 
        "Pd = (zxt(32, 64, Rs) & (sxt(7, 32, Rt) > 0) ? (zxt(32, 64, 1) << sxt(7, 32, Rt)) : lsr(zxt(32, 64, 1), sxt(7, 32, Rt))) ==\n    0 ? 0xff : 0x00;"
    ], 
    [
        "Pd=vcmph.eq(Rss,Rtt)", 
        "110100100--sssssPP0ttttt011---dd", 
        "for (i = 0; i < 4; i++) {\n    bitrange(Pd, i * 2, i * 2) = (Rss.h[i] == Rtt.h[i]);\n    bitrange(Pd, i * 2 + 1, i * 2 + 1) = (Rss.h[i] == Rtt.h[i]);\n}"
    ], 
    [
        "Pd=vcmph.gt(Rss,Rtt)", 
        "110100100--sssssPP0ttttt100---dd", 
        "for (i = 0; i < 4; i++) {\n    bitrange(Pd, i * 2, i * 2) = (Rss.h[i] > Rtt.h[i]);\n    bitrange(Pd, i * 2 + 1, i * 2 + 1) = (Rss.h[i] > Rtt.h[i]);\n}"
    ], 
    [
        "Pd=vcmph.gtu(Rss,Rtt)", 
        "110100100--sssssPP0ttttt101---dd", 
        "for (i = 0; i < 4; i++) {\n    bitrange(Pd, i * 2, i * 2) = (Rss.uh[i] > Rtt.uh[i]);\n    bitrange(Pd, i * 2 + 1, i * 2 + 1) = (Rss.uh[i] > Rtt.uh[i]);\n}"
    ], 
    [
        "Pd=vcmph.eq(Rss,#s8)", 
        "11011100000sssssPP-iiiiiiii01-dd", 
        "for (i = 0; i < 4; i++) {\n    bitrange(Pd, i * 2, i * 2) = (Rss.h[i] == imm_s);\n    bitrange(Pd, i * 2 + 1, i * 2 + 1) = (Rss.h[i] == imm_s);\n}"
    ], 
    [
        "Pd=vcmph.gt(Rss,#s8)", 
        "11011100001sssssPP-iiiiiiii01-dd", 
        "for (i = 0; i < 4; i++) {\n    bitrange(Pd, i * 2, i * 2) = (Rss.h[i] > imm_s);\n    bitrange(Pd, i * 2 + 1, i * 2 + 1) = (Rss.h[i] > imm_s);\n}"
    ], 
    [
        "Pd=vcmph.gtu(Rss,#u7)", 
        "11011100010sssssPP-0iiiiiii01-dd", 
        "for (i = 0; i < 4; i++) {\n    bitrange(Pd, i * 2, i * 2) = (Rss.uh[i] > imm_u);\n    bitrange(Pd, i * 2 + 1, i * 2 + 1) = (Rss.uh[i] > imm_u);\n}"
    ], 
    [
        "Pd=any8(vcmpb.eq(Rss,Rtt))", 
        "110100100--sssssPP1ttttt000---dd", 
        "Pd = 0;\nfor (i = 0; i < 8; i++) {\n    if (Rss.b[i] == Rtt.b[i])\n        Pd = 0xff;\n}"
    ], 
    [
        "Pd=!any8(vcmpb.eq(Rss,Rtt))", 
        "110100100--sssssPP1ttttt001---dd", 
        "Pd = 0;\nfor (i = 0; i < 8; i++) {\n    if (Rss.b[i] == Rtt.b[i])\n        Pd = 0xff;\n}\n\nPd = ~Pd;"
    ], 
    [
        "Pd=vcmpb.eq(Rss,Rtt)", 
        "110100100--sssssPP0ttttt110---dd", 
        "for (i = 0; i < 8; i++) {\n    Pd.i = (Rss.b[i] == Rtt.b[i]);\n}"
    ], 
    [
        "Pd=vcmpb.gtu(Rss,Rtt)", 
        "110100100--sssssPP0ttttt111---dd", 
        "for (i = 0; i < 8; i++) {\n    Pd.i = (Rss.ub[i] > Rtt.ub[i]);\n}"
    ], 
    [
        "Pd=vcmpb.gt(Rss,Rtt)", 
        "110100100--sssssPP1ttttt010---dd", 
        "for (i = 0; i < 8; i++) {\n    Pd.i = (Rss.b[i] > Rtt.b[i]);\n}"
    ], 
    [
        "Pd=vcmpb.eq(Rss,#u8)", 
        "11011100000sssssPP-iiiiiiii00-dd", 
        "for (i = 0; i < 8; i++) {\n    Pd.i = (Rss.ub[i] == imm_u);\n}"
    ], 
    [
        "Pd=vcmpb.gt(Rss,#s8)", 
        "11011100001sssssPP-iiiiiiii00-dd", 
        "for (i = 0; i < 8; i++) {\n    Pd.i = (Rss.b[i] > imm_s);\n}"
    ], 
    [
        "Pd=vcmpb.gtu(Rss,#u7)", 
        "11011100010sssssPP-0iiiiiii00-dd", 
        "for (i = 0; i < 8; i++) {\n    Pd.i = (Rss.ub[i] > imm_u);\n}"
    ], 
    [
        "Pd=vcmpw.eq(Rss,Rtt)", 
        "110100100--sssssPP0ttttt000---dd", 
        "bitrange(Pd, 3, 0) = (Rss.w[0] == Rtt.w[0]);\nbitrange(Pd, 7, 4) = (Rss.w[1] == Rtt.w[1]);"
    ], 
    [
        "Pd=vcmpw.gt(Rss,Rtt)", 
        "110100100--sssssPP0ttttt001---dd", 
        "bitrange(Pd, 3, 0) = (Rss.w[0] > Rtt.w[0]);\nbitrange(Pd, 7, 4) = (Rss.w[1] > Rtt.w[1]);"
    ], 
    [
        "Pd=vcmpw.gtu(Rss,Rtt)", 
        "110100100--sssssPP0ttttt010---dd", 
        "bitrange(Pd, 3, 0) = (Rss.uw[0] > Rtt.uw[0]);\nbitrange(Pd, 7, 4) = (Rss.uw[1] > Rtt.uw[1]);"
    ], 
    [
        "Pd=vcmpw.eq(Rss,#s8)", 
        "11011100000sssssPP-iiiiiiii10-dd", 
        "bitrange(Pd, 3, 0) = (Rss.w[0] == imm_s);\nbitrange(Pd, 7, 4) = (Rss.w[1] == imm_s);"
    ], 
    [
        "Pd=vcmpw.gt(Rss,#s8)", 
        "11011100001sssssPP-iiiiiiii10-dd", 
        "bitrange(Pd, 3, 0) = (Rss.w[0] > imm_s);\nbitrange(Pd, 7, 4) = (Rss.w[1] > imm_s);"
    ], 
    [
        "Pd=vcmpw.gtu(Rss,#u7)", 
        "11011100010sssssPP-0iiiiiii10-dd", 
        "bitrange(Pd, 3, 0) = (Rss.uw[0] > imm_u);\nbitrange(Pd, 7, 4) = (Rss.uw[1] > imm_u);"
    ], 
    [
        "Rd=vitpack(Ps,Pt)", 
        "10001001-00---ssPP----tt---ddddd", 
        "PREDUSE_TIMING;\nRd = (Ps & 0x55) | (Pt & 0xAA);"
    ], 
    [
        "Rdd=vmux(Pu,Rss,Rtt)", 
        "11010001---sssssPP-ttttt-uuddddd", 
        "PREDUSE_TIMING;\nfor (i = 0; i < 8; i++) {\n    Rdd.b[i] = (Pu.i ? (Rss.b[i]) : (Rtt.b[i]));\n}"
    ], 
    [
        "Rdd=asr(Rss,#u6)", 
        "10000000000sssssPPiiiiii000ddddd", 
        "Rdd = Rss >> imm_u;"
    ], 
    [
        "Rdd=lsr(Rss,#u6)", 
        "10000000000sssssPPiiiiii001ddddd", 
        "Rdd = lsr(Rss, imm_u);"
    ], 
    [
        "Rdd=asl(Rss,#u6)", 
        "10000000000sssssPPiiiiii010ddddd", 
        "Rdd = Rss << imm_u;"
    ], 
    [
        "Rdd=rol(Rss,#u6)", 
        "10000000000sssssPPiiiiii011ddddd", 
        "Rdd = rol(Rss, imm_u);"
    ], 
    [
        "Rd=asr(Rs,#u5)", 
        "10001100000sssssPP0iiiii000ddddd", 
        "Rd = Rs >> imm_u;"
    ], 
    [
        "Rd=lsr(Rs,#u5)", 
        "10001100000sssssPP0iiiii001ddddd", 
        "Rd = lsr(Rs, imm_u);"
    ], 
    [
        "Rd=asl(Rs,#u5)", 
        "10001100000sssssPP0iiiii010ddddd", 
        "Rd = Rs << imm_u;"
    ], 
    [
        "Rd=rol(Rs,#u5)", 
        "10001100000sssssPP0iiiii011ddddd", 
        "Rd = rol(Rs, imm_u);"
    ], 
    [
        "Rxx-=asr(Rss,#u6)", 
        "1000001000-sssssPPiiiiii000xxxxx", 
        "Rxx = Rxx - Rss >> imm_u;"
    ], 
    [
        "Rxx-=lsr(Rss,#u6)", 
        "1000001000-sssssPPiiiiii001xxxxx", 
        "Rxx = Rxx - lsr(Rss, imm_u);"
    ], 
    [
        "Rxx-=asl(Rss,#u6)", 
        "1000001000-sssssPPiiiiii010xxxxx", 
        "Rxx = Rxx - Rss << imm_u;"
    ], 
    [
        "Rxx-=rol(Rss,#u6)", 
        "1000001000-sssssPPiiiiii011xxxxx", 
        "Rxx = Rxx - rol(Rss, imm_u);"
    ], 
    [
        "Rxx+=asr(Rss,#u6)", 
        "1000001000-sssssPPiiiiii100xxxxx", 
        "Rxx = Rxx + Rss >> imm_u;"
    ], 
    [
        "Rxx+=lsr(Rss,#u6)", 
        "1000001000-sssssPPiiiiii101xxxxx", 
        "Rxx = Rxx + lsr(Rss, imm_u);"
    ], 
    [
        "Rxx+=asl(Rss,#u6)", 
        "1000001000-sssssPPiiiiii110xxxxx", 
        "Rxx = Rxx + Rss << imm_u;"
    ], 
    [
        "Rxx+=rol(Rss,#u6)", 
        "1000001000-sssssPPiiiiii111xxxxx", 
        "Rxx = Rxx + rol(Rss, imm_u);"
    ], 
    [
        "Rx-=asr(Rs,#u5)", 
        "1000111000-sssssPP0iiiii000xxxxx", 
        "Rx = Rx - Rs >> imm_u;"
    ], 
    [
        "Rx-=lsr(Rs,#u5)", 
        "1000111000-sssssPP0iiiii001xxxxx", 
        "Rx = Rx - lsr(Rs, imm_u);"
    ], 
    [
        "Rx-=asl(Rs,#u5)", 
        "1000111000-sssssPP0iiiii010xxxxx", 
        "Rx = Rx - Rs << imm_u;"
    ], 
    [
        "Rx-=rol(Rs,#u5)", 
        "1000111000-sssssPP0iiiii011xxxxx", 
        "Rx = Rx - rol(Rs, imm_u);"
    ], 
    [
        "Rx+=asr(Rs,#u5)", 
        "1000111000-sssssPP0iiiii100xxxxx", 
        "Rx = Rx + Rs >> imm_u;"
    ], 
    [
        "Rx+=lsr(Rs,#u5)", 
        "1000111000-sssssPP0iiiii101xxxxx", 
        "Rx = Rx + lsr(Rs, imm_u);"
    ], 
    [
        "Rx+=asl(Rs,#u5)", 
        "1000111000-sssssPP0iiiii110xxxxx", 
        "Rx = Rx + Rs << imm_u;"
    ], 
    [
        "Rx+=rol(Rs,#u5)", 
        "1000111000-sssssPP0iiiii111xxxxx", 
        "Rx = Rx + rol(Rs, imm_u);"
    ], 
    [
        "Rx=add(#u8,asl(Rx,#U5))", 
        "11011110iiixxxxxPPiIIIIIiii0i10-", 
        "Rx = apply_extension(imm_u) + (Rx << imm_U);"
    ], 
    [
        "Rx=sub(#u8,asl(Rx,#U5))", 
        "11011110iiixxxxxPPiIIIIIiii0i11-", 
        "Rx = apply_extension(imm_u) - (Rx << imm_U);"
    ], 
    [
        "Rx=add(#u8,lsr(Rx,#U5))", 
        "11011110iiixxxxxPPiIIIIIiii1i10-", 
        "Rx = apply_extension(imm_u) + (((unsigned int)Rx) >> imm_U);"
    ], 
    [
        "Rx=sub(#u8,lsr(Rx,#U5))", 
        "11011110iiixxxxxPPiIIIIIiii1i11-", 
        "Rx = apply_extension(imm_u) - (((unsigned int)Rx) >> imm_U);"
    ], 
    [
        "Rd=addasl(Rt,Rs,#u3)", 
        "11000100000sssssPP0tttttiiiddddd", 
        "Rd = Rt + Rs << imm_u;"
    ], 
    [
        "Rxx&=asr(Rss,#u6)", 
        "1000001001-sssssPPiiiiii000xxxxx", 
        "Rxx = Rxx & Rss >> imm_u;"
    ], 
    [
        "Rxx&=lsr(Rss,#u6)", 
        "1000001001-sssssPPiiiiii001xxxxx", 
        "Rxx = Rxx & lsr(Rss, imm_u);"
    ], 
    [
        "Rxx&=asl(Rss,#u6)", 
        "1000001001-sssssPPiiiiii010xxxxx", 
        "Rxx = Rxx & Rss << imm_u;"
    ], 
    [
        "Rxx&=rol(Rss,#u6)", 
        "1000001001-sssssPPiiiiii011xxxxx", 
        "Rxx = Rxx & rol(Rss, imm_u);"
    ], 
    [
        "Rxx|=asr(Rss,#u6)", 
        "1000001001-sssssPPiiiiii100xxxxx", 
        "Rxx = Rxx | Rss >> imm_u;"
    ], 
    [
        "Rxx|=lsr(Rss,#u6)", 
        "1000001001-sssssPPiiiiii101xxxxx", 
        "Rxx = Rxx | lsr(Rss, imm_u);"
    ], 
    [
        "Rxx|=asl(Rss,#u6)", 
        "1000001001-sssssPPiiiiii110xxxxx", 
        "Rxx = Rxx | Rss << imm_u;"
    ], 
    [
        "Rxx|=rol(Rss,#u6)", 
        "1000001001-sssssPPiiiiii111xxxxx", 
        "Rxx = Rxx | rol(Rss, imm_u);"
    ], 
    [
        "Rxx^=lsr(Rss,#u6)", 
        "1000001010-sssssPPiiiiii001xxxxx", 
        "Rxx = Rxx ^ lsr(Rss, imm_u);"
    ], 
    [
        "Rxx^=asl(Rss,#u6)", 
        "1000001010-sssssPPiiiiii010xxxxx", 
        "Rxx = Rxx ^ Rss << imm_u;"
    ], 
    [
        "Rxx^=rol(Rss,#u6)", 
        "1000001010-sssssPPiiiiii011xxxxx", 
        "Rxx = Rxx ^ rol(Rss, imm_u);"
    ], 
    [
        "Rx&=asr(Rs,#u5)", 
        "1000111001-sssssPP0iiiii000xxxxx", 
        "Rx = Rx & Rs >> imm_u;"
    ], 
    [
        "Rx&=lsr(Rs,#u5)", 
        "1000111001-sssssPP0iiiii001xxxxx", 
        "Rx = Rx & lsr(Rs, imm_u);"
    ], 
    [
        "Rx&=asl(Rs,#u5)", 
        "1000111001-sssssPP0iiiii010xxxxx", 
        "Rx = Rx & Rs << imm_u;"
    ], 
    [
        "Rx&=rol(Rs,#u5)", 
        "1000111001-sssssPP0iiiii011xxxxx", 
        "Rx = Rx & rol(Rs, imm_u);"
    ], 
    [
        "Rx|=asr(Rs,#u5)", 
        "1000111001-sssssPP0iiiii100xxxxx", 
        "Rx = Rx | Rs >> imm_u;"
    ], 
    [
        "Rx|=lsr(Rs,#u5)", 
        "1000111001-sssssPP0iiiii101xxxxx", 
        "Rx = Rx | lsr(Rs, imm_u);"
    ], 
    [
        "Rx|=asl(Rs,#u5)", 
        "1000111001-sssssPP0iiiii110xxxxx", 
        "Rx = Rx | Rs << imm_u;"
    ], 
    [
        "Rx|=rol(Rs,#u5)", 
        "1000111001-sssssPP0iiiii111xxxxx", 
        "Rx = Rx | rol(Rs, imm_u);"
    ], 
    [
        "Rx^=lsr(Rs,#u5)", 
        "1000111010-sssssPP0iiiii001xxxxx", 
        "Rx = Rx ^ lsr(Rs, imm_u);"
    ], 
    [
        "Rx^=asl(Rs,#u5)", 
        "1000111010-sssssPP0iiiii010xxxxx", 
        "Rx = Rx ^ Rs << imm_u;"
    ], 
    [
        "Rx^=rol(Rs,#u5)", 
        "1000111010-sssssPP0iiiii011xxxxx", 
        "Rx = Rx ^ rol(Rs, imm_u);"
    ], 
    [
        "Rx=and(#u8,asl(Rx,#U5))", 
        "11011110iiixxxxxPPiIIIIIiii0i00-", 
        "Rx = apply_extension(imm_u) & (Rx << imm_U);"
    ], 
    [
        "Rx=or(#u8,asl(Rx,#U5))", 
        "11011110iiixxxxxPPiIIIIIiii0i01-", 
        "Rx = apply_extension(imm_u) | (Rx << imm_U);"
    ], 
    [
        "Rx=and(#u8,lsr(Rx,#U5))", 
        "11011110iiixxxxxPPiIIIIIiii1i00-", 
        "Rx = apply_extension(imm_u) & (((unsigned int)Rx) >> imm_U);"
    ], 
    [
        "Rx=or(#u8,lsr(Rx,#U5))", 
        "11011110iiixxxxxPPiIIIIIiii1i01-", 
        "Rx = apply_extension(imm_u) | (((unsigned int)Rx) >> imm_U);"
    ], 
    [
        "Rdd=asr(Rss,#u6):rnd", 
        "10000000110sssssPPiiiiii111ddddd", 
        "tmp = Rss >> imm_u;\nrnd = tmp & 1;\nRdd = tmp >> 1 + rnd;"
    ], 
    [
        "Rd=asr(Rs,#u5):rnd", 
        "10001100010sssssPP0iiiii000ddddd", 
        "Rd = ((Rs >> imm_u) + 1) >> 1;"
    ], 
    [
        "Rd=asl(Rs,#u5):sat", 
        "10001100010sssssPP0iiiii010ddddd", 
        "Rd = sat(32, sxt(32, 64, Rs) << imm_u);"
    ], 
    [
        "Rdd=asr(Rss,Rt)", 
        "1100001110-sssssPP-ttttt00-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRdd = (shamt > 0) ? (Rss >> shamt) : (Rss << shamt);"
    ], 
    [
        "Rdd=lsr(Rss,Rt)", 
        "1100001110-sssssPP-ttttt01-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRdd = (shamt > 0) ? lsr(Rss, shamt) : (Rss << shamt);"
    ], 
    [
        "Rdd=asl(Rss,Rt)", 
        "1100001110-sssssPP-ttttt10-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRdd = (shamt > 0) ? (Rss << shamt) : (Rss >> shamt);"
    ], 
    [
        "Rdd=lsl(Rss,Rt)", 
        "1100001110-sssssPP-ttttt11-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRdd = (shamt > 0) ? (Rss << shamt) : lsr(Rss, shamt);"
    ], 
    [
        "Rd=asr(Rs,Rt)", 
        "1100011001-sssssPP-ttttt00-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRd = (shamt > 0) ? (sxt(32, 64, Rs) >> shamt) : (sxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rd=lsr(Rs,Rt)", 
        "1100011001-sssssPP-ttttt01-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRd = (shamt > 0) ? lsr(zxt(32, 64, Rs), shamt) : (zxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rd=asl(Rs,Rt)", 
        "1100011001-sssssPP-ttttt10-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRd = (shamt > 0) ? (sxt(32, 64, Rs) << shamt) : (sxt(32, 64, Rs) >> shamt);"
    ], 
    [
        "Rd=lsl(Rs,Rt)", 
        "1100011001-sssssPP-ttttt11-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRd = (shamt > 0) ? (zxt(32, 64, Rs) << shamt) : lsr(zxt(32, 64, Rs), shamt);"
    ], 
    [
        "Rd=lsl(#s6,Rt)", 
        "1100011010-iiiiiPP-ttttt11iddddd", 
        "shamt = sxt(7, 32, Rt);\nRd = (shamt > 0) ? (zxt(32, 64, imm_s) << shamt) : lsr(zxt(32, 64, imm_s), shamt);"
    ], 
    [
        "Rxx-=asr(Rss,Rt)", 
        "11001011100sssssPP-ttttt00-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx - (shamt > 0) ? (Rss >> shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx-=lsr(Rss,Rt)", 
        "11001011100sssssPP-ttttt01-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx - (shamt > 0) ? lsr(Rss, shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx-=asl(Rss,Rt)", 
        "11001011100sssssPP-ttttt10-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx - (shamt > 0) ? (Rss << shamt) : (Rss >> shamt);"
    ], 
    [
        "Rxx-=lsl(Rss,Rt)", 
        "11001011100sssssPP-ttttt11-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx - (shamt > 0) ? (Rss << shamt) : lsr(Rss, shamt);"
    ], 
    [
        "Rxx+=asr(Rss,Rt)", 
        "11001011110sssssPP-ttttt00-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx + (shamt > 0) ? (Rss >> shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx+=lsr(Rss,Rt)", 
        "11001011110sssssPP-ttttt01-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx + (shamt > 0) ? lsr(Rss, shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx+=asl(Rss,Rt)", 
        "11001011110sssssPP-ttttt10-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx + (shamt > 0) ? (Rss << shamt) : (Rss >> shamt);"
    ], 
    [
        "Rxx+=lsl(Rss,Rt)", 
        "11001011110sssssPP-ttttt11-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx + (shamt > 0) ? (Rss << shamt) : lsr(Rss, shamt);"
    ], 
    [
        "Rx-=asr(Rs,Rt)", 
        "1100110010-sssssPP-ttttt00-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx - (shamt > 0) ? (sxt(32, 64, Rs) >> shamt) : (sxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rx-=lsr(Rs,Rt)", 
        "1100110010-sssssPP-ttttt01-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx - (shamt > 0) ? lsr(zxt(32, 64, Rs), shamt) : (zxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rx-=asl(Rs,Rt)", 
        "1100110010-sssssPP-ttttt10-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx - (shamt > 0) ? (sxt(32, 64, Rs) << shamt) : (sxt(32, 64, Rs) >> shamt);"
    ], 
    [
        "Rx-=lsl(Rs,Rt)", 
        "1100110010-sssssPP-ttttt11-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx - (shamt > 0) ? (zxt(32, 64, Rs) << shamt) : lsr(zxt(32, 64, Rs), shamt);"
    ], 
    [
        "Rx+=asr(Rs,Rt)", 
        "1100110011-sssssPP-ttttt00-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx + (shamt > 0) ? (sxt(32, 64, Rs) >> shamt) : (sxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rx+=lsr(Rs,Rt)", 
        "1100110011-sssssPP-ttttt01-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx + (shamt > 0) ? lsr(zxt(32, 64, Rs), shamt) : (zxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rx+=asl(Rs,Rt)", 
        "1100110011-sssssPP-ttttt10-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx + (shamt > 0) ? (sxt(32, 64, Rs) << shamt) : (sxt(32, 64, Rs) >> shamt);"
    ], 
    [
        "Rx+=lsl(Rs,Rt)", 
        "1100110011-sssssPP-ttttt11-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx + (shamt > 0) ? (zxt(32, 64, Rs) << shamt) : lsr(zxt(32, 64, Rs), shamt);"
    ], 
    [
        "Rxx|=asr(Rss,Rt)", 
        "11001011000sssssPP-ttttt00-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx | (shamt > 0) ? (Rss >> shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx|=lsr(Rss,Rt)", 
        "11001011000sssssPP-ttttt01-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx | (shamt > 0) ? lsr(Rss, shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx|=asl(Rss,Rt)", 
        "11001011000sssssPP-ttttt10-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx | (shamt > 0) ? (Rss << shamt) : (Rss >> shamt);"
    ], 
    [
        "Rxx|=lsl(Rss,Rt)", 
        "11001011000sssssPP-ttttt11-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx | (shamt > 0) ? (Rss << shamt) : lsr(Rss, shamt);"
    ], 
    [
        "Rxx&=asr(Rss,Rt)", 
        "11001011010sssssPP-ttttt00-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx & (shamt > 0) ? (Rss >> shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx&=lsr(Rss,Rt)", 
        "11001011010sssssPP-ttttt01-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx & (shamt > 0) ? lsr(Rss, shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx&=asl(Rss,Rt)", 
        "11001011010sssssPP-ttttt10-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx & (shamt > 0) ? (Rss << shamt) : (Rss >> shamt);"
    ], 
    [
        "Rxx&=lsl(Rss,Rt)", 
        "11001011010sssssPP-ttttt11-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx & (shamt > 0) ? (Rss << shamt) : lsr(Rss, shamt);"
    ], 
    [
        "Rxx^=asr(Rss,Rt)", 
        "11001011011sssssPP-ttttt00-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx ^ (shamt > 0) ? (Rss >> shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx^=lsr(Rss,Rt)", 
        "11001011011sssssPP-ttttt01-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx ^ (shamt > 0) ? lsr(Rss, shamt) : (Rss << shamt);"
    ], 
    [
        "Rxx^=asl(Rss,Rt)", 
        "11001011011sssssPP-ttttt10-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx ^ (shamt > 0) ? (Rss << shamt) : (Rss >> shamt);"
    ], 
    [
        "Rxx^=lsl(Rss,Rt)", 
        "11001011011sssssPP-ttttt11-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRxx = Rxx ^ (shamt > 0) ? (Rss << shamt) : lsr(Rss, shamt);"
    ], 
    [
        "Rx|=asr(Rs,Rt)", 
        "1100110000-sssssPP-ttttt00-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx | (shamt > 0) ? (sxt(32, 64, Rs) >> shamt) : (sxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rx|=lsr(Rs,Rt)", 
        "1100110000-sssssPP-ttttt01-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx | (shamt > 0) ? lsr(zxt(32, 64, Rs), shamt) : (zxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rx|=asl(Rs,Rt)", 
        "1100110000-sssssPP-ttttt10-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx | (shamt > 0) ? (sxt(32, 64, Rs) << shamt) : (sxt(32, 64, Rs) >> shamt);"
    ], 
    [
        "Rx|=lsl(Rs,Rt)", 
        "1100110000-sssssPP-ttttt11-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx | (shamt > 0) ? (zxt(32, 64, Rs) << shamt) : lsr(zxt(32, 64, Rs), shamt);"
    ], 
    [
        "Rx&=asr(Rs,Rt)", 
        "1100110001-sssssPP-ttttt00-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx & (shamt > 0) ? (sxt(32, 64, Rs) >> shamt) : (sxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rx&=lsr(Rs,Rt)", 
        "1100110001-sssssPP-ttttt01-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx & (shamt > 0) ? lsr(zxt(32, 64, Rs), shamt) : (zxt(32, 64, Rs) << shamt);"
    ], 
    [
        "Rx&=asl(Rs,Rt)", 
        "1100110001-sssssPP-ttttt10-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx & (shamt > 0) ? (sxt(32, 64, Rs) << shamt) : (sxt(32, 64, Rs) >> shamt);"
    ], 
    [
        "Rx&=lsl(Rs,Rt)", 
        "1100110001-sssssPP-ttttt11-xxxxx", 
        "shamt = sxt(7, 32, Rt);\nRx = Rx & (shamt > 0) ? (zxt(32, 64, Rs) << shamt) : lsr(zxt(32, 64, Rs), shamt);"
    ], 
    [
        "Rd=asr(Rs,Rt):sat", 
        "1100011000-sssssPP-ttttt00-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRd = bidir_shiftr(Rs, shamt);"
    ], 
    [
        "Rd=asl(Rs,Rt):sat", 
        "1100011000-sssssPP-ttttt10-ddddd", 
        "shamt = sxt(7, 32, Rt);\nRd = bidir_shiftl(Rs, shamt);"
    ], 
    [
        "Rdd=vasrh(Rss,#u4)", 
        "10000000100sssssPP00iiii000ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rss.h[i] >> imm_u);\n}"
    ], 
    [
        "Rdd=vlsrh(Rss,#u4)", 
        "10000000100sssssPP00iiii001ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rss.uh[i] >> imm_u);\n}"
    ], 
    [
        "Rdd=vaslh(Rss,#u4)", 
        "10000000100sssssPP00iiii010ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (Rss.h[i] << imm_u);\n}"
    ], 
    [
        "Rdd=vasrh(Rss,#u4):raw", 
        "10000000001sssssPP00iiii000ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (((Rss.h[i] >> imm_u) + 1) >> 1);\n}"
    ], 
    [
        "Rd=vasrhub(Rss,#u4):raw", 
        "10001000011sssssPP00iiii100ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rd.b[i] = usat(8, ((Rss.h[i] >> imm_u) + 1) >> 1);\n}"
    ], 
    [
        "Rd=vasrhub(Rss,#u4):sat", 
        "10001000011sssssPP00iiii101ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rd.b[i] = usat(8, Rss.h[i] >> imm_u);\n}"
    ], 
    [
        "Rdd=vasrh(Rss,Rt)", 
        "1100001101-sssssPP-ttttt00-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (sxt(7, 32, Rt) > 0) ? (sxt(16, 64, Rss.h[i]) >> sxt(7, 32, Rt)) : (sxt(16, 64, Rss.h[i]) << sxt(7, 32, Rt));\n}"
    ], 
    [
        "Rdd=vlsrh(Rss,Rt)", 
        "1100001101-sssssPP-ttttt01-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (sxt(7, 32, Rt) > 0) ? lsr(zxt(16, 64, Rss.uh[i]), sxt(7, 32, Rt)) : (zxt(16, 64, Rss.uh[i]) << sxt(7, 32, Rt));\n}"
    ], 
    [
        "Rdd=vaslh(Rss,Rt)", 
        "1100001101-sssssPP-ttttt10-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (sxt(7, 32, Rt) > 0) ? (sxt(16, 64, Rss.h[i]) << sxt(7, 32, Rt)) : (sxt(16, 64, Rss.h[i]) >> sxt(7, 32, Rt));\n}"
    ], 
    [
        "Rdd=vlslh(Rss,Rt)", 
        "1100001101-sssssPP-ttttt11-ddddd", 
        "for (i = 0; i < 4; i++) {\n    Rdd.h[i] = (sxt(7, 32, Rt) > 0) ? (zxt(16, 64, Rss.uh[i]) << sxt(7, 32, Rt)) : lsr(zxt(16, 64, Rss.uh[i]), sxt(7, 32, Rt));\n}"
    ], 
    [
        "Rdd=vasrw(Rss,#u5)", 
        "10000000010sssssPP0iiiii000ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (Rss.w[i] >> imm_u);\n}"
    ], 
    [
        "Rdd=vlsrw(Rss,#u5)", 
        "10000000010sssssPP0iiiii001ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (Rss.uw[i] >> imm_u);\n}"
    ], 
    [
        "Rdd=vaslw(Rss,#u5)", 
        "10000000010sssssPP0iiiii010ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (Rss.w[i] << imm_u);\n}"
    ], 
    [
        "Rdd=vasrw(Rss,Rt)", 
        "1100001100-sssssPP-ttttt00-ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (sxt(7, 32, Rt) > 0) ? (sxt(32, 64, Rss.w[i]) >> sxt(7, 32, Rt)) : (sxt(32, 64, Rss.w[i]) << sxt(7, 32, Rt));\n}"
    ], 
    [
        "Rdd=vlsrw(Rss,Rt)", 
        "1100001100-sssssPP-ttttt01-ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (sxt(7, 32, Rt) > 0) ? lsr(zxt(32, 64, Rss.uw[i]), sxt(7, 32, Rt)) : (zxt(32, 64, Rss.uw[i]) << sxt(7, 32, Rt));\n}"
    ], 
    [
        "Rdd=vaslw(Rss,Rt)", 
        "1100001100-sssssPP-ttttt10-ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (sxt(7, 32, Rt) > 0) ? (sxt(32, 64, Rss.w[i]) << sxt(7, 32, Rt)) : (sxt(32, 64, Rss.w[i]) >> sxt(7, 32, Rt));\n}"
    ], 
    [
        "Rdd=vlslw(Rss,Rt)", 
        "1100001100-sssssPP-ttttt11-ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rdd.w[i] = (sxt(7, 32, Rt) > 0) ? (zxt(32, 64, Rss.uw[i]) << sxt(7, 32, Rt)) : lsr(zxt(32, 64, Rss.uw[i]), sxt(7, 32, Rt));\n}"
    ], 
    [
        "Rd=vasrw(Rss,#u5)", 
        "10001000110sssssPP0iiiii010ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = (Rss.w[i] >> imm_u).h[0];\n}"
    ], 
    [
        "Rd=vasrw(Rss,Rt)", 
        "11000101---sssssPP-ttttt010ddddd", 
        "for (i = 0; i < 2; i++) {\n    Rd.h[i] = (sxt(7, 32, Rt) > 0) ? (sxt32 - 64(Rss.w[i]) >> sxt(7, 32, Rt)) : (sxt32 - 64(Rss.w[i]) << sxt(7, 32, Rt)).h[0];\n}"
    ], 
    [
        "Rd=not(Rs)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rd=sub(imm_-1,Rs)\";"
    ], 
    [
        "Rd=neg(Rs)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rd=sub(imm_0,Rs)\";"
    ], 
    [
        "Rdd=#s8", 
        "--------------------------------", 
        "if (imm_s8 < 0) {\n    Assembler mapped to:\"Rdd=combine(imm_-1,imm_s8)\";\n} else {\n    Assembler mapped to:\"Rdd=combine(imm_0,imm_s8)\";\n}"
    ], 
    [
        "Rdd=Rss", 
        "--------------------------------", 
        "Assembler mapped to:\"Rdd=combine(Rss.H32,Rss.L32)\";"
    ], 
    [
        "Rd=zxtb(Rs)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rd=and(Rs,imm_255)\";"
    ], 
    [
        "if (Pu[.new]) Rd=Rs", 
        "--------------------------------", 
        "Assembler mapped to:\"if (Pu[.new]) Rd=add(Rs,imm_0)\";"
    ], 
    [
        "if (!Pu[.new]) Rd=Rs", 
        "--------------------------------", 
        "Assembler mapped to:\"if (!Pu[.new]) Rd=add(Rs,imm_0)\";"
    ], 
    [
        "if ([!]Pu) Rd=Rs", 
        "--------------------------------", 
        "Assembler mapped to:\"if ([!]Pu) Rd=add(Rs,imm_0)\";"
    ], 
    [
        "if ([!]Pu.new) Rd=Rs", 
        "--------------------------------", 
        "Assembler mapped to:\"if ([!]Pu.new) Rd=add(Rs,imm_0)\";"
    ], 
    [
        "if (Pu[.new]) Rdd=Rss", 
        "--------------------------------", 
        "Assembler mapped to:\"if (Pu[.new]) Rdd=combine(Rss.H32,Rss.L32)\";"
    ], 
    [
        "if (!Pu[.new]) Rdd=Rss", 
        "--------------------------------", 
        "Assembler mapped to:\"if (!Pu[.new]) Rdd=combine(Rss.H32,Rss.L32)\";"
    ], 
    [
        "if ([!]Pu) Rdd=Rss", 
        "--------------------------------", 
        "Assembler mapped to:\"if ([!]Pu) Rdd=combine(Rss.H32,Rss.L32)\";"
    ], 
    [
        "if ([!]Pu.new) Rdd=Rss", 
        "--------------------------------", 
        "Assembler mapped to:\"if ([!]Pu.new) Rdd=combine(Rss.H32,Rss.L32)\";"
    ], 
    [
        "Pd=cmp.ge(Rs,#s8)", 
        "--------------------------------", 
        "Assembler mapped to:\"Pd=cmp.gt(Rs,imm_s8-1)\";"
    ], 
    [
        "Pd=cmp.geu(Rs,#u8)", 
        "--------------------------------", 
        "if (imm_u8 == 0) {\n    Assembler mapped to:\"Pd=cmp.eq(Rs,Rs)\";\n} else {\n    Assembler mapped to:\"Pd=cmp.gtu(Rs,imm_u8-1)\";\n}"
    ], 
    [
        "Pd=cmp.lt(Rs,Rt)", 
        "--------------------------------", 
        "Assembler mapped to:\"Pd=cmp.gt(Rt,Rs)\";"
    ], 
    [
        "Pd=cmp.ltu(Rs,Rt)", 
        "--------------------------------", 
        "Assembler mapped to:\"Pd=cmp.gtu(Rt,Rs)\";"
    ], 
    [
        "Pd=Ps", 
        "--------------------------------", 
        "Assembler mapped to:\"Pd=or(Ps,Ps)\";"
    ], 
    [
        "if (Pu) jumpr Rs", 
        "--------------------------------", 
        "Assembler mapped to:\"if (Pu) jumpr:nt Rs\";"
    ], 
    [
        "if (!Pu) jumpr Rs", 
        "--------------------------------", 
        "Assembler mapped to:\"if (!Pu) jumpr:nt Rs\";"
    ], 
    [
        "if (Pu) jump #r15:2", 
        "--------------------------------", 
        "Assembler mapped to:\"if (Pu) jump:nt imm_r15:2\";"
    ], 
    [
        "if (!Pu) jump #r15:2", 
        "--------------------------------", 
        "Assembler mapped to:\"if (!Pu) jump:nt imm_r15:2\";"
    ], 
    [
        "Ryy=memb_fifo(Rs)", 
        "--------------------------------", 
        "Assembler mapped to:\"Ryy=memb_fifo(Rs+imm_0)\";"
    ], 
    [
        "Ryy=memh_fifo(Rs)", 
        "--------------------------------", 
        "Assembler mapped to:\"Ryy=memh_fifo(Rs+imm_0)\";"
    ], 
    [
        "deallocframe", 
        "--------------------------------", 
        "Assembler mapped to:\"r31:30=deallocframe(r30):raw\";"
    ], 
    [
        "dealloc_return", 
        "--------------------------------", 
        "Assembler mapped to:\"r31:30=dealloc_return(r30):raw\";"
    ], 
    [
        "if (Pv) dealloc_return", 
        "--------------------------------", 
        "Assembler mapped to:\"if (Pv) r31:30=dealloc_return(r30):raw\";"
    ], 
    [
        "if (!Pv) dealloc_return", 
        "--------------------------------", 
        "Assembler mapped to:\"if (!Pv) r31:30=dealloc_return(r30):raw\";"
    ], 
    [
        "if (Pv.new) dealloc_return:nt", 
        "--------------------------------", 
        "Assembler mapped to:\"if (Pv.new) r31:30=dealloc_return(r30):nt:raw\";"
    ], 
    [
        "if (!Pv.new) dealloc_return:nt", 
        "--------------------------------", 
        "Assembler mapped to:\"if (!Pv.new) r31:30=dealloc_return(r30):nt:raw\";"
    ], 
    [
        "if (Pv.new) dealloc_return:t", 
        "--------------------------------", 
        "Assembler mapped to:\"if (Pv.new) r31:30=dealloc_return(r30):t:raw\";"
    ], 
    [
        "if (!Pv.new) dealloc_return:t", 
        "--------------------------------", 
        "Assembler mapped to:\"if (!Pv.new) r31:30=dealloc_return(r30):t:raw\";"
    ], 
    [
        "Rd=membh(Rs)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rd=membh(Rs+imm_0)\";"
    ], 
    [
        "Rdd=membh(Rs)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rdd=membh(Rs+imm_0)\";"
    ], 
    [
        "allocframe(#u11:3)", 
        "--------------------------------", 
        "Assembler mapped to:\"allocframe(r29,imm_u11:3):raw\";"
    ], 
    [
        "crswap(Rx,sgp)", 
        "--------------------------------", 
        "Assembler mapped to:\"crswap(Rx,sgp0)\";"
    ], 
    [
        "dcfetch(Rs)", 
        "--------------------------------", 
        "Assembler mapped to:\"dcfetch(Rs+imm_0)\";"
    ], 
    [
        "trap1(#u8)", 
        "--------------------------------", 
        "Assembler mapped to:\"trap1(R0,imm_u8)\";"
    ], 
    [
        "Rdd=add(Rs,Rtt)", 
        "--------------------------------", 
        "if (Rs & 1) {\n    Assembler mapped to:\"Rdd=add(Rss,Rtt):raw:hi\";\n} else {\n    Assembler mapped to:\"Rdd=add(Rss,Rtt):raw:lo\";\n}"
    ], 
    [
        "Rdd=vaddb(Rss,Rtt)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rdd=vaddub(Rss,Rtt)\";"
    ], 
    [
        "Rdd=vsubb(Rss,Rtt)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rdd=vsubub(Rss,Rtt)\";"
    ], 
    [
        "Rx=tableidxb(Rs,#u4,#U5)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rx=tableidxb(Rs,imm_u4,imm_U5):raw\";"
    ], 
    [
        "Rx=tableidxd(Rs,#u4,#U5)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rx=tableidxd(Rs,imm_u4,imm_U5-3):raw\";"
    ], 
    [
        "Rx=tableidxh(Rs,#u4,#U5)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rx=tableidxh(Rs,imm_u4,imm_U5-1):raw\";"
    ], 
    [
        "Rx=tableidxw(Rs,#u4,#U5)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rx=tableidxw(Rs,imm_u4,imm_U5-2):raw\";"
    ], 
    [
        "Rdd=vrcmpys(Rss,Rt):<<1:sat", 
        "--------------------------------", 
        "if (Rt & 1) {\n    Assembler mapped to:\"Rdd=vrcmpys(Rss,Rtt):<<1:sat:raw:hi\";\n} else {\n    Assembler mapped to:\"Rdd=vrcmpys(Rss,Rtt):<<1:sat:raw:lo\";\n}"
    ], 
    [
        "Rxx+=vrcmpys(Rss,Rt):<<1:sat", 
        "--------------------------------", 
        "if (Rt & 1) {\n    Assembler mapped to:\"Rxx+=vrcmpys(Rss,Rtt):<<1:sat:raw:hi\";\n} else {\n    Assembler mapped to:\"Rxx+=vrcmpys(Rss,Rtt):<<1:sat:raw:lo\";\n}"
    ], 
    [
        "Rd=vrcmpys(Rss,Rt):<<1:rnd:sat", 
        "--------------------------------", 
        "if (Rt & 1) {\n    Assembler mapped to:\"Rd=vrcmpys(Rss,Rtt):<<1:rnd:sat:raw:hi\";\n} else {\n    Assembler mapped to:\"Rd=vrcmpys(Rss,Rtt):<<1:rnd:sat:raw:lo\";\n}"
    ], 
    [
        "Rd=mpyi(Rs,#m9)", 
        "--------------------------------", 
        "if (((imm_m9 < 0) && (imm_m9 > -256))) {\n    Assembler mapped to:\"Rd=-mpyi(Rs,imm_m9*(-1))\";\n} else {\n    Assembler mapped to:\"Rd=+mpyi(Rs,imm_m9)\";\n}"
    ], 
    [
        "Rd=mpyui(Rs,Rt)", 
        "--------------------------------", 
        "Assembler mapped to:\"Rd=mpyi(Rs,Rt)\";"
    ], 
    [
        "Pd=boundscheck(Rs,Rtt)", 
        "--------------------------------", 
        "if (Rs & 1) {\n    Assembler mapped to:\"Pd=boundscheck(Rss,Rtt):raw:hi\";\n} else {\n    Assembler mapped to:\"Pd=boundscheck(Rss,Rtt):raw:lo\";\n}"
    ], 
    [
        "Rd=asrrnd(Rs,#u5)", 
        "--------------------------------", 
        "if (imm_u5 == 0) {\n    Assembler mapped to:\"Rd=Rs\";\n} else {\n    Assembler mapped to:\"Rd=asr(Rs,imm_u5-1):rnd\";\n}"
    ], 
    [
        "Rdd=asrrnd(Rss,#u6)", 
        "--------------------------------", 
        "if (imm_u6 == 0) {\n    Assembler mapped to:\"Rdd=Rss\";\n} else {\n    Assembler mapped to:\"Rdd=asr(Rss,imm_u6-1):rnd\";\n}"
    ], 
    [
        "Rdd=vasrh(Rss,#u4):rnd", 
        "--------------------------------", 
        "if (imm_u4 == 0) {\n    Assembler mapped to:\"Rdd=Rss\";\n} else {\n    Assembler mapped to:\"Rdd=vasrh(Rss,imm_u4-1):raw\";\n}"
    ], 
    [
        "Rd=vasrhub(Rss,#u4):rnd:sat", 
        "--------------------------------", 
        "if (imm_u4 == 0) {\n    Assembler mapped to:\"Rd=vsathub(Rss)\";\n} else {\n    Assembler mapped to:\"Rd=vasrhub(Rss,imm_u4-1):raw\";\n}"
    ]
]